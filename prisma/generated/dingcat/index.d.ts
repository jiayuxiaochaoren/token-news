
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model favorite
 * 
 */
export type favorite = $Result.DefaultSelection<Prisma.$favoritePayload>
/**
 * Model gangs
 * 
 */
export type gangs = $Result.DefaultSelection<Prisma.$gangsPayload>
/**
 * Model latest_sync_trans
 * 
 */
export type latest_sync_trans = $Result.DefaultSelection<Prisma.$latest_sync_transPayload>
/**
 * Model pass
 * 
 */
export type pass = $Result.DefaultSelection<Prisma.$passPayload>
/**
 * Model privy_user
 * 
 */
export type privy_user = $Result.DefaultSelection<Prisma.$privy_userPayload>
/**
 * Model privy_users_tokens
 * 
 */
export type privy_users_tokens = $Result.DefaultSelection<Prisma.$privy_users_tokensPayload>
/**
 * Model problem_trans
 * 
 */
export type problem_trans = $Result.DefaultSelection<Prisma.$problem_transPayload>
/**
 * Model sol_price
 * 
 */
export type sol_price = $Result.DefaultSelection<Prisma.$sol_pricePayload>
/**
 * Model sorted_tags
 * 
 */
export type sorted_tags = $Result.DefaultSelection<Prisma.$sorted_tagsPayload>
/**
 * Model swap
 * 
 */
export type swap = $Result.DefaultSelection<Prisma.$swapPayload>
/**
 * Model tokens
 * 
 */
export type tokens = $Result.DefaultSelection<Prisma.$tokensPayload>
/**
 * Model transactions
 * 
 */
export type transactions = $Result.DefaultSelection<Prisma.$transactionsPayload>
/**
 * Model tts
 * 
 */
export type tts = $Result.DefaultSelection<Prisma.$ttsPayload>
/**
 * Model user_watching_tokens
 * 
 */
export type user_watching_tokens = $Result.DefaultSelection<Prisma.$user_watching_tokensPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model users_tokens
 * 
 */
export type users_tokens = $Result.DefaultSelection<Prisma.$users_tokensPayload>
/**
 * Model wallets
 * 
 */
export type wallets = $Result.DefaultSelection<Prisma.$walletsPayload>
/**
 * Model wallets_transactions
 * 
 */
export type wallets_transactions = $Result.DefaultSelection<Prisma.$wallets_transactionsPayload>
/**
 * Model wallets_users
 * 
 */
export type wallets_users = $Result.DefaultSelection<Prisma.$wallets_usersPayload>
/**
 * Model alert_messages
 * 
 */
export type alert_messages = $Result.DefaultSelection<Prisma.$alert_messagesPayload>
/**
 * Model fomo_alert
 * 
 */
export type fomo_alert = $Result.DefaultSelection<Prisma.$fomo_alertPayload>
/**
 * Model wallet_alias
 * 
 */
export type wallet_alias = $Result.DefaultSelection<Prisma.$wallet_aliasPayload>
/**
 * Model cabal_tokens
 * 
 */
export type cabal_tokens = $Result.DefaultSelection<Prisma.$cabal_tokensPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Favorites
 * const favorites = await prisma.favorite.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Favorites
   * const favorites = await prisma.favorite.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.favorite`: Exposes CRUD operations for the **favorite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favorites
    * const favorites = await prisma.favorite.findMany()
    * ```
    */
  get favorite(): Prisma.favoriteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gangs`: Exposes CRUD operations for the **gangs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Gangs
    * const gangs = await prisma.gangs.findMany()
    * ```
    */
  get gangs(): Prisma.gangsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.latest_sync_trans`: Exposes CRUD operations for the **latest_sync_trans** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Latest_sync_trans
    * const latest_sync_trans = await prisma.latest_sync_trans.findMany()
    * ```
    */
  get latest_sync_trans(): Prisma.latest_sync_transDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pass`: Exposes CRUD operations for the **pass** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Passes
    * const passes = await prisma.pass.findMany()
    * ```
    */
  get pass(): Prisma.passDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.privy_user`: Exposes CRUD operations for the **privy_user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Privy_users
    * const privy_users = await prisma.privy_user.findMany()
    * ```
    */
  get privy_user(): Prisma.privy_userDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.privy_users_tokens`: Exposes CRUD operations for the **privy_users_tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Privy_users_tokens
    * const privy_users_tokens = await prisma.privy_users_tokens.findMany()
    * ```
    */
  get privy_users_tokens(): Prisma.privy_users_tokensDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.problem_trans`: Exposes CRUD operations for the **problem_trans** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Problem_trans
    * const problem_trans = await prisma.problem_trans.findMany()
    * ```
    */
  get problem_trans(): Prisma.problem_transDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sol_price`: Exposes CRUD operations for the **sol_price** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sol_prices
    * const sol_prices = await prisma.sol_price.findMany()
    * ```
    */
  get sol_price(): Prisma.sol_priceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sorted_tags`: Exposes CRUD operations for the **sorted_tags** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sorted_tags
    * const sorted_tags = await prisma.sorted_tags.findMany()
    * ```
    */
  get sorted_tags(): Prisma.sorted_tagsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.swap`: Exposes CRUD operations for the **swap** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Swaps
    * const swaps = await prisma.swap.findMany()
    * ```
    */
  get swap(): Prisma.swapDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tokens`: Exposes CRUD operations for the **tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.tokens.findMany()
    * ```
    */
  get tokens(): Prisma.tokensDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transactions`: Exposes CRUD operations for the **transactions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transactions.findMany()
    * ```
    */
  get transactions(): Prisma.transactionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tts`: Exposes CRUD operations for the **tts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tts
    * const tts = await prisma.tts.findMany()
    * ```
    */
  get tts(): Prisma.ttsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user_watching_tokens`: Exposes CRUD operations for the **user_watching_tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more User_watching_tokens
    * const user_watching_tokens = await prisma.user_watching_tokens.findMany()
    * ```
    */
  get user_watching_tokens(): Prisma.user_watching_tokensDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users_tokens`: Exposes CRUD operations for the **users_tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users_tokens
    * const users_tokens = await prisma.users_tokens.findMany()
    * ```
    */
  get users_tokens(): Prisma.users_tokensDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wallets`: Exposes CRUD operations for the **wallets** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallets
    * const wallets = await prisma.wallets.findMany()
    * ```
    */
  get wallets(): Prisma.walletsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wallets_transactions`: Exposes CRUD operations for the **wallets_transactions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallets_transactions
    * const wallets_transactions = await prisma.wallets_transactions.findMany()
    * ```
    */
  get wallets_transactions(): Prisma.wallets_transactionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wallets_users`: Exposes CRUD operations for the **wallets_users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallets_users
    * const wallets_users = await prisma.wallets_users.findMany()
    * ```
    */
  get wallets_users(): Prisma.wallets_usersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alert_messages`: Exposes CRUD operations for the **alert_messages** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alert_messages
    * const alert_messages = await prisma.alert_messages.findMany()
    * ```
    */
  get alert_messages(): Prisma.alert_messagesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fomo_alert`: Exposes CRUD operations for the **fomo_alert** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Fomo_alerts
    * const fomo_alerts = await prisma.fomo_alert.findMany()
    * ```
    */
  get fomo_alert(): Prisma.fomo_alertDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wallet_alias`: Exposes CRUD operations for the **wallet_alias** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallet_aliases
    * const wallet_aliases = await prisma.wallet_alias.findMany()
    * ```
    */
  get wallet_alias(): Prisma.wallet_aliasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cabal_tokens`: Exposes CRUD operations for the **cabal_tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cabal_tokens
    * const cabal_tokens = await prisma.cabal_tokens.findMany()
    * ```
    */
  get cabal_tokens(): Prisma.cabal_tokensDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.2.1
   * Query Engine version: 4123509d24aa4dede1e864b46351bf2790323b69
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    favorite: 'favorite',
    gangs: 'gangs',
    latest_sync_trans: 'latest_sync_trans',
    pass: 'pass',
    privy_user: 'privy_user',
    privy_users_tokens: 'privy_users_tokens',
    problem_trans: 'problem_trans',
    sol_price: 'sol_price',
    sorted_tags: 'sorted_tags',
    swap: 'swap',
    tokens: 'tokens',
    transactions: 'transactions',
    tts: 'tts',
    user_watching_tokens: 'user_watching_tokens',
    users: 'users',
    users_tokens: 'users_tokens',
    wallets: 'wallets',
    wallets_transactions: 'wallets_transactions',
    wallets_users: 'wallets_users',
    alert_messages: 'alert_messages',
    fomo_alert: 'fomo_alert',
    wallet_alias: 'wallet_alias',
    cabal_tokens: 'cabal_tokens'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "favorite" | "gangs" | "latest_sync_trans" | "pass" | "privy_user" | "privy_users_tokens" | "problem_trans" | "sol_price" | "sorted_tags" | "swap" | "tokens" | "transactions" | "tts" | "user_watching_tokens" | "users" | "users_tokens" | "wallets" | "wallets_transactions" | "wallets_users" | "alert_messages" | "fomo_alert" | "wallet_alias" | "cabal_tokens"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      favorite: {
        payload: Prisma.$favoritePayload<ExtArgs>
        fields: Prisma.favoriteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.favoriteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favoritePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.favoriteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favoritePayload>
          }
          findFirst: {
            args: Prisma.favoriteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favoritePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.favoriteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favoritePayload>
          }
          findMany: {
            args: Prisma.favoriteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favoritePayload>[]
          }
          create: {
            args: Prisma.favoriteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favoritePayload>
          }
          createMany: {
            args: Prisma.favoriteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.favoriteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favoritePayload>[]
          }
          delete: {
            args: Prisma.favoriteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favoritePayload>
          }
          update: {
            args: Prisma.favoriteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favoritePayload>
          }
          deleteMany: {
            args: Prisma.favoriteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.favoriteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.favoriteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favoritePayload>[]
          }
          upsert: {
            args: Prisma.favoriteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$favoritePayload>
          }
          aggregate: {
            args: Prisma.FavoriteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFavorite>
          }
          groupBy: {
            args: Prisma.favoriteGroupByArgs<ExtArgs>
            result: $Utils.Optional<FavoriteGroupByOutputType>[]
          }
          count: {
            args: Prisma.favoriteCountArgs<ExtArgs>
            result: $Utils.Optional<FavoriteCountAggregateOutputType> | number
          }
        }
      }
      gangs: {
        payload: Prisma.$gangsPayload<ExtArgs>
        fields: Prisma.gangsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.gangsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gangsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.gangsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gangsPayload>
          }
          findFirst: {
            args: Prisma.gangsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gangsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.gangsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gangsPayload>
          }
          findMany: {
            args: Prisma.gangsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gangsPayload>[]
          }
          create: {
            args: Prisma.gangsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gangsPayload>
          }
          createMany: {
            args: Prisma.gangsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.gangsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gangsPayload>[]
          }
          delete: {
            args: Prisma.gangsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gangsPayload>
          }
          update: {
            args: Prisma.gangsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gangsPayload>
          }
          deleteMany: {
            args: Prisma.gangsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.gangsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.gangsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gangsPayload>[]
          }
          upsert: {
            args: Prisma.gangsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gangsPayload>
          }
          aggregate: {
            args: Prisma.GangsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGangs>
          }
          groupBy: {
            args: Prisma.gangsGroupByArgs<ExtArgs>
            result: $Utils.Optional<GangsGroupByOutputType>[]
          }
          count: {
            args: Prisma.gangsCountArgs<ExtArgs>
            result: $Utils.Optional<GangsCountAggregateOutputType> | number
          }
        }
      }
      latest_sync_trans: {
        payload: Prisma.$latest_sync_transPayload<ExtArgs>
        fields: Prisma.latest_sync_transFieldRefs
        operations: {
          findUnique: {
            args: Prisma.latest_sync_transFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$latest_sync_transPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.latest_sync_transFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$latest_sync_transPayload>
          }
          findFirst: {
            args: Prisma.latest_sync_transFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$latest_sync_transPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.latest_sync_transFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$latest_sync_transPayload>
          }
          findMany: {
            args: Prisma.latest_sync_transFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$latest_sync_transPayload>[]
          }
          create: {
            args: Prisma.latest_sync_transCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$latest_sync_transPayload>
          }
          createMany: {
            args: Prisma.latest_sync_transCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.latest_sync_transCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$latest_sync_transPayload>[]
          }
          delete: {
            args: Prisma.latest_sync_transDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$latest_sync_transPayload>
          }
          update: {
            args: Prisma.latest_sync_transUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$latest_sync_transPayload>
          }
          deleteMany: {
            args: Prisma.latest_sync_transDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.latest_sync_transUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.latest_sync_transUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$latest_sync_transPayload>[]
          }
          upsert: {
            args: Prisma.latest_sync_transUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$latest_sync_transPayload>
          }
          aggregate: {
            args: Prisma.Latest_sync_transAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLatest_sync_trans>
          }
          groupBy: {
            args: Prisma.latest_sync_transGroupByArgs<ExtArgs>
            result: $Utils.Optional<Latest_sync_transGroupByOutputType>[]
          }
          count: {
            args: Prisma.latest_sync_transCountArgs<ExtArgs>
            result: $Utils.Optional<Latest_sync_transCountAggregateOutputType> | number
          }
        }
      }
      pass: {
        payload: Prisma.$passPayload<ExtArgs>
        fields: Prisma.passFieldRefs
        operations: {
          findUnique: {
            args: Prisma.passFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.passFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passPayload>
          }
          findFirst: {
            args: Prisma.passFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.passFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passPayload>
          }
          findMany: {
            args: Prisma.passFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passPayload>[]
          }
          create: {
            args: Prisma.passCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passPayload>
          }
          createMany: {
            args: Prisma.passCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.passCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passPayload>[]
          }
          delete: {
            args: Prisma.passDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passPayload>
          }
          update: {
            args: Prisma.passUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passPayload>
          }
          deleteMany: {
            args: Prisma.passDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.passUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.passUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passPayload>[]
          }
          upsert: {
            args: Prisma.passUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$passPayload>
          }
          aggregate: {
            args: Prisma.PassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePass>
          }
          groupBy: {
            args: Prisma.passGroupByArgs<ExtArgs>
            result: $Utils.Optional<PassGroupByOutputType>[]
          }
          count: {
            args: Prisma.passCountArgs<ExtArgs>
            result: $Utils.Optional<PassCountAggregateOutputType> | number
          }
        }
      }
      privy_user: {
        payload: Prisma.$privy_userPayload<ExtArgs>
        fields: Prisma.privy_userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.privy_userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.privy_userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_userPayload>
          }
          findFirst: {
            args: Prisma.privy_userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.privy_userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_userPayload>
          }
          findMany: {
            args: Prisma.privy_userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_userPayload>[]
          }
          create: {
            args: Prisma.privy_userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_userPayload>
          }
          createMany: {
            args: Prisma.privy_userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.privy_userCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_userPayload>[]
          }
          delete: {
            args: Prisma.privy_userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_userPayload>
          }
          update: {
            args: Prisma.privy_userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_userPayload>
          }
          deleteMany: {
            args: Prisma.privy_userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.privy_userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.privy_userUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_userPayload>[]
          }
          upsert: {
            args: Prisma.privy_userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_userPayload>
          }
          aggregate: {
            args: Prisma.Privy_userAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrivy_user>
          }
          groupBy: {
            args: Prisma.privy_userGroupByArgs<ExtArgs>
            result: $Utils.Optional<Privy_userGroupByOutputType>[]
          }
          count: {
            args: Prisma.privy_userCountArgs<ExtArgs>
            result: $Utils.Optional<Privy_userCountAggregateOutputType> | number
          }
        }
      }
      privy_users_tokens: {
        payload: Prisma.$privy_users_tokensPayload<ExtArgs>
        fields: Prisma.privy_users_tokensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.privy_users_tokensFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_users_tokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.privy_users_tokensFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_users_tokensPayload>
          }
          findFirst: {
            args: Prisma.privy_users_tokensFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_users_tokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.privy_users_tokensFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_users_tokensPayload>
          }
          findMany: {
            args: Prisma.privy_users_tokensFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_users_tokensPayload>[]
          }
          create: {
            args: Prisma.privy_users_tokensCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_users_tokensPayload>
          }
          createMany: {
            args: Prisma.privy_users_tokensCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.privy_users_tokensCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_users_tokensPayload>[]
          }
          delete: {
            args: Prisma.privy_users_tokensDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_users_tokensPayload>
          }
          update: {
            args: Prisma.privy_users_tokensUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_users_tokensPayload>
          }
          deleteMany: {
            args: Prisma.privy_users_tokensDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.privy_users_tokensUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.privy_users_tokensUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_users_tokensPayload>[]
          }
          upsert: {
            args: Prisma.privy_users_tokensUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$privy_users_tokensPayload>
          }
          aggregate: {
            args: Prisma.Privy_users_tokensAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrivy_users_tokens>
          }
          groupBy: {
            args: Prisma.privy_users_tokensGroupByArgs<ExtArgs>
            result: $Utils.Optional<Privy_users_tokensGroupByOutputType>[]
          }
          count: {
            args: Prisma.privy_users_tokensCountArgs<ExtArgs>
            result: $Utils.Optional<Privy_users_tokensCountAggregateOutputType> | number
          }
        }
      }
      problem_trans: {
        payload: Prisma.$problem_transPayload<ExtArgs>
        fields: Prisma.problem_transFieldRefs
        operations: {
          findUnique: {
            args: Prisma.problem_transFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$problem_transPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.problem_transFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$problem_transPayload>
          }
          findFirst: {
            args: Prisma.problem_transFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$problem_transPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.problem_transFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$problem_transPayload>
          }
          findMany: {
            args: Prisma.problem_transFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$problem_transPayload>[]
          }
          create: {
            args: Prisma.problem_transCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$problem_transPayload>
          }
          createMany: {
            args: Prisma.problem_transCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.problem_transCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$problem_transPayload>[]
          }
          delete: {
            args: Prisma.problem_transDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$problem_transPayload>
          }
          update: {
            args: Prisma.problem_transUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$problem_transPayload>
          }
          deleteMany: {
            args: Prisma.problem_transDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.problem_transUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.problem_transUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$problem_transPayload>[]
          }
          upsert: {
            args: Prisma.problem_transUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$problem_transPayload>
          }
          aggregate: {
            args: Prisma.Problem_transAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProblem_trans>
          }
          groupBy: {
            args: Prisma.problem_transGroupByArgs<ExtArgs>
            result: $Utils.Optional<Problem_transGroupByOutputType>[]
          }
          count: {
            args: Prisma.problem_transCountArgs<ExtArgs>
            result: $Utils.Optional<Problem_transCountAggregateOutputType> | number
          }
        }
      }
      sol_price: {
        payload: Prisma.$sol_pricePayload<ExtArgs>
        fields: Prisma.sol_priceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sol_priceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sol_pricePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sol_priceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sol_pricePayload>
          }
          findFirst: {
            args: Prisma.sol_priceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sol_pricePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sol_priceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sol_pricePayload>
          }
          findMany: {
            args: Prisma.sol_priceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sol_pricePayload>[]
          }
          create: {
            args: Prisma.sol_priceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sol_pricePayload>
          }
          createMany: {
            args: Prisma.sol_priceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.sol_priceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sol_pricePayload>[]
          }
          delete: {
            args: Prisma.sol_priceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sol_pricePayload>
          }
          update: {
            args: Prisma.sol_priceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sol_pricePayload>
          }
          deleteMany: {
            args: Prisma.sol_priceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.sol_priceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.sol_priceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sol_pricePayload>[]
          }
          upsert: {
            args: Prisma.sol_priceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sol_pricePayload>
          }
          aggregate: {
            args: Prisma.Sol_priceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSol_price>
          }
          groupBy: {
            args: Prisma.sol_priceGroupByArgs<ExtArgs>
            result: $Utils.Optional<Sol_priceGroupByOutputType>[]
          }
          count: {
            args: Prisma.sol_priceCountArgs<ExtArgs>
            result: $Utils.Optional<Sol_priceCountAggregateOutputType> | number
          }
        }
      }
      sorted_tags: {
        payload: Prisma.$sorted_tagsPayload<ExtArgs>
        fields: Prisma.sorted_tagsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sorted_tagsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sorted_tagsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sorted_tagsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sorted_tagsPayload>
          }
          findFirst: {
            args: Prisma.sorted_tagsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sorted_tagsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sorted_tagsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sorted_tagsPayload>
          }
          findMany: {
            args: Prisma.sorted_tagsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sorted_tagsPayload>[]
          }
          create: {
            args: Prisma.sorted_tagsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sorted_tagsPayload>
          }
          createMany: {
            args: Prisma.sorted_tagsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.sorted_tagsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sorted_tagsPayload>[]
          }
          delete: {
            args: Prisma.sorted_tagsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sorted_tagsPayload>
          }
          update: {
            args: Prisma.sorted_tagsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sorted_tagsPayload>
          }
          deleteMany: {
            args: Prisma.sorted_tagsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.sorted_tagsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.sorted_tagsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sorted_tagsPayload>[]
          }
          upsert: {
            args: Prisma.sorted_tagsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sorted_tagsPayload>
          }
          aggregate: {
            args: Prisma.Sorted_tagsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSorted_tags>
          }
          groupBy: {
            args: Prisma.sorted_tagsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Sorted_tagsGroupByOutputType>[]
          }
          count: {
            args: Prisma.sorted_tagsCountArgs<ExtArgs>
            result: $Utils.Optional<Sorted_tagsCountAggregateOutputType> | number
          }
        }
      }
      swap: {
        payload: Prisma.$swapPayload<ExtArgs>
        fields: Prisma.swapFieldRefs
        operations: {
          findUnique: {
            args: Prisma.swapFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$swapPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.swapFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$swapPayload>
          }
          findFirst: {
            args: Prisma.swapFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$swapPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.swapFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$swapPayload>
          }
          findMany: {
            args: Prisma.swapFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$swapPayload>[]
          }
          create: {
            args: Prisma.swapCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$swapPayload>
          }
          createMany: {
            args: Prisma.swapCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.swapCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$swapPayload>[]
          }
          delete: {
            args: Prisma.swapDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$swapPayload>
          }
          update: {
            args: Prisma.swapUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$swapPayload>
          }
          deleteMany: {
            args: Prisma.swapDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.swapUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.swapUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$swapPayload>[]
          }
          upsert: {
            args: Prisma.swapUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$swapPayload>
          }
          aggregate: {
            args: Prisma.SwapAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSwap>
          }
          groupBy: {
            args: Prisma.swapGroupByArgs<ExtArgs>
            result: $Utils.Optional<SwapGroupByOutputType>[]
          }
          count: {
            args: Prisma.swapCountArgs<ExtArgs>
            result: $Utils.Optional<SwapCountAggregateOutputType> | number
          }
        }
      }
      tokens: {
        payload: Prisma.$tokensPayload<ExtArgs>
        fields: Prisma.tokensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tokensFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tokensFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>
          }
          findFirst: {
            args: Prisma.tokensFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tokensFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>
          }
          findMany: {
            args: Prisma.tokensFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>[]
          }
          create: {
            args: Prisma.tokensCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>
          }
          createMany: {
            args: Prisma.tokensCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.tokensCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>[]
          }
          delete: {
            args: Prisma.tokensDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>
          }
          update: {
            args: Prisma.tokensUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>
          }
          deleteMany: {
            args: Prisma.tokensDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tokensUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.tokensUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>[]
          }
          upsert: {
            args: Prisma.tokensUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>
          }
          aggregate: {
            args: Prisma.TokensAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTokens>
          }
          groupBy: {
            args: Prisma.tokensGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokensGroupByOutputType>[]
          }
          count: {
            args: Prisma.tokensCountArgs<ExtArgs>
            result: $Utils.Optional<TokensCountAggregateOutputType> | number
          }
        }
      }
      transactions: {
        payload: Prisma.$transactionsPayload<ExtArgs>
        fields: Prisma.transactionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.transactionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.transactionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          findFirst: {
            args: Prisma.transactionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.transactionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          findMany: {
            args: Prisma.transactionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>[]
          }
          create: {
            args: Prisma.transactionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          createMany: {
            args: Prisma.transactionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.transactionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>[]
          }
          delete: {
            args: Prisma.transactionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          update: {
            args: Prisma.transactionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          deleteMany: {
            args: Prisma.transactionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.transactionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.transactionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>[]
          }
          upsert: {
            args: Prisma.transactionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          aggregate: {
            args: Prisma.TransactionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransactions>
          }
          groupBy: {
            args: Prisma.transactionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.transactionsCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionsCountAggregateOutputType> | number
          }
        }
      }
      tts: {
        payload: Prisma.$ttsPayload<ExtArgs>
        fields: Prisma.ttsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ttsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ttsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ttsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ttsPayload>
          }
          findFirst: {
            args: Prisma.ttsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ttsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ttsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ttsPayload>
          }
          findMany: {
            args: Prisma.ttsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ttsPayload>[]
          }
          create: {
            args: Prisma.ttsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ttsPayload>
          }
          createMany: {
            args: Prisma.ttsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ttsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ttsPayload>[]
          }
          delete: {
            args: Prisma.ttsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ttsPayload>
          }
          update: {
            args: Prisma.ttsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ttsPayload>
          }
          deleteMany: {
            args: Prisma.ttsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ttsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ttsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ttsPayload>[]
          }
          upsert: {
            args: Prisma.ttsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ttsPayload>
          }
          aggregate: {
            args: Prisma.TtsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTts>
          }
          groupBy: {
            args: Prisma.ttsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TtsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ttsCountArgs<ExtArgs>
            result: $Utils.Optional<TtsCountAggregateOutputType> | number
          }
        }
      }
      user_watching_tokens: {
        payload: Prisma.$user_watching_tokensPayload<ExtArgs>
        fields: Prisma.user_watching_tokensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.user_watching_tokensFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_watching_tokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.user_watching_tokensFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_watching_tokensPayload>
          }
          findFirst: {
            args: Prisma.user_watching_tokensFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_watching_tokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.user_watching_tokensFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_watching_tokensPayload>
          }
          findMany: {
            args: Prisma.user_watching_tokensFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_watching_tokensPayload>[]
          }
          create: {
            args: Prisma.user_watching_tokensCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_watching_tokensPayload>
          }
          createMany: {
            args: Prisma.user_watching_tokensCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.user_watching_tokensCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_watching_tokensPayload>[]
          }
          delete: {
            args: Prisma.user_watching_tokensDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_watching_tokensPayload>
          }
          update: {
            args: Prisma.user_watching_tokensUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_watching_tokensPayload>
          }
          deleteMany: {
            args: Prisma.user_watching_tokensDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.user_watching_tokensUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.user_watching_tokensUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_watching_tokensPayload>[]
          }
          upsert: {
            args: Prisma.user_watching_tokensUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$user_watching_tokensPayload>
          }
          aggregate: {
            args: Prisma.User_watching_tokensAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser_watching_tokens>
          }
          groupBy: {
            args: Prisma.user_watching_tokensGroupByArgs<ExtArgs>
            result: $Utils.Optional<User_watching_tokensGroupByOutputType>[]
          }
          count: {
            args: Prisma.user_watching_tokensCountArgs<ExtArgs>
            result: $Utils.Optional<User_watching_tokensCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.usersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      users_tokens: {
        payload: Prisma.$users_tokensPayload<ExtArgs>
        fields: Prisma.users_tokensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.users_tokensFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_tokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.users_tokensFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_tokensPayload>
          }
          findFirst: {
            args: Prisma.users_tokensFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_tokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.users_tokensFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_tokensPayload>
          }
          findMany: {
            args: Prisma.users_tokensFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_tokensPayload>[]
          }
          create: {
            args: Prisma.users_tokensCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_tokensPayload>
          }
          createMany: {
            args: Prisma.users_tokensCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.users_tokensCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_tokensPayload>[]
          }
          delete: {
            args: Prisma.users_tokensDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_tokensPayload>
          }
          update: {
            args: Prisma.users_tokensUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_tokensPayload>
          }
          deleteMany: {
            args: Prisma.users_tokensDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.users_tokensUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.users_tokensUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_tokensPayload>[]
          }
          upsert: {
            args: Prisma.users_tokensUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_tokensPayload>
          }
          aggregate: {
            args: Prisma.Users_tokensAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers_tokens>
          }
          groupBy: {
            args: Prisma.users_tokensGroupByArgs<ExtArgs>
            result: $Utils.Optional<Users_tokensGroupByOutputType>[]
          }
          count: {
            args: Prisma.users_tokensCountArgs<ExtArgs>
            result: $Utils.Optional<Users_tokensCountAggregateOutputType> | number
          }
        }
      }
      wallets: {
        payload: Prisma.$walletsPayload<ExtArgs>
        fields: Prisma.walletsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.walletsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.walletsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletsPayload>
          }
          findFirst: {
            args: Prisma.walletsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.walletsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletsPayload>
          }
          findMany: {
            args: Prisma.walletsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletsPayload>[]
          }
          create: {
            args: Prisma.walletsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletsPayload>
          }
          createMany: {
            args: Prisma.walletsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.walletsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletsPayload>[]
          }
          delete: {
            args: Prisma.walletsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletsPayload>
          }
          update: {
            args: Prisma.walletsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletsPayload>
          }
          deleteMany: {
            args: Prisma.walletsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.walletsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.walletsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletsPayload>[]
          }
          upsert: {
            args: Prisma.walletsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$walletsPayload>
          }
          aggregate: {
            args: Prisma.WalletsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWallets>
          }
          groupBy: {
            args: Prisma.walletsGroupByArgs<ExtArgs>
            result: $Utils.Optional<WalletsGroupByOutputType>[]
          }
          count: {
            args: Prisma.walletsCountArgs<ExtArgs>
            result: $Utils.Optional<WalletsCountAggregateOutputType> | number
          }
        }
      }
      wallets_transactions: {
        payload: Prisma.$wallets_transactionsPayload<ExtArgs>
        fields: Prisma.wallets_transactionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.wallets_transactionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_transactionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.wallets_transactionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_transactionsPayload>
          }
          findFirst: {
            args: Prisma.wallets_transactionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_transactionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.wallets_transactionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_transactionsPayload>
          }
          findMany: {
            args: Prisma.wallets_transactionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_transactionsPayload>[]
          }
          create: {
            args: Prisma.wallets_transactionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_transactionsPayload>
          }
          createMany: {
            args: Prisma.wallets_transactionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.wallets_transactionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_transactionsPayload>[]
          }
          delete: {
            args: Prisma.wallets_transactionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_transactionsPayload>
          }
          update: {
            args: Prisma.wallets_transactionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_transactionsPayload>
          }
          deleteMany: {
            args: Prisma.wallets_transactionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.wallets_transactionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.wallets_transactionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_transactionsPayload>[]
          }
          upsert: {
            args: Prisma.wallets_transactionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_transactionsPayload>
          }
          aggregate: {
            args: Prisma.Wallets_transactionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWallets_transactions>
          }
          groupBy: {
            args: Prisma.wallets_transactionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Wallets_transactionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.wallets_transactionsCountArgs<ExtArgs>
            result: $Utils.Optional<Wallets_transactionsCountAggregateOutputType> | number
          }
        }
      }
      wallets_users: {
        payload: Prisma.$wallets_usersPayload<ExtArgs>
        fields: Prisma.wallets_usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.wallets_usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.wallets_usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_usersPayload>
          }
          findFirst: {
            args: Prisma.wallets_usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.wallets_usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_usersPayload>
          }
          findMany: {
            args: Prisma.wallets_usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_usersPayload>[]
          }
          create: {
            args: Prisma.wallets_usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_usersPayload>
          }
          createMany: {
            args: Prisma.wallets_usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.wallets_usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_usersPayload>[]
          }
          delete: {
            args: Prisma.wallets_usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_usersPayload>
          }
          update: {
            args: Prisma.wallets_usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_usersPayload>
          }
          deleteMany: {
            args: Prisma.wallets_usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.wallets_usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.wallets_usersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_usersPayload>[]
          }
          upsert: {
            args: Prisma.wallets_usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallets_usersPayload>
          }
          aggregate: {
            args: Prisma.Wallets_usersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWallets_users>
          }
          groupBy: {
            args: Prisma.wallets_usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<Wallets_usersGroupByOutputType>[]
          }
          count: {
            args: Prisma.wallets_usersCountArgs<ExtArgs>
            result: $Utils.Optional<Wallets_usersCountAggregateOutputType> | number
          }
        }
      }
      alert_messages: {
        payload: Prisma.$alert_messagesPayload<ExtArgs>
        fields: Prisma.alert_messagesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.alert_messagesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alert_messagesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.alert_messagesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alert_messagesPayload>
          }
          findFirst: {
            args: Prisma.alert_messagesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alert_messagesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.alert_messagesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alert_messagesPayload>
          }
          findMany: {
            args: Prisma.alert_messagesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alert_messagesPayload>[]
          }
          create: {
            args: Prisma.alert_messagesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alert_messagesPayload>
          }
          createMany: {
            args: Prisma.alert_messagesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.alert_messagesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alert_messagesPayload>[]
          }
          delete: {
            args: Prisma.alert_messagesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alert_messagesPayload>
          }
          update: {
            args: Prisma.alert_messagesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alert_messagesPayload>
          }
          deleteMany: {
            args: Prisma.alert_messagesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.alert_messagesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.alert_messagesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alert_messagesPayload>[]
          }
          upsert: {
            args: Prisma.alert_messagesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$alert_messagesPayload>
          }
          aggregate: {
            args: Prisma.Alert_messagesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlert_messages>
          }
          groupBy: {
            args: Prisma.alert_messagesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Alert_messagesGroupByOutputType>[]
          }
          count: {
            args: Prisma.alert_messagesCountArgs<ExtArgs>
            result: $Utils.Optional<Alert_messagesCountAggregateOutputType> | number
          }
        }
      }
      fomo_alert: {
        payload: Prisma.$fomo_alertPayload<ExtArgs>
        fields: Prisma.fomo_alertFieldRefs
        operations: {
          findUnique: {
            args: Prisma.fomo_alertFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fomo_alertPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.fomo_alertFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fomo_alertPayload>
          }
          findFirst: {
            args: Prisma.fomo_alertFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fomo_alertPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.fomo_alertFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fomo_alertPayload>
          }
          findMany: {
            args: Prisma.fomo_alertFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fomo_alertPayload>[]
          }
          create: {
            args: Prisma.fomo_alertCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fomo_alertPayload>
          }
          createMany: {
            args: Prisma.fomo_alertCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.fomo_alertCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fomo_alertPayload>[]
          }
          delete: {
            args: Prisma.fomo_alertDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fomo_alertPayload>
          }
          update: {
            args: Prisma.fomo_alertUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fomo_alertPayload>
          }
          deleteMany: {
            args: Prisma.fomo_alertDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.fomo_alertUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.fomo_alertUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fomo_alertPayload>[]
          }
          upsert: {
            args: Prisma.fomo_alertUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$fomo_alertPayload>
          }
          aggregate: {
            args: Prisma.Fomo_alertAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFomo_alert>
          }
          groupBy: {
            args: Prisma.fomo_alertGroupByArgs<ExtArgs>
            result: $Utils.Optional<Fomo_alertGroupByOutputType>[]
          }
          count: {
            args: Prisma.fomo_alertCountArgs<ExtArgs>
            result: $Utils.Optional<Fomo_alertCountAggregateOutputType> | number
          }
        }
      }
      wallet_alias: {
        payload: Prisma.$wallet_aliasPayload<ExtArgs>
        fields: Prisma.wallet_aliasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.wallet_aliasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallet_aliasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.wallet_aliasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallet_aliasPayload>
          }
          findFirst: {
            args: Prisma.wallet_aliasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallet_aliasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.wallet_aliasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallet_aliasPayload>
          }
          findMany: {
            args: Prisma.wallet_aliasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallet_aliasPayload>[]
          }
          create: {
            args: Prisma.wallet_aliasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallet_aliasPayload>
          }
          createMany: {
            args: Prisma.wallet_aliasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.wallet_aliasCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallet_aliasPayload>[]
          }
          delete: {
            args: Prisma.wallet_aliasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallet_aliasPayload>
          }
          update: {
            args: Prisma.wallet_aliasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallet_aliasPayload>
          }
          deleteMany: {
            args: Prisma.wallet_aliasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.wallet_aliasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.wallet_aliasUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallet_aliasPayload>[]
          }
          upsert: {
            args: Prisma.wallet_aliasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$wallet_aliasPayload>
          }
          aggregate: {
            args: Prisma.Wallet_aliasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWallet_alias>
          }
          groupBy: {
            args: Prisma.wallet_aliasGroupByArgs<ExtArgs>
            result: $Utils.Optional<Wallet_aliasGroupByOutputType>[]
          }
          count: {
            args: Prisma.wallet_aliasCountArgs<ExtArgs>
            result: $Utils.Optional<Wallet_aliasCountAggregateOutputType> | number
          }
        }
      }
      cabal_tokens: {
        payload: Prisma.$cabal_tokensPayload<ExtArgs>
        fields: Prisma.cabal_tokensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cabal_tokensFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cabal_tokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cabal_tokensFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cabal_tokensPayload>
          }
          findFirst: {
            args: Prisma.cabal_tokensFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cabal_tokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cabal_tokensFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cabal_tokensPayload>
          }
          findMany: {
            args: Prisma.cabal_tokensFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cabal_tokensPayload>[]
          }
          create: {
            args: Prisma.cabal_tokensCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cabal_tokensPayload>
          }
          createMany: {
            args: Prisma.cabal_tokensCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.cabal_tokensCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cabal_tokensPayload>[]
          }
          delete: {
            args: Prisma.cabal_tokensDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cabal_tokensPayload>
          }
          update: {
            args: Prisma.cabal_tokensUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cabal_tokensPayload>
          }
          deleteMany: {
            args: Prisma.cabal_tokensDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.cabal_tokensUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.cabal_tokensUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cabal_tokensPayload>[]
          }
          upsert: {
            args: Prisma.cabal_tokensUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cabal_tokensPayload>
          }
          aggregate: {
            args: Prisma.Cabal_tokensAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCabal_tokens>
          }
          groupBy: {
            args: Prisma.cabal_tokensGroupByArgs<ExtArgs>
            result: $Utils.Optional<Cabal_tokensGroupByOutputType>[]
          }
          count: {
            args: Prisma.cabal_tokensCountArgs<ExtArgs>
            result: $Utils.Optional<Cabal_tokensCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    favorite?: favoriteOmit
    gangs?: gangsOmit
    latest_sync_trans?: latest_sync_transOmit
    pass?: passOmit
    privy_user?: privy_userOmit
    privy_users_tokens?: privy_users_tokensOmit
    problem_trans?: problem_transOmit
    sol_price?: sol_priceOmit
    sorted_tags?: sorted_tagsOmit
    swap?: swapOmit
    tokens?: tokensOmit
    transactions?: transactionsOmit
    tts?: ttsOmit
    user_watching_tokens?: user_watching_tokensOmit
    users?: usersOmit
    users_tokens?: users_tokensOmit
    wallets?: walletsOmit
    wallets_transactions?: wallets_transactionsOmit
    wallets_users?: wallets_usersOmit
    alert_messages?: alert_messagesOmit
    fomo_alert?: fomo_alertOmit
    wallet_alias?: wallet_aliasOmit
    cabal_tokens?: cabal_tokensOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GangsCountOutputType
   */

  export type GangsCountOutputType = {
    wallets_users: number
  }

  export type GangsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallets_users?: boolean | GangsCountOutputTypeCountWallets_usersArgs
  }

  // Custom InputTypes
  /**
   * GangsCountOutputType without action
   */
  export type GangsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GangsCountOutputType
     */
    select?: GangsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GangsCountOutputType without action
   */
  export type GangsCountOutputTypeCountWallets_usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: wallets_usersWhereInput
  }


  /**
   * Count Type Privy_userCountOutputType
   */

  export type Privy_userCountOutputType = {
    favorite: number
    gangs: number
    tts: number
    user_watching_tokens: number
    wallets_users: number
  }

  export type Privy_userCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favorite?: boolean | Privy_userCountOutputTypeCountFavoriteArgs
    gangs?: boolean | Privy_userCountOutputTypeCountGangsArgs
    tts?: boolean | Privy_userCountOutputTypeCountTtsArgs
    user_watching_tokens?: boolean | Privy_userCountOutputTypeCountUser_watching_tokensArgs
    wallets_users?: boolean | Privy_userCountOutputTypeCountWallets_usersArgs
  }

  // Custom InputTypes
  /**
   * Privy_userCountOutputType without action
   */
  export type Privy_userCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Privy_userCountOutputType
     */
    select?: Privy_userCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Privy_userCountOutputType without action
   */
  export type Privy_userCountOutputTypeCountFavoriteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: favoriteWhereInput
  }

  /**
   * Privy_userCountOutputType without action
   */
  export type Privy_userCountOutputTypeCountGangsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: gangsWhereInput
  }

  /**
   * Privy_userCountOutputType without action
   */
  export type Privy_userCountOutputTypeCountTtsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ttsWhereInput
  }

  /**
   * Privy_userCountOutputType without action
   */
  export type Privy_userCountOutputTypeCountUser_watching_tokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_watching_tokensWhereInput
  }

  /**
   * Privy_userCountOutputType without action
   */
  export type Privy_userCountOutputTypeCountWallets_usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: wallets_usersWhereInput
  }


  /**
   * Count Type WalletsCountOutputType
   */

  export type WalletsCountOutputType = {
    wallets_users: number
  }

  export type WalletsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallets_users?: boolean | WalletsCountOutputTypeCountWallets_usersArgs
  }

  // Custom InputTypes
  /**
   * WalletsCountOutputType without action
   */
  export type WalletsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletsCountOutputType
     */
    select?: WalletsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WalletsCountOutputType without action
   */
  export type WalletsCountOutputTypeCountWallets_usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: wallets_usersWhereInput
  }


  /**
   * Models
   */

  /**
   * Model favorite
   */

  export type AggregateFavorite = {
    _count: FavoriteCountAggregateOutputType | null
    _avg: FavoriteAvgAggregateOutputType | null
    _sum: FavoriteSumAggregateOutputType | null
    _min: FavoriteMinAggregateOutputType | null
    _max: FavoriteMaxAggregateOutputType | null
  }

  export type FavoriteAvgAggregateOutputType = {
    id: number | null
    state: number | null
  }

  export type FavoriteSumAggregateOutputType = {
    id: number | null
    state: number | null
  }

  export type FavoriteMinAggregateOutputType = {
    id: number | null
    favorite_address: string | null
    state: number | null
    privy_address: string | null
    user_did: string | null
    updated_at: Date | null
  }

  export type FavoriteMaxAggregateOutputType = {
    id: number | null
    favorite_address: string | null
    state: number | null
    privy_address: string | null
    user_did: string | null
    updated_at: Date | null
  }

  export type FavoriteCountAggregateOutputType = {
    id: number
    favorite_address: number
    state: number
    privy_address: number
    user_did: number
    updated_at: number
    _all: number
  }


  export type FavoriteAvgAggregateInputType = {
    id?: true
    state?: true
  }

  export type FavoriteSumAggregateInputType = {
    id?: true
    state?: true
  }

  export type FavoriteMinAggregateInputType = {
    id?: true
    favorite_address?: true
    state?: true
    privy_address?: true
    user_did?: true
    updated_at?: true
  }

  export type FavoriteMaxAggregateInputType = {
    id?: true
    favorite_address?: true
    state?: true
    privy_address?: true
    user_did?: true
    updated_at?: true
  }

  export type FavoriteCountAggregateInputType = {
    id?: true
    favorite_address?: true
    state?: true
    privy_address?: true
    user_did?: true
    updated_at?: true
    _all?: true
  }

  export type FavoriteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which favorite to aggregate.
     */
    where?: favoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favorites to fetch.
     */
    orderBy?: favoriteOrderByWithRelationInput | favoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: favoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned favorites
    **/
    _count?: true | FavoriteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavoriteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavoriteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoriteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoriteMaxAggregateInputType
  }

  export type GetFavoriteAggregateType<T extends FavoriteAggregateArgs> = {
        [P in keyof T & keyof AggregateFavorite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavorite[P]>
      : GetScalarType<T[P], AggregateFavorite[P]>
  }




  export type favoriteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: favoriteWhereInput
    orderBy?: favoriteOrderByWithAggregationInput | favoriteOrderByWithAggregationInput[]
    by: FavoriteScalarFieldEnum[] | FavoriteScalarFieldEnum
    having?: favoriteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoriteCountAggregateInputType | true
    _avg?: FavoriteAvgAggregateInputType
    _sum?: FavoriteSumAggregateInputType
    _min?: FavoriteMinAggregateInputType
    _max?: FavoriteMaxAggregateInputType
  }

  export type FavoriteGroupByOutputType = {
    id: number
    favorite_address: string
    state: number
    privy_address: string
    user_did: string
    updated_at: Date
    _count: FavoriteCountAggregateOutputType | null
    _avg: FavoriteAvgAggregateOutputType | null
    _sum: FavoriteSumAggregateOutputType | null
    _min: FavoriteMinAggregateOutputType | null
    _max: FavoriteMaxAggregateOutputType | null
  }

  type GetFavoriteGroupByPayload<T extends favoriteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoriteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoriteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoriteGroupByOutputType[P]>
            : GetScalarType<T[P], FavoriteGroupByOutputType[P]>
        }
      >
    >


  export type favoriteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    favorite_address?: boolean
    state?: boolean
    privy_address?: boolean
    user_did?: boolean
    updated_at?: boolean
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type favoriteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    favorite_address?: boolean
    state?: boolean
    privy_address?: boolean
    user_did?: boolean
    updated_at?: boolean
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type favoriteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    favorite_address?: boolean
    state?: boolean
    privy_address?: boolean
    user_did?: boolean
    updated_at?: boolean
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorite"]>

  export type favoriteSelectScalar = {
    id?: boolean
    favorite_address?: boolean
    state?: boolean
    privy_address?: boolean
    user_did?: boolean
    updated_at?: boolean
  }

  export type favoriteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "favorite_address" | "state" | "privy_address" | "user_did" | "updated_at", ExtArgs["result"]["favorite"]>
  export type favoriteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }
  export type favoriteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }
  export type favoriteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }

  export type $favoritePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "favorite"
    objects: {
      privy_user: Prisma.$privy_userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      favorite_address: string
      state: number
      privy_address: string
      user_did: string
      updated_at: Date
    }, ExtArgs["result"]["favorite"]>
    composites: {}
  }

  type favoriteGetPayload<S extends boolean | null | undefined | favoriteDefaultArgs> = $Result.GetResult<Prisma.$favoritePayload, S>

  type favoriteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<favoriteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FavoriteCountAggregateInputType | true
    }

  export interface favoriteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['favorite'], meta: { name: 'favorite' } }
    /**
     * Find zero or one Favorite that matches the filter.
     * @param {favoriteFindUniqueArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends favoriteFindUniqueArgs>(args: SelectSubset<T, favoriteFindUniqueArgs<ExtArgs>>): Prisma__favoriteClient<$Result.GetResult<Prisma.$favoritePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Favorite that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {favoriteFindUniqueOrThrowArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends favoriteFindUniqueOrThrowArgs>(args: SelectSubset<T, favoriteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__favoriteClient<$Result.GetResult<Prisma.$favoritePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Favorite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoriteFindFirstArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends favoriteFindFirstArgs>(args?: SelectSubset<T, favoriteFindFirstArgs<ExtArgs>>): Prisma__favoriteClient<$Result.GetResult<Prisma.$favoritePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Favorite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoriteFindFirstOrThrowArgs} args - Arguments to find a Favorite
     * @example
     * // Get one Favorite
     * const favorite = await prisma.favorite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends favoriteFindFirstOrThrowArgs>(args?: SelectSubset<T, favoriteFindFirstOrThrowArgs<ExtArgs>>): Prisma__favoriteClient<$Result.GetResult<Prisma.$favoritePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Favorites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoriteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favorites
     * const favorites = await prisma.favorite.findMany()
     * 
     * // Get first 10 Favorites
     * const favorites = await prisma.favorite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoriteWithIdOnly = await prisma.favorite.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends favoriteFindManyArgs>(args?: SelectSubset<T, favoriteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favoritePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Favorite.
     * @param {favoriteCreateArgs} args - Arguments to create a Favorite.
     * @example
     * // Create one Favorite
     * const Favorite = await prisma.favorite.create({
     *   data: {
     *     // ... data to create a Favorite
     *   }
     * })
     * 
     */
    create<T extends favoriteCreateArgs>(args: SelectSubset<T, favoriteCreateArgs<ExtArgs>>): Prisma__favoriteClient<$Result.GetResult<Prisma.$favoritePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Favorites.
     * @param {favoriteCreateManyArgs} args - Arguments to create many Favorites.
     * @example
     * // Create many Favorites
     * const favorite = await prisma.favorite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends favoriteCreateManyArgs>(args?: SelectSubset<T, favoriteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Favorites and returns the data saved in the database.
     * @param {favoriteCreateManyAndReturnArgs} args - Arguments to create many Favorites.
     * @example
     * // Create many Favorites
     * const favorite = await prisma.favorite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Favorites and only return the `id`
     * const favoriteWithIdOnly = await prisma.favorite.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends favoriteCreateManyAndReturnArgs>(args?: SelectSubset<T, favoriteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favoritePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Favorite.
     * @param {favoriteDeleteArgs} args - Arguments to delete one Favorite.
     * @example
     * // Delete one Favorite
     * const Favorite = await prisma.favorite.delete({
     *   where: {
     *     // ... filter to delete one Favorite
     *   }
     * })
     * 
     */
    delete<T extends favoriteDeleteArgs>(args: SelectSubset<T, favoriteDeleteArgs<ExtArgs>>): Prisma__favoriteClient<$Result.GetResult<Prisma.$favoritePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Favorite.
     * @param {favoriteUpdateArgs} args - Arguments to update one Favorite.
     * @example
     * // Update one Favorite
     * const favorite = await prisma.favorite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends favoriteUpdateArgs>(args: SelectSubset<T, favoriteUpdateArgs<ExtArgs>>): Prisma__favoriteClient<$Result.GetResult<Prisma.$favoritePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Favorites.
     * @param {favoriteDeleteManyArgs} args - Arguments to filter Favorites to delete.
     * @example
     * // Delete a few Favorites
     * const { count } = await prisma.favorite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends favoriteDeleteManyArgs>(args?: SelectSubset<T, favoriteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoriteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favorites
     * const favorite = await prisma.favorite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends favoriteUpdateManyArgs>(args: SelectSubset<T, favoriteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favorites and returns the data updated in the database.
     * @param {favoriteUpdateManyAndReturnArgs} args - Arguments to update many Favorites.
     * @example
     * // Update many Favorites
     * const favorite = await prisma.favorite.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Favorites and only return the `id`
     * const favoriteWithIdOnly = await prisma.favorite.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends favoriteUpdateManyAndReturnArgs>(args: SelectSubset<T, favoriteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favoritePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Favorite.
     * @param {favoriteUpsertArgs} args - Arguments to update or create a Favorite.
     * @example
     * // Update or create a Favorite
     * const favorite = await prisma.favorite.upsert({
     *   create: {
     *     // ... data to create a Favorite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favorite we want to update
     *   }
     * })
     */
    upsert<T extends favoriteUpsertArgs>(args: SelectSubset<T, favoriteUpsertArgs<ExtArgs>>): Prisma__favoriteClient<$Result.GetResult<Prisma.$favoritePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoriteCountArgs} args - Arguments to filter Favorites to count.
     * @example
     * // Count the number of Favorites
     * const count = await prisma.favorite.count({
     *   where: {
     *     // ... the filter for the Favorites we want to count
     *   }
     * })
    **/
    count<T extends favoriteCountArgs>(
      args?: Subset<T, favoriteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoriteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoriteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoriteAggregateArgs>(args: Subset<T, FavoriteAggregateArgs>): Prisma.PrismaPromise<GetFavoriteAggregateType<T>>

    /**
     * Group by Favorite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {favoriteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends favoriteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: favoriteGroupByArgs['orderBy'] }
        : { orderBy?: favoriteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, favoriteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoriteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the favorite model
   */
  readonly fields: favoriteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for favorite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__favoriteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    privy_user<T extends privy_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, privy_userDefaultArgs<ExtArgs>>): Prisma__privy_userClient<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the favorite model
   */ 
  interface favoriteFieldRefs {
    readonly id: FieldRef<"favorite", 'Int'>
    readonly favorite_address: FieldRef<"favorite", 'String'>
    readonly state: FieldRef<"favorite", 'Int'>
    readonly privy_address: FieldRef<"favorite", 'String'>
    readonly user_did: FieldRef<"favorite", 'String'>
    readonly updated_at: FieldRef<"favorite", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * favorite findUnique
   */
  export type favoriteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favorite
     */
    select?: favoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favorite
     */
    omit?: favoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favoriteInclude<ExtArgs> | null
    /**
     * Filter, which favorite to fetch.
     */
    where: favoriteWhereUniqueInput
  }

  /**
   * favorite findUniqueOrThrow
   */
  export type favoriteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favorite
     */
    select?: favoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favorite
     */
    omit?: favoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favoriteInclude<ExtArgs> | null
    /**
     * Filter, which favorite to fetch.
     */
    where: favoriteWhereUniqueInput
  }

  /**
   * favorite findFirst
   */
  export type favoriteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favorite
     */
    select?: favoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favorite
     */
    omit?: favoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favoriteInclude<ExtArgs> | null
    /**
     * Filter, which favorite to fetch.
     */
    where?: favoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favorites to fetch.
     */
    orderBy?: favoriteOrderByWithRelationInput | favoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for favorites.
     */
    cursor?: favoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of favorites.
     */
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * favorite findFirstOrThrow
   */
  export type favoriteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favorite
     */
    select?: favoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favorite
     */
    omit?: favoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favoriteInclude<ExtArgs> | null
    /**
     * Filter, which favorite to fetch.
     */
    where?: favoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favorites to fetch.
     */
    orderBy?: favoriteOrderByWithRelationInput | favoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for favorites.
     */
    cursor?: favoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of favorites.
     */
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * favorite findMany
   */
  export type favoriteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favorite
     */
    select?: favoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favorite
     */
    omit?: favoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favoriteInclude<ExtArgs> | null
    /**
     * Filter, which favorites to fetch.
     */
    where?: favoriteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of favorites to fetch.
     */
    orderBy?: favoriteOrderByWithRelationInput | favoriteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing favorites.
     */
    cursor?: favoriteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` favorites.
     */
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * favorite create
   */
  export type favoriteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favorite
     */
    select?: favoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favorite
     */
    omit?: favoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favoriteInclude<ExtArgs> | null
    /**
     * The data needed to create a favorite.
     */
    data: XOR<favoriteCreateInput, favoriteUncheckedCreateInput>
  }

  /**
   * favorite createMany
   */
  export type favoriteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many favorites.
     */
    data: favoriteCreateManyInput | favoriteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * favorite createManyAndReturn
   */
  export type favoriteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favorite
     */
    select?: favoriteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the favorite
     */
    omit?: favoriteOmit<ExtArgs> | null
    /**
     * The data used to create many favorites.
     */
    data: favoriteCreateManyInput | favoriteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favoriteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * favorite update
   */
  export type favoriteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favorite
     */
    select?: favoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favorite
     */
    omit?: favoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favoriteInclude<ExtArgs> | null
    /**
     * The data needed to update a favorite.
     */
    data: XOR<favoriteUpdateInput, favoriteUncheckedUpdateInput>
    /**
     * Choose, which favorite to update.
     */
    where: favoriteWhereUniqueInput
  }

  /**
   * favorite updateMany
   */
  export type favoriteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update favorites.
     */
    data: XOR<favoriteUpdateManyMutationInput, favoriteUncheckedUpdateManyInput>
    /**
     * Filter which favorites to update
     */
    where?: favoriteWhereInput
  }

  /**
   * favorite updateManyAndReturn
   */
  export type favoriteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favorite
     */
    select?: favoriteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the favorite
     */
    omit?: favoriteOmit<ExtArgs> | null
    /**
     * The data used to update favorites.
     */
    data: XOR<favoriteUpdateManyMutationInput, favoriteUncheckedUpdateManyInput>
    /**
     * Filter which favorites to update
     */
    where?: favoriteWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favoriteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * favorite upsert
   */
  export type favoriteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favorite
     */
    select?: favoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favorite
     */
    omit?: favoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favoriteInclude<ExtArgs> | null
    /**
     * The filter to search for the favorite to update in case it exists.
     */
    where: favoriteWhereUniqueInput
    /**
     * In case the favorite found by the `where` argument doesn't exist, create a new favorite with this data.
     */
    create: XOR<favoriteCreateInput, favoriteUncheckedCreateInput>
    /**
     * In case the favorite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<favoriteUpdateInput, favoriteUncheckedUpdateInput>
  }

  /**
   * favorite delete
   */
  export type favoriteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favorite
     */
    select?: favoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favorite
     */
    omit?: favoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favoriteInclude<ExtArgs> | null
    /**
     * Filter which favorite to delete.
     */
    where: favoriteWhereUniqueInput
  }

  /**
   * favorite deleteMany
   */
  export type favoriteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which favorites to delete
     */
    where?: favoriteWhereInput
  }

  /**
   * favorite without action
   */
  export type favoriteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favorite
     */
    select?: favoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favorite
     */
    omit?: favoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favoriteInclude<ExtArgs> | null
  }


  /**
   * Model gangs
   */

  export type AggregateGangs = {
    _count: GangsCountAggregateOutputType | null
    _avg: GangsAvgAggregateOutputType | null
    _sum: GangsSumAggregateOutputType | null
    _min: GangsMinAggregateOutputType | null
    _max: GangsMaxAggregateOutputType | null
  }

  export type GangsAvgAggregateOutputType = {
    id: number | null
    type: number | null
    published_time: number | null
  }

  export type GangsSumAggregateOutputType = {
    id: number | null
    type: number | null
    published_time: number | null
  }

  export type GangsMinAggregateOutputType = {
    id: number | null
    user_address: string | null
    name: string | null
    created_at: Date | null
    type: number | null
    user_did: string | null
    is_published: boolean | null
    published_time: number | null
    description: string | null
    updated_at: Date | null
  }

  export type GangsMaxAggregateOutputType = {
    id: number | null
    user_address: string | null
    name: string | null
    created_at: Date | null
    type: number | null
    user_did: string | null
    is_published: boolean | null
    published_time: number | null
    description: string | null
    updated_at: Date | null
  }

  export type GangsCountAggregateOutputType = {
    id: number
    user_address: number
    name: number
    created_at: number
    admins: number
    members: number
    type: number
    user_did: number
    is_published: number
    published_time: number
    description: number
    updated_at: number
    _all: number
  }


  export type GangsAvgAggregateInputType = {
    id?: true
    type?: true
    published_time?: true
  }

  export type GangsSumAggregateInputType = {
    id?: true
    type?: true
    published_time?: true
  }

  export type GangsMinAggregateInputType = {
    id?: true
    user_address?: true
    name?: true
    created_at?: true
    type?: true
    user_did?: true
    is_published?: true
    published_time?: true
    description?: true
    updated_at?: true
  }

  export type GangsMaxAggregateInputType = {
    id?: true
    user_address?: true
    name?: true
    created_at?: true
    type?: true
    user_did?: true
    is_published?: true
    published_time?: true
    description?: true
    updated_at?: true
  }

  export type GangsCountAggregateInputType = {
    id?: true
    user_address?: true
    name?: true
    created_at?: true
    admins?: true
    members?: true
    type?: true
    user_did?: true
    is_published?: true
    published_time?: true
    description?: true
    updated_at?: true
    _all?: true
  }

  export type GangsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which gangs to aggregate.
     */
    where?: gangsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gangs to fetch.
     */
    orderBy?: gangsOrderByWithRelationInput | gangsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: gangsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gangs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned gangs
    **/
    _count?: true | GangsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GangsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GangsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GangsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GangsMaxAggregateInputType
  }

  export type GetGangsAggregateType<T extends GangsAggregateArgs> = {
        [P in keyof T & keyof AggregateGangs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGangs[P]>
      : GetScalarType<T[P], AggregateGangs[P]>
  }




  export type gangsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: gangsWhereInput
    orderBy?: gangsOrderByWithAggregationInput | gangsOrderByWithAggregationInput[]
    by: GangsScalarFieldEnum[] | GangsScalarFieldEnum
    having?: gangsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GangsCountAggregateInputType | true
    _avg?: GangsAvgAggregateInputType
    _sum?: GangsSumAggregateInputType
    _min?: GangsMinAggregateInputType
    _max?: GangsMaxAggregateInputType
  }

  export type GangsGroupByOutputType = {
    id: number
    user_address: string
    name: string
    created_at: Date
    admins: JsonValue
    members: JsonValue
    type: number
    user_did: string
    is_published: boolean
    published_time: number
    description: string
    updated_at: Date
    _count: GangsCountAggregateOutputType | null
    _avg: GangsAvgAggregateOutputType | null
    _sum: GangsSumAggregateOutputType | null
    _min: GangsMinAggregateOutputType | null
    _max: GangsMaxAggregateOutputType | null
  }

  type GetGangsGroupByPayload<T extends gangsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GangsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GangsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GangsGroupByOutputType[P]>
            : GetScalarType<T[P], GangsGroupByOutputType[P]>
        }
      >
    >


  export type gangsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_address?: boolean
    name?: boolean
    created_at?: boolean
    admins?: boolean
    members?: boolean
    type?: boolean
    user_did?: boolean
    is_published?: boolean
    published_time?: boolean
    description?: boolean
    updated_at?: boolean
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
    wallets_users?: boolean | gangs$wallets_usersArgs<ExtArgs>
    _count?: boolean | GangsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gangs"]>

  export type gangsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_address?: boolean
    name?: boolean
    created_at?: boolean
    admins?: boolean
    members?: boolean
    type?: boolean
    user_did?: boolean
    is_published?: boolean
    published_time?: boolean
    description?: boolean
    updated_at?: boolean
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gangs"]>

  export type gangsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_address?: boolean
    name?: boolean
    created_at?: boolean
    admins?: boolean
    members?: boolean
    type?: boolean
    user_did?: boolean
    is_published?: boolean
    published_time?: boolean
    description?: boolean
    updated_at?: boolean
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["gangs"]>

  export type gangsSelectScalar = {
    id?: boolean
    user_address?: boolean
    name?: boolean
    created_at?: boolean
    admins?: boolean
    members?: boolean
    type?: boolean
    user_did?: boolean
    is_published?: boolean
    published_time?: boolean
    description?: boolean
    updated_at?: boolean
  }

  export type gangsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_address" | "name" | "created_at" | "admins" | "members" | "type" | "user_did" | "is_published" | "published_time" | "description" | "updated_at", ExtArgs["result"]["gangs"]>
  export type gangsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
    wallets_users?: boolean | gangs$wallets_usersArgs<ExtArgs>
    _count?: boolean | GangsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type gangsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }
  export type gangsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }

  export type $gangsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "gangs"
    objects: {
      privy_user: Prisma.$privy_userPayload<ExtArgs>
      wallets_users: Prisma.$wallets_usersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_address: string
      name: string
      created_at: Date
      admins: Prisma.JsonValue
      members: Prisma.JsonValue
      type: number
      user_did: string
      is_published: boolean
      published_time: number
      description: string
      updated_at: Date
    }, ExtArgs["result"]["gangs"]>
    composites: {}
  }

  type gangsGetPayload<S extends boolean | null | undefined | gangsDefaultArgs> = $Result.GetResult<Prisma.$gangsPayload, S>

  type gangsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<gangsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GangsCountAggregateInputType | true
    }

  export interface gangsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['gangs'], meta: { name: 'gangs' } }
    /**
     * Find zero or one Gangs that matches the filter.
     * @param {gangsFindUniqueArgs} args - Arguments to find a Gangs
     * @example
     * // Get one Gangs
     * const gangs = await prisma.gangs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends gangsFindUniqueArgs>(args: SelectSubset<T, gangsFindUniqueArgs<ExtArgs>>): Prisma__gangsClient<$Result.GetResult<Prisma.$gangsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Gangs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {gangsFindUniqueOrThrowArgs} args - Arguments to find a Gangs
     * @example
     * // Get one Gangs
     * const gangs = await prisma.gangs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends gangsFindUniqueOrThrowArgs>(args: SelectSubset<T, gangsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__gangsClient<$Result.GetResult<Prisma.$gangsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Gangs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gangsFindFirstArgs} args - Arguments to find a Gangs
     * @example
     * // Get one Gangs
     * const gangs = await prisma.gangs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends gangsFindFirstArgs>(args?: SelectSubset<T, gangsFindFirstArgs<ExtArgs>>): Prisma__gangsClient<$Result.GetResult<Prisma.$gangsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Gangs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gangsFindFirstOrThrowArgs} args - Arguments to find a Gangs
     * @example
     * // Get one Gangs
     * const gangs = await prisma.gangs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends gangsFindFirstOrThrowArgs>(args?: SelectSubset<T, gangsFindFirstOrThrowArgs<ExtArgs>>): Prisma__gangsClient<$Result.GetResult<Prisma.$gangsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Gangs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gangsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Gangs
     * const gangs = await prisma.gangs.findMany()
     * 
     * // Get first 10 Gangs
     * const gangs = await prisma.gangs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gangsWithIdOnly = await prisma.gangs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends gangsFindManyArgs>(args?: SelectSubset<T, gangsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gangsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Gangs.
     * @param {gangsCreateArgs} args - Arguments to create a Gangs.
     * @example
     * // Create one Gangs
     * const Gangs = await prisma.gangs.create({
     *   data: {
     *     // ... data to create a Gangs
     *   }
     * })
     * 
     */
    create<T extends gangsCreateArgs>(args: SelectSubset<T, gangsCreateArgs<ExtArgs>>): Prisma__gangsClient<$Result.GetResult<Prisma.$gangsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Gangs.
     * @param {gangsCreateManyArgs} args - Arguments to create many Gangs.
     * @example
     * // Create many Gangs
     * const gangs = await prisma.gangs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends gangsCreateManyArgs>(args?: SelectSubset<T, gangsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Gangs and returns the data saved in the database.
     * @param {gangsCreateManyAndReturnArgs} args - Arguments to create many Gangs.
     * @example
     * // Create many Gangs
     * const gangs = await prisma.gangs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Gangs and only return the `id`
     * const gangsWithIdOnly = await prisma.gangs.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends gangsCreateManyAndReturnArgs>(args?: SelectSubset<T, gangsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gangsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Gangs.
     * @param {gangsDeleteArgs} args - Arguments to delete one Gangs.
     * @example
     * // Delete one Gangs
     * const Gangs = await prisma.gangs.delete({
     *   where: {
     *     // ... filter to delete one Gangs
     *   }
     * })
     * 
     */
    delete<T extends gangsDeleteArgs>(args: SelectSubset<T, gangsDeleteArgs<ExtArgs>>): Prisma__gangsClient<$Result.GetResult<Prisma.$gangsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Gangs.
     * @param {gangsUpdateArgs} args - Arguments to update one Gangs.
     * @example
     * // Update one Gangs
     * const gangs = await prisma.gangs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends gangsUpdateArgs>(args: SelectSubset<T, gangsUpdateArgs<ExtArgs>>): Prisma__gangsClient<$Result.GetResult<Prisma.$gangsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Gangs.
     * @param {gangsDeleteManyArgs} args - Arguments to filter Gangs to delete.
     * @example
     * // Delete a few Gangs
     * const { count } = await prisma.gangs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends gangsDeleteManyArgs>(args?: SelectSubset<T, gangsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gangs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gangsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Gangs
     * const gangs = await prisma.gangs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends gangsUpdateManyArgs>(args: SelectSubset<T, gangsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Gangs and returns the data updated in the database.
     * @param {gangsUpdateManyAndReturnArgs} args - Arguments to update many Gangs.
     * @example
     * // Update many Gangs
     * const gangs = await prisma.gangs.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Gangs and only return the `id`
     * const gangsWithIdOnly = await prisma.gangs.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends gangsUpdateManyAndReturnArgs>(args: SelectSubset<T, gangsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gangsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Gangs.
     * @param {gangsUpsertArgs} args - Arguments to update or create a Gangs.
     * @example
     * // Update or create a Gangs
     * const gangs = await prisma.gangs.upsert({
     *   create: {
     *     // ... data to create a Gangs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Gangs we want to update
     *   }
     * })
     */
    upsert<T extends gangsUpsertArgs>(args: SelectSubset<T, gangsUpsertArgs<ExtArgs>>): Prisma__gangsClient<$Result.GetResult<Prisma.$gangsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Gangs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gangsCountArgs} args - Arguments to filter Gangs to count.
     * @example
     * // Count the number of Gangs
     * const count = await prisma.gangs.count({
     *   where: {
     *     // ... the filter for the Gangs we want to count
     *   }
     * })
    **/
    count<T extends gangsCountArgs>(
      args?: Subset<T, gangsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GangsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Gangs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GangsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GangsAggregateArgs>(args: Subset<T, GangsAggregateArgs>): Prisma.PrismaPromise<GetGangsAggregateType<T>>

    /**
     * Group by Gangs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gangsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends gangsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: gangsGroupByArgs['orderBy'] }
        : { orderBy?: gangsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, gangsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGangsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the gangs model
   */
  readonly fields: gangsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for gangs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__gangsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    privy_user<T extends privy_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, privy_userDefaultArgs<ExtArgs>>): Prisma__privy_userClient<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    wallets_users<T extends gangs$wallets_usersArgs<ExtArgs> = {}>(args?: Subset<T, gangs$wallets_usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wallets_usersPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the gangs model
   */ 
  interface gangsFieldRefs {
    readonly id: FieldRef<"gangs", 'Int'>
    readonly user_address: FieldRef<"gangs", 'String'>
    readonly name: FieldRef<"gangs", 'String'>
    readonly created_at: FieldRef<"gangs", 'DateTime'>
    readonly admins: FieldRef<"gangs", 'Json'>
    readonly members: FieldRef<"gangs", 'Json'>
    readonly type: FieldRef<"gangs", 'Int'>
    readonly user_did: FieldRef<"gangs", 'String'>
    readonly is_published: FieldRef<"gangs", 'Boolean'>
    readonly published_time: FieldRef<"gangs", 'Int'>
    readonly description: FieldRef<"gangs", 'String'>
    readonly updated_at: FieldRef<"gangs", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * gangs findUnique
   */
  export type gangsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gangs
     */
    select?: gangsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gangs
     */
    omit?: gangsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gangsInclude<ExtArgs> | null
    /**
     * Filter, which gangs to fetch.
     */
    where: gangsWhereUniqueInput
  }

  /**
   * gangs findUniqueOrThrow
   */
  export type gangsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gangs
     */
    select?: gangsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gangs
     */
    omit?: gangsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gangsInclude<ExtArgs> | null
    /**
     * Filter, which gangs to fetch.
     */
    where: gangsWhereUniqueInput
  }

  /**
   * gangs findFirst
   */
  export type gangsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gangs
     */
    select?: gangsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gangs
     */
    omit?: gangsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gangsInclude<ExtArgs> | null
    /**
     * Filter, which gangs to fetch.
     */
    where?: gangsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gangs to fetch.
     */
    orderBy?: gangsOrderByWithRelationInput | gangsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for gangs.
     */
    cursor?: gangsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gangs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of gangs.
     */
    distinct?: GangsScalarFieldEnum | GangsScalarFieldEnum[]
  }

  /**
   * gangs findFirstOrThrow
   */
  export type gangsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gangs
     */
    select?: gangsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gangs
     */
    omit?: gangsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gangsInclude<ExtArgs> | null
    /**
     * Filter, which gangs to fetch.
     */
    where?: gangsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gangs to fetch.
     */
    orderBy?: gangsOrderByWithRelationInput | gangsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for gangs.
     */
    cursor?: gangsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gangs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of gangs.
     */
    distinct?: GangsScalarFieldEnum | GangsScalarFieldEnum[]
  }

  /**
   * gangs findMany
   */
  export type gangsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gangs
     */
    select?: gangsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gangs
     */
    omit?: gangsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gangsInclude<ExtArgs> | null
    /**
     * Filter, which gangs to fetch.
     */
    where?: gangsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gangs to fetch.
     */
    orderBy?: gangsOrderByWithRelationInput | gangsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing gangs.
     */
    cursor?: gangsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gangs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gangs.
     */
    skip?: number
    distinct?: GangsScalarFieldEnum | GangsScalarFieldEnum[]
  }

  /**
   * gangs create
   */
  export type gangsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gangs
     */
    select?: gangsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gangs
     */
    omit?: gangsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gangsInclude<ExtArgs> | null
    /**
     * The data needed to create a gangs.
     */
    data: XOR<gangsCreateInput, gangsUncheckedCreateInput>
  }

  /**
   * gangs createMany
   */
  export type gangsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many gangs.
     */
    data: gangsCreateManyInput | gangsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * gangs createManyAndReturn
   */
  export type gangsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gangs
     */
    select?: gangsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the gangs
     */
    omit?: gangsOmit<ExtArgs> | null
    /**
     * The data used to create many gangs.
     */
    data: gangsCreateManyInput | gangsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gangsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * gangs update
   */
  export type gangsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gangs
     */
    select?: gangsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gangs
     */
    omit?: gangsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gangsInclude<ExtArgs> | null
    /**
     * The data needed to update a gangs.
     */
    data: XOR<gangsUpdateInput, gangsUncheckedUpdateInput>
    /**
     * Choose, which gangs to update.
     */
    where: gangsWhereUniqueInput
  }

  /**
   * gangs updateMany
   */
  export type gangsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update gangs.
     */
    data: XOR<gangsUpdateManyMutationInput, gangsUncheckedUpdateManyInput>
    /**
     * Filter which gangs to update
     */
    where?: gangsWhereInput
  }

  /**
   * gangs updateManyAndReturn
   */
  export type gangsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gangs
     */
    select?: gangsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the gangs
     */
    omit?: gangsOmit<ExtArgs> | null
    /**
     * The data used to update gangs.
     */
    data: XOR<gangsUpdateManyMutationInput, gangsUncheckedUpdateManyInput>
    /**
     * Filter which gangs to update
     */
    where?: gangsWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gangsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * gangs upsert
   */
  export type gangsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gangs
     */
    select?: gangsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gangs
     */
    omit?: gangsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gangsInclude<ExtArgs> | null
    /**
     * The filter to search for the gangs to update in case it exists.
     */
    where: gangsWhereUniqueInput
    /**
     * In case the gangs found by the `where` argument doesn't exist, create a new gangs with this data.
     */
    create: XOR<gangsCreateInput, gangsUncheckedCreateInput>
    /**
     * In case the gangs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<gangsUpdateInput, gangsUncheckedUpdateInput>
  }

  /**
   * gangs delete
   */
  export type gangsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gangs
     */
    select?: gangsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gangs
     */
    omit?: gangsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gangsInclude<ExtArgs> | null
    /**
     * Filter which gangs to delete.
     */
    where: gangsWhereUniqueInput
  }

  /**
   * gangs deleteMany
   */
  export type gangsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which gangs to delete
     */
    where?: gangsWhereInput
  }

  /**
   * gangs.wallets_users
   */
  export type gangs$wallets_usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersInclude<ExtArgs> | null
    where?: wallets_usersWhereInput
    orderBy?: wallets_usersOrderByWithRelationInput | wallets_usersOrderByWithRelationInput[]
    cursor?: wallets_usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Wallets_usersScalarFieldEnum | Wallets_usersScalarFieldEnum[]
  }

  /**
   * gangs without action
   */
  export type gangsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gangs
     */
    select?: gangsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gangs
     */
    omit?: gangsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gangsInclude<ExtArgs> | null
  }


  /**
   * Model latest_sync_trans
   */

  export type AggregateLatest_sync_trans = {
    _count: Latest_sync_transCountAggregateOutputType | null
    _avg: Latest_sync_transAvgAggregateOutputType | null
    _sum: Latest_sync_transSumAggregateOutputType | null
    _min: Latest_sync_transMinAggregateOutputType | null
    _max: Latest_sync_transMaxAggregateOutputType | null
  }

  export type Latest_sync_transAvgAggregateOutputType = {
    id: number | null
  }

  export type Latest_sync_transSumAggregateOutputType = {
    id: bigint | null
  }

  export type Latest_sync_transMinAggregateOutputType = {
    id: bigint | null
    signature: string | null
    address: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Latest_sync_transMaxAggregateOutputType = {
    id: bigint | null
    signature: string | null
    address: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Latest_sync_transCountAggregateOutputType = {
    id: number
    signature: number
    address: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Latest_sync_transAvgAggregateInputType = {
    id?: true
  }

  export type Latest_sync_transSumAggregateInputType = {
    id?: true
  }

  export type Latest_sync_transMinAggregateInputType = {
    id?: true
    signature?: true
    address?: true
    created_at?: true
    updated_at?: true
  }

  export type Latest_sync_transMaxAggregateInputType = {
    id?: true
    signature?: true
    address?: true
    created_at?: true
    updated_at?: true
  }

  export type Latest_sync_transCountAggregateInputType = {
    id?: true
    signature?: true
    address?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Latest_sync_transAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which latest_sync_trans to aggregate.
     */
    where?: latest_sync_transWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of latest_sync_trans to fetch.
     */
    orderBy?: latest_sync_transOrderByWithRelationInput | latest_sync_transOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: latest_sync_transWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` latest_sync_trans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` latest_sync_trans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned latest_sync_trans
    **/
    _count?: true | Latest_sync_transCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Latest_sync_transAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Latest_sync_transSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Latest_sync_transMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Latest_sync_transMaxAggregateInputType
  }

  export type GetLatest_sync_transAggregateType<T extends Latest_sync_transAggregateArgs> = {
        [P in keyof T & keyof AggregateLatest_sync_trans]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLatest_sync_trans[P]>
      : GetScalarType<T[P], AggregateLatest_sync_trans[P]>
  }




  export type latest_sync_transGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: latest_sync_transWhereInput
    orderBy?: latest_sync_transOrderByWithAggregationInput | latest_sync_transOrderByWithAggregationInput[]
    by: Latest_sync_transScalarFieldEnum[] | Latest_sync_transScalarFieldEnum
    having?: latest_sync_transScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Latest_sync_transCountAggregateInputType | true
    _avg?: Latest_sync_transAvgAggregateInputType
    _sum?: Latest_sync_transSumAggregateInputType
    _min?: Latest_sync_transMinAggregateInputType
    _max?: Latest_sync_transMaxAggregateInputType
  }

  export type Latest_sync_transGroupByOutputType = {
    id: bigint
    signature: string
    address: string
    created_at: Date
    updated_at: Date
    _count: Latest_sync_transCountAggregateOutputType | null
    _avg: Latest_sync_transAvgAggregateOutputType | null
    _sum: Latest_sync_transSumAggregateOutputType | null
    _min: Latest_sync_transMinAggregateOutputType | null
    _max: Latest_sync_transMaxAggregateOutputType | null
  }

  type GetLatest_sync_transGroupByPayload<T extends latest_sync_transGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Latest_sync_transGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Latest_sync_transGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Latest_sync_transGroupByOutputType[P]>
            : GetScalarType<T[P], Latest_sync_transGroupByOutputType[P]>
        }
      >
    >


  export type latest_sync_transSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signature?: boolean
    address?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["latest_sync_trans"]>

  export type latest_sync_transSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signature?: boolean
    address?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["latest_sync_trans"]>

  export type latest_sync_transSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signature?: boolean
    address?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["latest_sync_trans"]>

  export type latest_sync_transSelectScalar = {
    id?: boolean
    signature?: boolean
    address?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type latest_sync_transOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "signature" | "address" | "created_at" | "updated_at", ExtArgs["result"]["latest_sync_trans"]>

  export type $latest_sync_transPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "latest_sync_trans"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      signature: string
      address: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["latest_sync_trans"]>
    composites: {}
  }

  type latest_sync_transGetPayload<S extends boolean | null | undefined | latest_sync_transDefaultArgs> = $Result.GetResult<Prisma.$latest_sync_transPayload, S>

  type latest_sync_transCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<latest_sync_transFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Latest_sync_transCountAggregateInputType | true
    }

  export interface latest_sync_transDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['latest_sync_trans'], meta: { name: 'latest_sync_trans' } }
    /**
     * Find zero or one Latest_sync_trans that matches the filter.
     * @param {latest_sync_transFindUniqueArgs} args - Arguments to find a Latest_sync_trans
     * @example
     * // Get one Latest_sync_trans
     * const latest_sync_trans = await prisma.latest_sync_trans.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends latest_sync_transFindUniqueArgs>(args: SelectSubset<T, latest_sync_transFindUniqueArgs<ExtArgs>>): Prisma__latest_sync_transClient<$Result.GetResult<Prisma.$latest_sync_transPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Latest_sync_trans that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {latest_sync_transFindUniqueOrThrowArgs} args - Arguments to find a Latest_sync_trans
     * @example
     * // Get one Latest_sync_trans
     * const latest_sync_trans = await prisma.latest_sync_trans.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends latest_sync_transFindUniqueOrThrowArgs>(args: SelectSubset<T, latest_sync_transFindUniqueOrThrowArgs<ExtArgs>>): Prisma__latest_sync_transClient<$Result.GetResult<Prisma.$latest_sync_transPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Latest_sync_trans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {latest_sync_transFindFirstArgs} args - Arguments to find a Latest_sync_trans
     * @example
     * // Get one Latest_sync_trans
     * const latest_sync_trans = await prisma.latest_sync_trans.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends latest_sync_transFindFirstArgs>(args?: SelectSubset<T, latest_sync_transFindFirstArgs<ExtArgs>>): Prisma__latest_sync_transClient<$Result.GetResult<Prisma.$latest_sync_transPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Latest_sync_trans that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {latest_sync_transFindFirstOrThrowArgs} args - Arguments to find a Latest_sync_trans
     * @example
     * // Get one Latest_sync_trans
     * const latest_sync_trans = await prisma.latest_sync_trans.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends latest_sync_transFindFirstOrThrowArgs>(args?: SelectSubset<T, latest_sync_transFindFirstOrThrowArgs<ExtArgs>>): Prisma__latest_sync_transClient<$Result.GetResult<Prisma.$latest_sync_transPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Latest_sync_trans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {latest_sync_transFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Latest_sync_trans
     * const latest_sync_trans = await prisma.latest_sync_trans.findMany()
     * 
     * // Get first 10 Latest_sync_trans
     * const latest_sync_trans = await prisma.latest_sync_trans.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const latest_sync_transWithIdOnly = await prisma.latest_sync_trans.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends latest_sync_transFindManyArgs>(args?: SelectSubset<T, latest_sync_transFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$latest_sync_transPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Latest_sync_trans.
     * @param {latest_sync_transCreateArgs} args - Arguments to create a Latest_sync_trans.
     * @example
     * // Create one Latest_sync_trans
     * const Latest_sync_trans = await prisma.latest_sync_trans.create({
     *   data: {
     *     // ... data to create a Latest_sync_trans
     *   }
     * })
     * 
     */
    create<T extends latest_sync_transCreateArgs>(args: SelectSubset<T, latest_sync_transCreateArgs<ExtArgs>>): Prisma__latest_sync_transClient<$Result.GetResult<Prisma.$latest_sync_transPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Latest_sync_trans.
     * @param {latest_sync_transCreateManyArgs} args - Arguments to create many Latest_sync_trans.
     * @example
     * // Create many Latest_sync_trans
     * const latest_sync_trans = await prisma.latest_sync_trans.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends latest_sync_transCreateManyArgs>(args?: SelectSubset<T, latest_sync_transCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Latest_sync_trans and returns the data saved in the database.
     * @param {latest_sync_transCreateManyAndReturnArgs} args - Arguments to create many Latest_sync_trans.
     * @example
     * // Create many Latest_sync_trans
     * const latest_sync_trans = await prisma.latest_sync_trans.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Latest_sync_trans and only return the `id`
     * const latest_sync_transWithIdOnly = await prisma.latest_sync_trans.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends latest_sync_transCreateManyAndReturnArgs>(args?: SelectSubset<T, latest_sync_transCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$latest_sync_transPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Latest_sync_trans.
     * @param {latest_sync_transDeleteArgs} args - Arguments to delete one Latest_sync_trans.
     * @example
     * // Delete one Latest_sync_trans
     * const Latest_sync_trans = await prisma.latest_sync_trans.delete({
     *   where: {
     *     // ... filter to delete one Latest_sync_trans
     *   }
     * })
     * 
     */
    delete<T extends latest_sync_transDeleteArgs>(args: SelectSubset<T, latest_sync_transDeleteArgs<ExtArgs>>): Prisma__latest_sync_transClient<$Result.GetResult<Prisma.$latest_sync_transPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Latest_sync_trans.
     * @param {latest_sync_transUpdateArgs} args - Arguments to update one Latest_sync_trans.
     * @example
     * // Update one Latest_sync_trans
     * const latest_sync_trans = await prisma.latest_sync_trans.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends latest_sync_transUpdateArgs>(args: SelectSubset<T, latest_sync_transUpdateArgs<ExtArgs>>): Prisma__latest_sync_transClient<$Result.GetResult<Prisma.$latest_sync_transPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Latest_sync_trans.
     * @param {latest_sync_transDeleteManyArgs} args - Arguments to filter Latest_sync_trans to delete.
     * @example
     * // Delete a few Latest_sync_trans
     * const { count } = await prisma.latest_sync_trans.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends latest_sync_transDeleteManyArgs>(args?: SelectSubset<T, latest_sync_transDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Latest_sync_trans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {latest_sync_transUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Latest_sync_trans
     * const latest_sync_trans = await prisma.latest_sync_trans.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends latest_sync_transUpdateManyArgs>(args: SelectSubset<T, latest_sync_transUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Latest_sync_trans and returns the data updated in the database.
     * @param {latest_sync_transUpdateManyAndReturnArgs} args - Arguments to update many Latest_sync_trans.
     * @example
     * // Update many Latest_sync_trans
     * const latest_sync_trans = await prisma.latest_sync_trans.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Latest_sync_trans and only return the `id`
     * const latest_sync_transWithIdOnly = await prisma.latest_sync_trans.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends latest_sync_transUpdateManyAndReturnArgs>(args: SelectSubset<T, latest_sync_transUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$latest_sync_transPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Latest_sync_trans.
     * @param {latest_sync_transUpsertArgs} args - Arguments to update or create a Latest_sync_trans.
     * @example
     * // Update or create a Latest_sync_trans
     * const latest_sync_trans = await prisma.latest_sync_trans.upsert({
     *   create: {
     *     // ... data to create a Latest_sync_trans
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Latest_sync_trans we want to update
     *   }
     * })
     */
    upsert<T extends latest_sync_transUpsertArgs>(args: SelectSubset<T, latest_sync_transUpsertArgs<ExtArgs>>): Prisma__latest_sync_transClient<$Result.GetResult<Prisma.$latest_sync_transPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Latest_sync_trans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {latest_sync_transCountArgs} args - Arguments to filter Latest_sync_trans to count.
     * @example
     * // Count the number of Latest_sync_trans
     * const count = await prisma.latest_sync_trans.count({
     *   where: {
     *     // ... the filter for the Latest_sync_trans we want to count
     *   }
     * })
    **/
    count<T extends latest_sync_transCountArgs>(
      args?: Subset<T, latest_sync_transCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Latest_sync_transCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Latest_sync_trans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Latest_sync_transAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Latest_sync_transAggregateArgs>(args: Subset<T, Latest_sync_transAggregateArgs>): Prisma.PrismaPromise<GetLatest_sync_transAggregateType<T>>

    /**
     * Group by Latest_sync_trans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {latest_sync_transGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends latest_sync_transGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: latest_sync_transGroupByArgs['orderBy'] }
        : { orderBy?: latest_sync_transGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, latest_sync_transGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLatest_sync_transGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the latest_sync_trans model
   */
  readonly fields: latest_sync_transFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for latest_sync_trans.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__latest_sync_transClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the latest_sync_trans model
   */ 
  interface latest_sync_transFieldRefs {
    readonly id: FieldRef<"latest_sync_trans", 'BigInt'>
    readonly signature: FieldRef<"latest_sync_trans", 'String'>
    readonly address: FieldRef<"latest_sync_trans", 'String'>
    readonly created_at: FieldRef<"latest_sync_trans", 'DateTime'>
    readonly updated_at: FieldRef<"latest_sync_trans", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * latest_sync_trans findUnique
   */
  export type latest_sync_transFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the latest_sync_trans
     */
    select?: latest_sync_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the latest_sync_trans
     */
    omit?: latest_sync_transOmit<ExtArgs> | null
    /**
     * Filter, which latest_sync_trans to fetch.
     */
    where: latest_sync_transWhereUniqueInput
  }

  /**
   * latest_sync_trans findUniqueOrThrow
   */
  export type latest_sync_transFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the latest_sync_trans
     */
    select?: latest_sync_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the latest_sync_trans
     */
    omit?: latest_sync_transOmit<ExtArgs> | null
    /**
     * Filter, which latest_sync_trans to fetch.
     */
    where: latest_sync_transWhereUniqueInput
  }

  /**
   * latest_sync_trans findFirst
   */
  export type latest_sync_transFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the latest_sync_trans
     */
    select?: latest_sync_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the latest_sync_trans
     */
    omit?: latest_sync_transOmit<ExtArgs> | null
    /**
     * Filter, which latest_sync_trans to fetch.
     */
    where?: latest_sync_transWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of latest_sync_trans to fetch.
     */
    orderBy?: latest_sync_transOrderByWithRelationInput | latest_sync_transOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for latest_sync_trans.
     */
    cursor?: latest_sync_transWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` latest_sync_trans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` latest_sync_trans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of latest_sync_trans.
     */
    distinct?: Latest_sync_transScalarFieldEnum | Latest_sync_transScalarFieldEnum[]
  }

  /**
   * latest_sync_trans findFirstOrThrow
   */
  export type latest_sync_transFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the latest_sync_trans
     */
    select?: latest_sync_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the latest_sync_trans
     */
    omit?: latest_sync_transOmit<ExtArgs> | null
    /**
     * Filter, which latest_sync_trans to fetch.
     */
    where?: latest_sync_transWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of latest_sync_trans to fetch.
     */
    orderBy?: latest_sync_transOrderByWithRelationInput | latest_sync_transOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for latest_sync_trans.
     */
    cursor?: latest_sync_transWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` latest_sync_trans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` latest_sync_trans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of latest_sync_trans.
     */
    distinct?: Latest_sync_transScalarFieldEnum | Latest_sync_transScalarFieldEnum[]
  }

  /**
   * latest_sync_trans findMany
   */
  export type latest_sync_transFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the latest_sync_trans
     */
    select?: latest_sync_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the latest_sync_trans
     */
    omit?: latest_sync_transOmit<ExtArgs> | null
    /**
     * Filter, which latest_sync_trans to fetch.
     */
    where?: latest_sync_transWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of latest_sync_trans to fetch.
     */
    orderBy?: latest_sync_transOrderByWithRelationInput | latest_sync_transOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing latest_sync_trans.
     */
    cursor?: latest_sync_transWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` latest_sync_trans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` latest_sync_trans.
     */
    skip?: number
    distinct?: Latest_sync_transScalarFieldEnum | Latest_sync_transScalarFieldEnum[]
  }

  /**
   * latest_sync_trans create
   */
  export type latest_sync_transCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the latest_sync_trans
     */
    select?: latest_sync_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the latest_sync_trans
     */
    omit?: latest_sync_transOmit<ExtArgs> | null
    /**
     * The data needed to create a latest_sync_trans.
     */
    data: XOR<latest_sync_transCreateInput, latest_sync_transUncheckedCreateInput>
  }

  /**
   * latest_sync_trans createMany
   */
  export type latest_sync_transCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many latest_sync_trans.
     */
    data: latest_sync_transCreateManyInput | latest_sync_transCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * latest_sync_trans createManyAndReturn
   */
  export type latest_sync_transCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the latest_sync_trans
     */
    select?: latest_sync_transSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the latest_sync_trans
     */
    omit?: latest_sync_transOmit<ExtArgs> | null
    /**
     * The data used to create many latest_sync_trans.
     */
    data: latest_sync_transCreateManyInput | latest_sync_transCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * latest_sync_trans update
   */
  export type latest_sync_transUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the latest_sync_trans
     */
    select?: latest_sync_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the latest_sync_trans
     */
    omit?: latest_sync_transOmit<ExtArgs> | null
    /**
     * The data needed to update a latest_sync_trans.
     */
    data: XOR<latest_sync_transUpdateInput, latest_sync_transUncheckedUpdateInput>
    /**
     * Choose, which latest_sync_trans to update.
     */
    where: latest_sync_transWhereUniqueInput
  }

  /**
   * latest_sync_trans updateMany
   */
  export type latest_sync_transUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update latest_sync_trans.
     */
    data: XOR<latest_sync_transUpdateManyMutationInput, latest_sync_transUncheckedUpdateManyInput>
    /**
     * Filter which latest_sync_trans to update
     */
    where?: latest_sync_transWhereInput
  }

  /**
   * latest_sync_trans updateManyAndReturn
   */
  export type latest_sync_transUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the latest_sync_trans
     */
    select?: latest_sync_transSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the latest_sync_trans
     */
    omit?: latest_sync_transOmit<ExtArgs> | null
    /**
     * The data used to update latest_sync_trans.
     */
    data: XOR<latest_sync_transUpdateManyMutationInput, latest_sync_transUncheckedUpdateManyInput>
    /**
     * Filter which latest_sync_trans to update
     */
    where?: latest_sync_transWhereInput
  }

  /**
   * latest_sync_trans upsert
   */
  export type latest_sync_transUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the latest_sync_trans
     */
    select?: latest_sync_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the latest_sync_trans
     */
    omit?: latest_sync_transOmit<ExtArgs> | null
    /**
     * The filter to search for the latest_sync_trans to update in case it exists.
     */
    where: latest_sync_transWhereUniqueInput
    /**
     * In case the latest_sync_trans found by the `where` argument doesn't exist, create a new latest_sync_trans with this data.
     */
    create: XOR<latest_sync_transCreateInput, latest_sync_transUncheckedCreateInput>
    /**
     * In case the latest_sync_trans was found with the provided `where` argument, update it with this data.
     */
    update: XOR<latest_sync_transUpdateInput, latest_sync_transUncheckedUpdateInput>
  }

  /**
   * latest_sync_trans delete
   */
  export type latest_sync_transDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the latest_sync_trans
     */
    select?: latest_sync_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the latest_sync_trans
     */
    omit?: latest_sync_transOmit<ExtArgs> | null
    /**
     * Filter which latest_sync_trans to delete.
     */
    where: latest_sync_transWhereUniqueInput
  }

  /**
   * latest_sync_trans deleteMany
   */
  export type latest_sync_transDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which latest_sync_trans to delete
     */
    where?: latest_sync_transWhereInput
  }

  /**
   * latest_sync_trans without action
   */
  export type latest_sync_transDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the latest_sync_trans
     */
    select?: latest_sync_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the latest_sync_trans
     */
    omit?: latest_sync_transOmit<ExtArgs> | null
  }


  /**
   * Model pass
   */

  export type AggregatePass = {
    _count: PassCountAggregateOutputType | null
    _min: PassMinAggregateOutputType | null
    _max: PassMaxAggregateOutputType | null
  }

  export type PassMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    updated_at: Date | null
  }

  export type PassMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    updated_at: Date | null
  }

  export type PassCountAggregateOutputType = {
    id: number
    username: number
    password: number
    updated_at: number
    _all: number
  }


  export type PassMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    updated_at?: true
  }

  export type PassMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    updated_at?: true
  }

  export type PassCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    updated_at?: true
    _all?: true
  }

  export type PassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which pass to aggregate.
     */
    where?: passWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passes to fetch.
     */
    orderBy?: passOrderByWithRelationInput | passOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: passWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned passes
    **/
    _count?: true | PassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PassMaxAggregateInputType
  }

  export type GetPassAggregateType<T extends PassAggregateArgs> = {
        [P in keyof T & keyof AggregatePass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePass[P]>
      : GetScalarType<T[P], AggregatePass[P]>
  }




  export type passGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: passWhereInput
    orderBy?: passOrderByWithAggregationInput | passOrderByWithAggregationInput[]
    by: PassScalarFieldEnum[] | PassScalarFieldEnum
    having?: passScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PassCountAggregateInputType | true
    _min?: PassMinAggregateInputType
    _max?: PassMaxAggregateInputType
  }

  export type PassGroupByOutputType = {
    id: string
    username: string
    password: string
    updated_at: Date
    _count: PassCountAggregateOutputType | null
    _min: PassMinAggregateOutputType | null
    _max: PassMaxAggregateOutputType | null
  }

  type GetPassGroupByPayload<T extends passGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PassGroupByOutputType[P]>
            : GetScalarType<T[P], PassGroupByOutputType[P]>
        }
      >
    >


  export type passSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["pass"]>

  export type passSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["pass"]>

  export type passSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["pass"]>

  export type passSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    updated_at?: boolean
  }

  export type passOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "updated_at", ExtArgs["result"]["pass"]>

  export type $passPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "pass"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
      updated_at: Date
    }, ExtArgs["result"]["pass"]>
    composites: {}
  }

  type passGetPayload<S extends boolean | null | undefined | passDefaultArgs> = $Result.GetResult<Prisma.$passPayload, S>

  type passCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<passFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PassCountAggregateInputType | true
    }

  export interface passDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['pass'], meta: { name: 'pass' } }
    /**
     * Find zero or one Pass that matches the filter.
     * @param {passFindUniqueArgs} args - Arguments to find a Pass
     * @example
     * // Get one Pass
     * const pass = await prisma.pass.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends passFindUniqueArgs>(args: SelectSubset<T, passFindUniqueArgs<ExtArgs>>): Prisma__passClient<$Result.GetResult<Prisma.$passPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Pass that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {passFindUniqueOrThrowArgs} args - Arguments to find a Pass
     * @example
     * // Get one Pass
     * const pass = await prisma.pass.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends passFindUniqueOrThrowArgs>(args: SelectSubset<T, passFindUniqueOrThrowArgs<ExtArgs>>): Prisma__passClient<$Result.GetResult<Prisma.$passPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Pass that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passFindFirstArgs} args - Arguments to find a Pass
     * @example
     * // Get one Pass
     * const pass = await prisma.pass.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends passFindFirstArgs>(args?: SelectSubset<T, passFindFirstArgs<ExtArgs>>): Prisma__passClient<$Result.GetResult<Prisma.$passPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Pass that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passFindFirstOrThrowArgs} args - Arguments to find a Pass
     * @example
     * // Get one Pass
     * const pass = await prisma.pass.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends passFindFirstOrThrowArgs>(args?: SelectSubset<T, passFindFirstOrThrowArgs<ExtArgs>>): Prisma__passClient<$Result.GetResult<Prisma.$passPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Passes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Passes
     * const passes = await prisma.pass.findMany()
     * 
     * // Get first 10 Passes
     * const passes = await prisma.pass.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passWithIdOnly = await prisma.pass.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends passFindManyArgs>(args?: SelectSubset<T, passFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$passPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Pass.
     * @param {passCreateArgs} args - Arguments to create a Pass.
     * @example
     * // Create one Pass
     * const Pass = await prisma.pass.create({
     *   data: {
     *     // ... data to create a Pass
     *   }
     * })
     * 
     */
    create<T extends passCreateArgs>(args: SelectSubset<T, passCreateArgs<ExtArgs>>): Prisma__passClient<$Result.GetResult<Prisma.$passPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Passes.
     * @param {passCreateManyArgs} args - Arguments to create many Passes.
     * @example
     * // Create many Passes
     * const pass = await prisma.pass.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends passCreateManyArgs>(args?: SelectSubset<T, passCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Passes and returns the data saved in the database.
     * @param {passCreateManyAndReturnArgs} args - Arguments to create many Passes.
     * @example
     * // Create many Passes
     * const pass = await prisma.pass.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Passes and only return the `id`
     * const passWithIdOnly = await prisma.pass.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends passCreateManyAndReturnArgs>(args?: SelectSubset<T, passCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$passPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Pass.
     * @param {passDeleteArgs} args - Arguments to delete one Pass.
     * @example
     * // Delete one Pass
     * const Pass = await prisma.pass.delete({
     *   where: {
     *     // ... filter to delete one Pass
     *   }
     * })
     * 
     */
    delete<T extends passDeleteArgs>(args: SelectSubset<T, passDeleteArgs<ExtArgs>>): Prisma__passClient<$Result.GetResult<Prisma.$passPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Pass.
     * @param {passUpdateArgs} args - Arguments to update one Pass.
     * @example
     * // Update one Pass
     * const pass = await prisma.pass.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends passUpdateArgs>(args: SelectSubset<T, passUpdateArgs<ExtArgs>>): Prisma__passClient<$Result.GetResult<Prisma.$passPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Passes.
     * @param {passDeleteManyArgs} args - Arguments to filter Passes to delete.
     * @example
     * // Delete a few Passes
     * const { count } = await prisma.pass.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends passDeleteManyArgs>(args?: SelectSubset<T, passDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Passes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Passes
     * const pass = await prisma.pass.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends passUpdateManyArgs>(args: SelectSubset<T, passUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Passes and returns the data updated in the database.
     * @param {passUpdateManyAndReturnArgs} args - Arguments to update many Passes.
     * @example
     * // Update many Passes
     * const pass = await prisma.pass.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Passes and only return the `id`
     * const passWithIdOnly = await prisma.pass.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends passUpdateManyAndReturnArgs>(args: SelectSubset<T, passUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$passPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Pass.
     * @param {passUpsertArgs} args - Arguments to update or create a Pass.
     * @example
     * // Update or create a Pass
     * const pass = await prisma.pass.upsert({
     *   create: {
     *     // ... data to create a Pass
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pass we want to update
     *   }
     * })
     */
    upsert<T extends passUpsertArgs>(args: SelectSubset<T, passUpsertArgs<ExtArgs>>): Prisma__passClient<$Result.GetResult<Prisma.$passPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Passes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passCountArgs} args - Arguments to filter Passes to count.
     * @example
     * // Count the number of Passes
     * const count = await prisma.pass.count({
     *   where: {
     *     // ... the filter for the Passes we want to count
     *   }
     * })
    **/
    count<T extends passCountArgs>(
      args?: Subset<T, passCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PassAggregateArgs>(args: Subset<T, PassAggregateArgs>): Prisma.PrismaPromise<GetPassAggregateType<T>>

    /**
     * Group by Pass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {passGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends passGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: passGroupByArgs['orderBy'] }
        : { orderBy?: passGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, passGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the pass model
   */
  readonly fields: passFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for pass.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__passClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the pass model
   */ 
  interface passFieldRefs {
    readonly id: FieldRef<"pass", 'String'>
    readonly username: FieldRef<"pass", 'String'>
    readonly password: FieldRef<"pass", 'String'>
    readonly updated_at: FieldRef<"pass", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * pass findUnique
   */
  export type passFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pass
     */
    select?: passSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pass
     */
    omit?: passOmit<ExtArgs> | null
    /**
     * Filter, which pass to fetch.
     */
    where: passWhereUniqueInput
  }

  /**
   * pass findUniqueOrThrow
   */
  export type passFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pass
     */
    select?: passSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pass
     */
    omit?: passOmit<ExtArgs> | null
    /**
     * Filter, which pass to fetch.
     */
    where: passWhereUniqueInput
  }

  /**
   * pass findFirst
   */
  export type passFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pass
     */
    select?: passSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pass
     */
    omit?: passOmit<ExtArgs> | null
    /**
     * Filter, which pass to fetch.
     */
    where?: passWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passes to fetch.
     */
    orderBy?: passOrderByWithRelationInput | passOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for passes.
     */
    cursor?: passWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of passes.
     */
    distinct?: PassScalarFieldEnum | PassScalarFieldEnum[]
  }

  /**
   * pass findFirstOrThrow
   */
  export type passFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pass
     */
    select?: passSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pass
     */
    omit?: passOmit<ExtArgs> | null
    /**
     * Filter, which pass to fetch.
     */
    where?: passWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passes to fetch.
     */
    orderBy?: passOrderByWithRelationInput | passOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for passes.
     */
    cursor?: passWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of passes.
     */
    distinct?: PassScalarFieldEnum | PassScalarFieldEnum[]
  }

  /**
   * pass findMany
   */
  export type passFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pass
     */
    select?: passSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pass
     */
    omit?: passOmit<ExtArgs> | null
    /**
     * Filter, which passes to fetch.
     */
    where?: passWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of passes to fetch.
     */
    orderBy?: passOrderByWithRelationInput | passOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing passes.
     */
    cursor?: passWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` passes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` passes.
     */
    skip?: number
    distinct?: PassScalarFieldEnum | PassScalarFieldEnum[]
  }

  /**
   * pass create
   */
  export type passCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pass
     */
    select?: passSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pass
     */
    omit?: passOmit<ExtArgs> | null
    /**
     * The data needed to create a pass.
     */
    data: XOR<passCreateInput, passUncheckedCreateInput>
  }

  /**
   * pass createMany
   */
  export type passCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many passes.
     */
    data: passCreateManyInput | passCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * pass createManyAndReturn
   */
  export type passCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pass
     */
    select?: passSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the pass
     */
    omit?: passOmit<ExtArgs> | null
    /**
     * The data used to create many passes.
     */
    data: passCreateManyInput | passCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * pass update
   */
  export type passUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pass
     */
    select?: passSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pass
     */
    omit?: passOmit<ExtArgs> | null
    /**
     * The data needed to update a pass.
     */
    data: XOR<passUpdateInput, passUncheckedUpdateInput>
    /**
     * Choose, which pass to update.
     */
    where: passWhereUniqueInput
  }

  /**
   * pass updateMany
   */
  export type passUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update passes.
     */
    data: XOR<passUpdateManyMutationInput, passUncheckedUpdateManyInput>
    /**
     * Filter which passes to update
     */
    where?: passWhereInput
  }

  /**
   * pass updateManyAndReturn
   */
  export type passUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pass
     */
    select?: passSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the pass
     */
    omit?: passOmit<ExtArgs> | null
    /**
     * The data used to update passes.
     */
    data: XOR<passUpdateManyMutationInput, passUncheckedUpdateManyInput>
    /**
     * Filter which passes to update
     */
    where?: passWhereInput
  }

  /**
   * pass upsert
   */
  export type passUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pass
     */
    select?: passSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pass
     */
    omit?: passOmit<ExtArgs> | null
    /**
     * The filter to search for the pass to update in case it exists.
     */
    where: passWhereUniqueInput
    /**
     * In case the pass found by the `where` argument doesn't exist, create a new pass with this data.
     */
    create: XOR<passCreateInput, passUncheckedCreateInput>
    /**
     * In case the pass was found with the provided `where` argument, update it with this data.
     */
    update: XOR<passUpdateInput, passUncheckedUpdateInput>
  }

  /**
   * pass delete
   */
  export type passDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pass
     */
    select?: passSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pass
     */
    omit?: passOmit<ExtArgs> | null
    /**
     * Filter which pass to delete.
     */
    where: passWhereUniqueInput
  }

  /**
   * pass deleteMany
   */
  export type passDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which passes to delete
     */
    where?: passWhereInput
  }

  /**
   * pass without action
   */
  export type passDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the pass
     */
    select?: passSelect<ExtArgs> | null
    /**
     * Omit specific fields from the pass
     */
    omit?: passOmit<ExtArgs> | null
  }


  /**
   * Model privy_user
   */

  export type AggregatePrivy_user = {
    _count: Privy_userCountAggregateOutputType | null
    _avg: Privy_userAvgAggregateOutputType | null
    _sum: Privy_userSumAggregateOutputType | null
    _min: Privy_userMinAggregateOutputType | null
    _max: Privy_userMaxAggregateOutputType | null
  }

  export type Privy_userAvgAggregateOutputType = {
    id: number | null
    gangs_collect: number | null
    black_time: number | null
  }

  export type Privy_userSumAggregateOutputType = {
    id: number | null
    gangs_collect: number[]
    black_time: number | null
  }

  export type Privy_userMinAggregateOutputType = {
    id: number | null
    address: string | null
    txs_switch: boolean | null
    dis_switch: boolean | null
    multiple_switch: boolean | null
    tts_switch: boolean | null
    range_times: string | null
    created_at: Date | null
    did: string | null
    black_time: number | null
    updated_at: Date | null
  }

  export type Privy_userMaxAggregateOutputType = {
    id: number | null
    address: string | null
    txs_switch: boolean | null
    dis_switch: boolean | null
    multiple_switch: boolean | null
    tts_switch: boolean | null
    range_times: string | null
    created_at: Date | null
    did: string | null
    black_time: number | null
    updated_at: Date | null
  }

  export type Privy_userCountAggregateOutputType = {
    id: number
    address: number
    txs_switch: number
    dis_switch: number
    multiple_switch: number
    tts_switch: number
    range_times: number
    created_at: number
    gangs_collect: number
    auto_buy_setting: number
    swap_setting: number
    tg_bot: number
    did: number
    black_time: number
    updated_at: number
    fomo_setting: number
    _all: number
  }


  export type Privy_userAvgAggregateInputType = {
    id?: true
    gangs_collect?: true
    black_time?: true
  }

  export type Privy_userSumAggregateInputType = {
    id?: true
    gangs_collect?: true
    black_time?: true
  }

  export type Privy_userMinAggregateInputType = {
    id?: true
    address?: true
    txs_switch?: true
    dis_switch?: true
    multiple_switch?: true
    tts_switch?: true
    range_times?: true
    created_at?: true
    did?: true
    black_time?: true
    updated_at?: true
  }

  export type Privy_userMaxAggregateInputType = {
    id?: true
    address?: true
    txs_switch?: true
    dis_switch?: true
    multiple_switch?: true
    tts_switch?: true
    range_times?: true
    created_at?: true
    did?: true
    black_time?: true
    updated_at?: true
  }

  export type Privy_userCountAggregateInputType = {
    id?: true
    address?: true
    txs_switch?: true
    dis_switch?: true
    multiple_switch?: true
    tts_switch?: true
    range_times?: true
    created_at?: true
    gangs_collect?: true
    auto_buy_setting?: true
    swap_setting?: true
    tg_bot?: true
    did?: true
    black_time?: true
    updated_at?: true
    fomo_setting?: true
    _all?: true
  }

  export type Privy_userAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which privy_user to aggregate.
     */
    where?: privy_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of privy_users to fetch.
     */
    orderBy?: privy_userOrderByWithRelationInput | privy_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: privy_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` privy_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` privy_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned privy_users
    **/
    _count?: true | Privy_userCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Privy_userAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Privy_userSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Privy_userMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Privy_userMaxAggregateInputType
  }

  export type GetPrivy_userAggregateType<T extends Privy_userAggregateArgs> = {
        [P in keyof T & keyof AggregatePrivy_user]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrivy_user[P]>
      : GetScalarType<T[P], AggregatePrivy_user[P]>
  }




  export type privy_userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: privy_userWhereInput
    orderBy?: privy_userOrderByWithAggregationInput | privy_userOrderByWithAggregationInput[]
    by: Privy_userScalarFieldEnum[] | Privy_userScalarFieldEnum
    having?: privy_userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Privy_userCountAggregateInputType | true
    _avg?: Privy_userAvgAggregateInputType
    _sum?: Privy_userSumAggregateInputType
    _min?: Privy_userMinAggregateInputType
    _max?: Privy_userMaxAggregateInputType
  }

  export type Privy_userGroupByOutputType = {
    id: number
    address: string
    txs_switch: boolean
    dis_switch: boolean
    multiple_switch: boolean
    tts_switch: boolean
    range_times: string
    created_at: Date
    gangs_collect: number[]
    auto_buy_setting: JsonValue | null
    swap_setting: JsonValue | null
    tg_bot: JsonValue | null
    did: string
    black_time: number
    updated_at: Date
    fomo_setting: JsonValue | null
    _count: Privy_userCountAggregateOutputType | null
    _avg: Privy_userAvgAggregateOutputType | null
    _sum: Privy_userSumAggregateOutputType | null
    _min: Privy_userMinAggregateOutputType | null
    _max: Privy_userMaxAggregateOutputType | null
  }

  type GetPrivy_userGroupByPayload<T extends privy_userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Privy_userGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Privy_userGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Privy_userGroupByOutputType[P]>
            : GetScalarType<T[P], Privy_userGroupByOutputType[P]>
        }
      >
    >


  export type privy_userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: boolean
    created_at?: boolean
    gangs_collect?: boolean
    auto_buy_setting?: boolean
    swap_setting?: boolean
    tg_bot?: boolean
    did?: boolean
    black_time?: boolean
    updated_at?: boolean
    fomo_setting?: boolean
    favorite?: boolean | privy_user$favoriteArgs<ExtArgs>
    gangs?: boolean | privy_user$gangsArgs<ExtArgs>
    tts?: boolean | privy_user$ttsArgs<ExtArgs>
    user_watching_tokens?: boolean | privy_user$user_watching_tokensArgs<ExtArgs>
    wallets_users?: boolean | privy_user$wallets_usersArgs<ExtArgs>
    _count?: boolean | Privy_userCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["privy_user"]>

  export type privy_userSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: boolean
    created_at?: boolean
    gangs_collect?: boolean
    auto_buy_setting?: boolean
    swap_setting?: boolean
    tg_bot?: boolean
    did?: boolean
    black_time?: boolean
    updated_at?: boolean
    fomo_setting?: boolean
  }, ExtArgs["result"]["privy_user"]>

  export type privy_userSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: boolean
    created_at?: boolean
    gangs_collect?: boolean
    auto_buy_setting?: boolean
    swap_setting?: boolean
    tg_bot?: boolean
    did?: boolean
    black_time?: boolean
    updated_at?: boolean
    fomo_setting?: boolean
  }, ExtArgs["result"]["privy_user"]>

  export type privy_userSelectScalar = {
    id?: boolean
    address?: boolean
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: boolean
    created_at?: boolean
    gangs_collect?: boolean
    auto_buy_setting?: boolean
    swap_setting?: boolean
    tg_bot?: boolean
    did?: boolean
    black_time?: boolean
    updated_at?: boolean
    fomo_setting?: boolean
  }

  export type privy_userOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "address" | "txs_switch" | "dis_switch" | "multiple_switch" | "tts_switch" | "range_times" | "created_at" | "gangs_collect" | "auto_buy_setting" | "swap_setting" | "tg_bot" | "did" | "black_time" | "updated_at" | "fomo_setting", ExtArgs["result"]["privy_user"]>
  export type privy_userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    favorite?: boolean | privy_user$favoriteArgs<ExtArgs>
    gangs?: boolean | privy_user$gangsArgs<ExtArgs>
    tts?: boolean | privy_user$ttsArgs<ExtArgs>
    user_watching_tokens?: boolean | privy_user$user_watching_tokensArgs<ExtArgs>
    wallets_users?: boolean | privy_user$wallets_usersArgs<ExtArgs>
    _count?: boolean | Privy_userCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type privy_userIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type privy_userIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $privy_userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "privy_user"
    objects: {
      favorite: Prisma.$favoritePayload<ExtArgs>[]
      gangs: Prisma.$gangsPayload<ExtArgs>[]
      tts: Prisma.$ttsPayload<ExtArgs>[]
      user_watching_tokens: Prisma.$user_watching_tokensPayload<ExtArgs>[]
      wallets_users: Prisma.$wallets_usersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      address: string
      txs_switch: boolean
      dis_switch: boolean
      multiple_switch: boolean
      tts_switch: boolean
      range_times: string
      created_at: Date
      gangs_collect: number[]
      auto_buy_setting: Prisma.JsonValue | null
      swap_setting: Prisma.JsonValue | null
      tg_bot: Prisma.JsonValue | null
      did: string
      black_time: number
      updated_at: Date
      fomo_setting: Prisma.JsonValue | null
    }, ExtArgs["result"]["privy_user"]>
    composites: {}
  }

  type privy_userGetPayload<S extends boolean | null | undefined | privy_userDefaultArgs> = $Result.GetResult<Prisma.$privy_userPayload, S>

  type privy_userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<privy_userFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Privy_userCountAggregateInputType | true
    }

  export interface privy_userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['privy_user'], meta: { name: 'privy_user' } }
    /**
     * Find zero or one Privy_user that matches the filter.
     * @param {privy_userFindUniqueArgs} args - Arguments to find a Privy_user
     * @example
     * // Get one Privy_user
     * const privy_user = await prisma.privy_user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends privy_userFindUniqueArgs>(args: SelectSubset<T, privy_userFindUniqueArgs<ExtArgs>>): Prisma__privy_userClient<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Privy_user that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {privy_userFindUniqueOrThrowArgs} args - Arguments to find a Privy_user
     * @example
     * // Get one Privy_user
     * const privy_user = await prisma.privy_user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends privy_userFindUniqueOrThrowArgs>(args: SelectSubset<T, privy_userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__privy_userClient<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Privy_user that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {privy_userFindFirstArgs} args - Arguments to find a Privy_user
     * @example
     * // Get one Privy_user
     * const privy_user = await prisma.privy_user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends privy_userFindFirstArgs>(args?: SelectSubset<T, privy_userFindFirstArgs<ExtArgs>>): Prisma__privy_userClient<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Privy_user that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {privy_userFindFirstOrThrowArgs} args - Arguments to find a Privy_user
     * @example
     * // Get one Privy_user
     * const privy_user = await prisma.privy_user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends privy_userFindFirstOrThrowArgs>(args?: SelectSubset<T, privy_userFindFirstOrThrowArgs<ExtArgs>>): Prisma__privy_userClient<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Privy_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {privy_userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Privy_users
     * const privy_users = await prisma.privy_user.findMany()
     * 
     * // Get first 10 Privy_users
     * const privy_users = await prisma.privy_user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const privy_userWithIdOnly = await prisma.privy_user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends privy_userFindManyArgs>(args?: SelectSubset<T, privy_userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Privy_user.
     * @param {privy_userCreateArgs} args - Arguments to create a Privy_user.
     * @example
     * // Create one Privy_user
     * const Privy_user = await prisma.privy_user.create({
     *   data: {
     *     // ... data to create a Privy_user
     *   }
     * })
     * 
     */
    create<T extends privy_userCreateArgs>(args: SelectSubset<T, privy_userCreateArgs<ExtArgs>>): Prisma__privy_userClient<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Privy_users.
     * @param {privy_userCreateManyArgs} args - Arguments to create many Privy_users.
     * @example
     * // Create many Privy_users
     * const privy_user = await prisma.privy_user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends privy_userCreateManyArgs>(args?: SelectSubset<T, privy_userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Privy_users and returns the data saved in the database.
     * @param {privy_userCreateManyAndReturnArgs} args - Arguments to create many Privy_users.
     * @example
     * // Create many Privy_users
     * const privy_user = await prisma.privy_user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Privy_users and only return the `id`
     * const privy_userWithIdOnly = await prisma.privy_user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends privy_userCreateManyAndReturnArgs>(args?: SelectSubset<T, privy_userCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Privy_user.
     * @param {privy_userDeleteArgs} args - Arguments to delete one Privy_user.
     * @example
     * // Delete one Privy_user
     * const Privy_user = await prisma.privy_user.delete({
     *   where: {
     *     // ... filter to delete one Privy_user
     *   }
     * })
     * 
     */
    delete<T extends privy_userDeleteArgs>(args: SelectSubset<T, privy_userDeleteArgs<ExtArgs>>): Prisma__privy_userClient<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Privy_user.
     * @param {privy_userUpdateArgs} args - Arguments to update one Privy_user.
     * @example
     * // Update one Privy_user
     * const privy_user = await prisma.privy_user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends privy_userUpdateArgs>(args: SelectSubset<T, privy_userUpdateArgs<ExtArgs>>): Prisma__privy_userClient<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Privy_users.
     * @param {privy_userDeleteManyArgs} args - Arguments to filter Privy_users to delete.
     * @example
     * // Delete a few Privy_users
     * const { count } = await prisma.privy_user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends privy_userDeleteManyArgs>(args?: SelectSubset<T, privy_userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Privy_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {privy_userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Privy_users
     * const privy_user = await prisma.privy_user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends privy_userUpdateManyArgs>(args: SelectSubset<T, privy_userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Privy_users and returns the data updated in the database.
     * @param {privy_userUpdateManyAndReturnArgs} args - Arguments to update many Privy_users.
     * @example
     * // Update many Privy_users
     * const privy_user = await prisma.privy_user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Privy_users and only return the `id`
     * const privy_userWithIdOnly = await prisma.privy_user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends privy_userUpdateManyAndReturnArgs>(args: SelectSubset<T, privy_userUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Privy_user.
     * @param {privy_userUpsertArgs} args - Arguments to update or create a Privy_user.
     * @example
     * // Update or create a Privy_user
     * const privy_user = await prisma.privy_user.upsert({
     *   create: {
     *     // ... data to create a Privy_user
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Privy_user we want to update
     *   }
     * })
     */
    upsert<T extends privy_userUpsertArgs>(args: SelectSubset<T, privy_userUpsertArgs<ExtArgs>>): Prisma__privy_userClient<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Privy_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {privy_userCountArgs} args - Arguments to filter Privy_users to count.
     * @example
     * // Count the number of Privy_users
     * const count = await prisma.privy_user.count({
     *   where: {
     *     // ... the filter for the Privy_users we want to count
     *   }
     * })
    **/
    count<T extends privy_userCountArgs>(
      args?: Subset<T, privy_userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Privy_userCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Privy_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Privy_userAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Privy_userAggregateArgs>(args: Subset<T, Privy_userAggregateArgs>): Prisma.PrismaPromise<GetPrivy_userAggregateType<T>>

    /**
     * Group by Privy_user.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {privy_userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends privy_userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: privy_userGroupByArgs['orderBy'] }
        : { orderBy?: privy_userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, privy_userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrivy_userGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the privy_user model
   */
  readonly fields: privy_userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for privy_user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__privy_userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    favorite<T extends privy_user$favoriteArgs<ExtArgs> = {}>(args?: Subset<T, privy_user$favoriteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$favoritePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    gangs<T extends privy_user$gangsArgs<ExtArgs> = {}>(args?: Subset<T, privy_user$gangsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gangsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    tts<T extends privy_user$ttsArgs<ExtArgs> = {}>(args?: Subset<T, privy_user$ttsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ttsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    user_watching_tokens<T extends privy_user$user_watching_tokensArgs<ExtArgs> = {}>(args?: Subset<T, privy_user$user_watching_tokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_watching_tokensPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    wallets_users<T extends privy_user$wallets_usersArgs<ExtArgs> = {}>(args?: Subset<T, privy_user$wallets_usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wallets_usersPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the privy_user model
   */ 
  interface privy_userFieldRefs {
    readonly id: FieldRef<"privy_user", 'Int'>
    readonly address: FieldRef<"privy_user", 'String'>
    readonly txs_switch: FieldRef<"privy_user", 'Boolean'>
    readonly dis_switch: FieldRef<"privy_user", 'Boolean'>
    readonly multiple_switch: FieldRef<"privy_user", 'Boolean'>
    readonly tts_switch: FieldRef<"privy_user", 'Boolean'>
    readonly range_times: FieldRef<"privy_user", 'String'>
    readonly created_at: FieldRef<"privy_user", 'DateTime'>
    readonly gangs_collect: FieldRef<"privy_user", 'Int[]'>
    readonly auto_buy_setting: FieldRef<"privy_user", 'Json'>
    readonly swap_setting: FieldRef<"privy_user", 'Json'>
    readonly tg_bot: FieldRef<"privy_user", 'Json'>
    readonly did: FieldRef<"privy_user", 'String'>
    readonly black_time: FieldRef<"privy_user", 'Int'>
    readonly updated_at: FieldRef<"privy_user", 'DateTime'>
    readonly fomo_setting: FieldRef<"privy_user", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * privy_user findUnique
   */
  export type privy_userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_user
     */
    select?: privy_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_user
     */
    omit?: privy_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: privy_userInclude<ExtArgs> | null
    /**
     * Filter, which privy_user to fetch.
     */
    where: privy_userWhereUniqueInput
  }

  /**
   * privy_user findUniqueOrThrow
   */
  export type privy_userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_user
     */
    select?: privy_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_user
     */
    omit?: privy_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: privy_userInclude<ExtArgs> | null
    /**
     * Filter, which privy_user to fetch.
     */
    where: privy_userWhereUniqueInput
  }

  /**
   * privy_user findFirst
   */
  export type privy_userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_user
     */
    select?: privy_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_user
     */
    omit?: privy_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: privy_userInclude<ExtArgs> | null
    /**
     * Filter, which privy_user to fetch.
     */
    where?: privy_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of privy_users to fetch.
     */
    orderBy?: privy_userOrderByWithRelationInput | privy_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for privy_users.
     */
    cursor?: privy_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` privy_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` privy_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of privy_users.
     */
    distinct?: Privy_userScalarFieldEnum | Privy_userScalarFieldEnum[]
  }

  /**
   * privy_user findFirstOrThrow
   */
  export type privy_userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_user
     */
    select?: privy_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_user
     */
    omit?: privy_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: privy_userInclude<ExtArgs> | null
    /**
     * Filter, which privy_user to fetch.
     */
    where?: privy_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of privy_users to fetch.
     */
    orderBy?: privy_userOrderByWithRelationInput | privy_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for privy_users.
     */
    cursor?: privy_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` privy_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` privy_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of privy_users.
     */
    distinct?: Privy_userScalarFieldEnum | Privy_userScalarFieldEnum[]
  }

  /**
   * privy_user findMany
   */
  export type privy_userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_user
     */
    select?: privy_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_user
     */
    omit?: privy_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: privy_userInclude<ExtArgs> | null
    /**
     * Filter, which privy_users to fetch.
     */
    where?: privy_userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of privy_users to fetch.
     */
    orderBy?: privy_userOrderByWithRelationInput | privy_userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing privy_users.
     */
    cursor?: privy_userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` privy_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` privy_users.
     */
    skip?: number
    distinct?: Privy_userScalarFieldEnum | Privy_userScalarFieldEnum[]
  }

  /**
   * privy_user create
   */
  export type privy_userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_user
     */
    select?: privy_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_user
     */
    omit?: privy_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: privy_userInclude<ExtArgs> | null
    /**
     * The data needed to create a privy_user.
     */
    data: XOR<privy_userCreateInput, privy_userUncheckedCreateInput>
  }

  /**
   * privy_user createMany
   */
  export type privy_userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many privy_users.
     */
    data: privy_userCreateManyInput | privy_userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * privy_user createManyAndReturn
   */
  export type privy_userCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_user
     */
    select?: privy_userSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the privy_user
     */
    omit?: privy_userOmit<ExtArgs> | null
    /**
     * The data used to create many privy_users.
     */
    data: privy_userCreateManyInput | privy_userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * privy_user update
   */
  export type privy_userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_user
     */
    select?: privy_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_user
     */
    omit?: privy_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: privy_userInclude<ExtArgs> | null
    /**
     * The data needed to update a privy_user.
     */
    data: XOR<privy_userUpdateInput, privy_userUncheckedUpdateInput>
    /**
     * Choose, which privy_user to update.
     */
    where: privy_userWhereUniqueInput
  }

  /**
   * privy_user updateMany
   */
  export type privy_userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update privy_users.
     */
    data: XOR<privy_userUpdateManyMutationInput, privy_userUncheckedUpdateManyInput>
    /**
     * Filter which privy_users to update
     */
    where?: privy_userWhereInput
  }

  /**
   * privy_user updateManyAndReturn
   */
  export type privy_userUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_user
     */
    select?: privy_userSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the privy_user
     */
    omit?: privy_userOmit<ExtArgs> | null
    /**
     * The data used to update privy_users.
     */
    data: XOR<privy_userUpdateManyMutationInput, privy_userUncheckedUpdateManyInput>
    /**
     * Filter which privy_users to update
     */
    where?: privy_userWhereInput
  }

  /**
   * privy_user upsert
   */
  export type privy_userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_user
     */
    select?: privy_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_user
     */
    omit?: privy_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: privy_userInclude<ExtArgs> | null
    /**
     * The filter to search for the privy_user to update in case it exists.
     */
    where: privy_userWhereUniqueInput
    /**
     * In case the privy_user found by the `where` argument doesn't exist, create a new privy_user with this data.
     */
    create: XOR<privy_userCreateInput, privy_userUncheckedCreateInput>
    /**
     * In case the privy_user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<privy_userUpdateInput, privy_userUncheckedUpdateInput>
  }

  /**
   * privy_user delete
   */
  export type privy_userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_user
     */
    select?: privy_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_user
     */
    omit?: privy_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: privy_userInclude<ExtArgs> | null
    /**
     * Filter which privy_user to delete.
     */
    where: privy_userWhereUniqueInput
  }

  /**
   * privy_user deleteMany
   */
  export type privy_userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which privy_users to delete
     */
    where?: privy_userWhereInput
  }

  /**
   * privy_user.favorite
   */
  export type privy_user$favoriteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the favorite
     */
    select?: favoriteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the favorite
     */
    omit?: favoriteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: favoriteInclude<ExtArgs> | null
    where?: favoriteWhereInput
    orderBy?: favoriteOrderByWithRelationInput | favoriteOrderByWithRelationInput[]
    cursor?: favoriteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoriteScalarFieldEnum | FavoriteScalarFieldEnum[]
  }

  /**
   * privy_user.gangs
   */
  export type privy_user$gangsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gangs
     */
    select?: gangsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gangs
     */
    omit?: gangsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gangsInclude<ExtArgs> | null
    where?: gangsWhereInput
    orderBy?: gangsOrderByWithRelationInput | gangsOrderByWithRelationInput[]
    cursor?: gangsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GangsScalarFieldEnum | GangsScalarFieldEnum[]
  }

  /**
   * privy_user.tts
   */
  export type privy_user$ttsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tts
     */
    select?: ttsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tts
     */
    omit?: ttsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ttsInclude<ExtArgs> | null
    where?: ttsWhereInput
    orderBy?: ttsOrderByWithRelationInput | ttsOrderByWithRelationInput[]
    cursor?: ttsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TtsScalarFieldEnum | TtsScalarFieldEnum[]
  }

  /**
   * privy_user.user_watching_tokens
   */
  export type privy_user$user_watching_tokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_watching_tokens
     */
    select?: user_watching_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_watching_tokens
     */
    omit?: user_watching_tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_watching_tokensInclude<ExtArgs> | null
    where?: user_watching_tokensWhereInput
    orderBy?: user_watching_tokensOrderByWithRelationInput | user_watching_tokensOrderByWithRelationInput[]
    cursor?: user_watching_tokensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: User_watching_tokensScalarFieldEnum | User_watching_tokensScalarFieldEnum[]
  }

  /**
   * privy_user.wallets_users
   */
  export type privy_user$wallets_usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersInclude<ExtArgs> | null
    where?: wallets_usersWhereInput
    orderBy?: wallets_usersOrderByWithRelationInput | wallets_usersOrderByWithRelationInput[]
    cursor?: wallets_usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Wallets_usersScalarFieldEnum | Wallets_usersScalarFieldEnum[]
  }

  /**
   * privy_user without action
   */
  export type privy_userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_user
     */
    select?: privy_userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_user
     */
    omit?: privy_userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: privy_userInclude<ExtArgs> | null
  }


  /**
   * Model privy_users_tokens
   */

  export type AggregatePrivy_users_tokens = {
    _count: Privy_users_tokensCountAggregateOutputType | null
    _avg: Privy_users_tokensAvgAggregateOutputType | null
    _sum: Privy_users_tokensSumAggregateOutputType | null
    _min: Privy_users_tokensMinAggregateOutputType | null
    _max: Privy_users_tokensMaxAggregateOutputType | null
  }

  export type Privy_users_tokensAvgAggregateOutputType = {
    id: number | null
    balance: number | null
    total_amount: number | null
  }

  export type Privy_users_tokensSumAggregateOutputType = {
    id: bigint | null
    balance: bigint | null
    total_amount: bigint | null
  }

  export type Privy_users_tokensMinAggregateOutputType = {
    id: bigint | null
    walletAddress: string | null
    tokenAddress: string | null
    balance: bigint | null
    total_amount: bigint | null
    token_address: string | null
    wallet_address: string | null
    updated_at: Date | null
  }

  export type Privy_users_tokensMaxAggregateOutputType = {
    id: bigint | null
    walletAddress: string | null
    tokenAddress: string | null
    balance: bigint | null
    total_amount: bigint | null
    token_address: string | null
    wallet_address: string | null
    updated_at: Date | null
  }

  export type Privy_users_tokensCountAggregateOutputType = {
    id: number
    walletAddress: number
    tokenAddress: number
    balance: number
    total_amount: number
    token_address: number
    wallet_address: number
    updated_at: number
    _all: number
  }


  export type Privy_users_tokensAvgAggregateInputType = {
    id?: true
    balance?: true
    total_amount?: true
  }

  export type Privy_users_tokensSumAggregateInputType = {
    id?: true
    balance?: true
    total_amount?: true
  }

  export type Privy_users_tokensMinAggregateInputType = {
    id?: true
    walletAddress?: true
    tokenAddress?: true
    balance?: true
    total_amount?: true
    token_address?: true
    wallet_address?: true
    updated_at?: true
  }

  export type Privy_users_tokensMaxAggregateInputType = {
    id?: true
    walletAddress?: true
    tokenAddress?: true
    balance?: true
    total_amount?: true
    token_address?: true
    wallet_address?: true
    updated_at?: true
  }

  export type Privy_users_tokensCountAggregateInputType = {
    id?: true
    walletAddress?: true
    tokenAddress?: true
    balance?: true
    total_amount?: true
    token_address?: true
    wallet_address?: true
    updated_at?: true
    _all?: true
  }

  export type Privy_users_tokensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which privy_users_tokens to aggregate.
     */
    where?: privy_users_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of privy_users_tokens to fetch.
     */
    orderBy?: privy_users_tokensOrderByWithRelationInput | privy_users_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: privy_users_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` privy_users_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` privy_users_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned privy_users_tokens
    **/
    _count?: true | Privy_users_tokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Privy_users_tokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Privy_users_tokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Privy_users_tokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Privy_users_tokensMaxAggregateInputType
  }

  export type GetPrivy_users_tokensAggregateType<T extends Privy_users_tokensAggregateArgs> = {
        [P in keyof T & keyof AggregatePrivy_users_tokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrivy_users_tokens[P]>
      : GetScalarType<T[P], AggregatePrivy_users_tokens[P]>
  }




  export type privy_users_tokensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: privy_users_tokensWhereInput
    orderBy?: privy_users_tokensOrderByWithAggregationInput | privy_users_tokensOrderByWithAggregationInput[]
    by: Privy_users_tokensScalarFieldEnum[] | Privy_users_tokensScalarFieldEnum
    having?: privy_users_tokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Privy_users_tokensCountAggregateInputType | true
    _avg?: Privy_users_tokensAvgAggregateInputType
    _sum?: Privy_users_tokensSumAggregateInputType
    _min?: Privy_users_tokensMinAggregateInputType
    _max?: Privy_users_tokensMaxAggregateInputType
  }

  export type Privy_users_tokensGroupByOutputType = {
    id: bigint
    walletAddress: string
    tokenAddress: string
    balance: bigint
    total_amount: bigint
    token_address: string
    wallet_address: string
    updated_at: Date
    _count: Privy_users_tokensCountAggregateOutputType | null
    _avg: Privy_users_tokensAvgAggregateOutputType | null
    _sum: Privy_users_tokensSumAggregateOutputType | null
    _min: Privy_users_tokensMinAggregateOutputType | null
    _max: Privy_users_tokensMaxAggregateOutputType | null
  }

  type GetPrivy_users_tokensGroupByPayload<T extends privy_users_tokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Privy_users_tokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Privy_users_tokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Privy_users_tokensGroupByOutputType[P]>
            : GetScalarType<T[P], Privy_users_tokensGroupByOutputType[P]>
        }
      >
    >


  export type privy_users_tokensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    tokenAddress?: boolean
    balance?: boolean
    total_amount?: boolean
    token_address?: boolean
    wallet_address?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["privy_users_tokens"]>

  export type privy_users_tokensSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    tokenAddress?: boolean
    balance?: boolean
    total_amount?: boolean
    token_address?: boolean
    wallet_address?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["privy_users_tokens"]>

  export type privy_users_tokensSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    tokenAddress?: boolean
    balance?: boolean
    total_amount?: boolean
    token_address?: boolean
    wallet_address?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["privy_users_tokens"]>

  export type privy_users_tokensSelectScalar = {
    id?: boolean
    walletAddress?: boolean
    tokenAddress?: boolean
    balance?: boolean
    total_amount?: boolean
    token_address?: boolean
    wallet_address?: boolean
    updated_at?: boolean
  }

  export type privy_users_tokensOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "walletAddress" | "tokenAddress" | "balance" | "total_amount" | "token_address" | "wallet_address" | "updated_at", ExtArgs["result"]["privy_users_tokens"]>

  export type $privy_users_tokensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "privy_users_tokens"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      walletAddress: string
      tokenAddress: string
      balance: bigint
      total_amount: bigint
      token_address: string
      wallet_address: string
      updated_at: Date
    }, ExtArgs["result"]["privy_users_tokens"]>
    composites: {}
  }

  type privy_users_tokensGetPayload<S extends boolean | null | undefined | privy_users_tokensDefaultArgs> = $Result.GetResult<Prisma.$privy_users_tokensPayload, S>

  type privy_users_tokensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<privy_users_tokensFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Privy_users_tokensCountAggregateInputType | true
    }

  export interface privy_users_tokensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['privy_users_tokens'], meta: { name: 'privy_users_tokens' } }
    /**
     * Find zero or one Privy_users_tokens that matches the filter.
     * @param {privy_users_tokensFindUniqueArgs} args - Arguments to find a Privy_users_tokens
     * @example
     * // Get one Privy_users_tokens
     * const privy_users_tokens = await prisma.privy_users_tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends privy_users_tokensFindUniqueArgs>(args: SelectSubset<T, privy_users_tokensFindUniqueArgs<ExtArgs>>): Prisma__privy_users_tokensClient<$Result.GetResult<Prisma.$privy_users_tokensPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Privy_users_tokens that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {privy_users_tokensFindUniqueOrThrowArgs} args - Arguments to find a Privy_users_tokens
     * @example
     * // Get one Privy_users_tokens
     * const privy_users_tokens = await prisma.privy_users_tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends privy_users_tokensFindUniqueOrThrowArgs>(args: SelectSubset<T, privy_users_tokensFindUniqueOrThrowArgs<ExtArgs>>): Prisma__privy_users_tokensClient<$Result.GetResult<Prisma.$privy_users_tokensPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Privy_users_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {privy_users_tokensFindFirstArgs} args - Arguments to find a Privy_users_tokens
     * @example
     * // Get one Privy_users_tokens
     * const privy_users_tokens = await prisma.privy_users_tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends privy_users_tokensFindFirstArgs>(args?: SelectSubset<T, privy_users_tokensFindFirstArgs<ExtArgs>>): Prisma__privy_users_tokensClient<$Result.GetResult<Prisma.$privy_users_tokensPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Privy_users_tokens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {privy_users_tokensFindFirstOrThrowArgs} args - Arguments to find a Privy_users_tokens
     * @example
     * // Get one Privy_users_tokens
     * const privy_users_tokens = await prisma.privy_users_tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends privy_users_tokensFindFirstOrThrowArgs>(args?: SelectSubset<T, privy_users_tokensFindFirstOrThrowArgs<ExtArgs>>): Prisma__privy_users_tokensClient<$Result.GetResult<Prisma.$privy_users_tokensPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Privy_users_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {privy_users_tokensFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Privy_users_tokens
     * const privy_users_tokens = await prisma.privy_users_tokens.findMany()
     * 
     * // Get first 10 Privy_users_tokens
     * const privy_users_tokens = await prisma.privy_users_tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const privy_users_tokensWithIdOnly = await prisma.privy_users_tokens.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends privy_users_tokensFindManyArgs>(args?: SelectSubset<T, privy_users_tokensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$privy_users_tokensPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Privy_users_tokens.
     * @param {privy_users_tokensCreateArgs} args - Arguments to create a Privy_users_tokens.
     * @example
     * // Create one Privy_users_tokens
     * const Privy_users_tokens = await prisma.privy_users_tokens.create({
     *   data: {
     *     // ... data to create a Privy_users_tokens
     *   }
     * })
     * 
     */
    create<T extends privy_users_tokensCreateArgs>(args: SelectSubset<T, privy_users_tokensCreateArgs<ExtArgs>>): Prisma__privy_users_tokensClient<$Result.GetResult<Prisma.$privy_users_tokensPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Privy_users_tokens.
     * @param {privy_users_tokensCreateManyArgs} args - Arguments to create many Privy_users_tokens.
     * @example
     * // Create many Privy_users_tokens
     * const privy_users_tokens = await prisma.privy_users_tokens.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends privy_users_tokensCreateManyArgs>(args?: SelectSubset<T, privy_users_tokensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Privy_users_tokens and returns the data saved in the database.
     * @param {privy_users_tokensCreateManyAndReturnArgs} args - Arguments to create many Privy_users_tokens.
     * @example
     * // Create many Privy_users_tokens
     * const privy_users_tokens = await prisma.privy_users_tokens.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Privy_users_tokens and only return the `id`
     * const privy_users_tokensWithIdOnly = await prisma.privy_users_tokens.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends privy_users_tokensCreateManyAndReturnArgs>(args?: SelectSubset<T, privy_users_tokensCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$privy_users_tokensPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Privy_users_tokens.
     * @param {privy_users_tokensDeleteArgs} args - Arguments to delete one Privy_users_tokens.
     * @example
     * // Delete one Privy_users_tokens
     * const Privy_users_tokens = await prisma.privy_users_tokens.delete({
     *   where: {
     *     // ... filter to delete one Privy_users_tokens
     *   }
     * })
     * 
     */
    delete<T extends privy_users_tokensDeleteArgs>(args: SelectSubset<T, privy_users_tokensDeleteArgs<ExtArgs>>): Prisma__privy_users_tokensClient<$Result.GetResult<Prisma.$privy_users_tokensPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Privy_users_tokens.
     * @param {privy_users_tokensUpdateArgs} args - Arguments to update one Privy_users_tokens.
     * @example
     * // Update one Privy_users_tokens
     * const privy_users_tokens = await prisma.privy_users_tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends privy_users_tokensUpdateArgs>(args: SelectSubset<T, privy_users_tokensUpdateArgs<ExtArgs>>): Prisma__privy_users_tokensClient<$Result.GetResult<Prisma.$privy_users_tokensPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Privy_users_tokens.
     * @param {privy_users_tokensDeleteManyArgs} args - Arguments to filter Privy_users_tokens to delete.
     * @example
     * // Delete a few Privy_users_tokens
     * const { count } = await prisma.privy_users_tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends privy_users_tokensDeleteManyArgs>(args?: SelectSubset<T, privy_users_tokensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Privy_users_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {privy_users_tokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Privy_users_tokens
     * const privy_users_tokens = await prisma.privy_users_tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends privy_users_tokensUpdateManyArgs>(args: SelectSubset<T, privy_users_tokensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Privy_users_tokens and returns the data updated in the database.
     * @param {privy_users_tokensUpdateManyAndReturnArgs} args - Arguments to update many Privy_users_tokens.
     * @example
     * // Update many Privy_users_tokens
     * const privy_users_tokens = await prisma.privy_users_tokens.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Privy_users_tokens and only return the `id`
     * const privy_users_tokensWithIdOnly = await prisma.privy_users_tokens.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends privy_users_tokensUpdateManyAndReturnArgs>(args: SelectSubset<T, privy_users_tokensUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$privy_users_tokensPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Privy_users_tokens.
     * @param {privy_users_tokensUpsertArgs} args - Arguments to update or create a Privy_users_tokens.
     * @example
     * // Update or create a Privy_users_tokens
     * const privy_users_tokens = await prisma.privy_users_tokens.upsert({
     *   create: {
     *     // ... data to create a Privy_users_tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Privy_users_tokens we want to update
     *   }
     * })
     */
    upsert<T extends privy_users_tokensUpsertArgs>(args: SelectSubset<T, privy_users_tokensUpsertArgs<ExtArgs>>): Prisma__privy_users_tokensClient<$Result.GetResult<Prisma.$privy_users_tokensPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Privy_users_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {privy_users_tokensCountArgs} args - Arguments to filter Privy_users_tokens to count.
     * @example
     * // Count the number of Privy_users_tokens
     * const count = await prisma.privy_users_tokens.count({
     *   where: {
     *     // ... the filter for the Privy_users_tokens we want to count
     *   }
     * })
    **/
    count<T extends privy_users_tokensCountArgs>(
      args?: Subset<T, privy_users_tokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Privy_users_tokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Privy_users_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Privy_users_tokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Privy_users_tokensAggregateArgs>(args: Subset<T, Privy_users_tokensAggregateArgs>): Prisma.PrismaPromise<GetPrivy_users_tokensAggregateType<T>>

    /**
     * Group by Privy_users_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {privy_users_tokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends privy_users_tokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: privy_users_tokensGroupByArgs['orderBy'] }
        : { orderBy?: privy_users_tokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, privy_users_tokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrivy_users_tokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the privy_users_tokens model
   */
  readonly fields: privy_users_tokensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for privy_users_tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__privy_users_tokensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the privy_users_tokens model
   */ 
  interface privy_users_tokensFieldRefs {
    readonly id: FieldRef<"privy_users_tokens", 'BigInt'>
    readonly walletAddress: FieldRef<"privy_users_tokens", 'String'>
    readonly tokenAddress: FieldRef<"privy_users_tokens", 'String'>
    readonly balance: FieldRef<"privy_users_tokens", 'BigInt'>
    readonly total_amount: FieldRef<"privy_users_tokens", 'BigInt'>
    readonly token_address: FieldRef<"privy_users_tokens", 'String'>
    readonly wallet_address: FieldRef<"privy_users_tokens", 'String'>
    readonly updated_at: FieldRef<"privy_users_tokens", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * privy_users_tokens findUnique
   */
  export type privy_users_tokensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_users_tokens
     */
    select?: privy_users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_users_tokens
     */
    omit?: privy_users_tokensOmit<ExtArgs> | null
    /**
     * Filter, which privy_users_tokens to fetch.
     */
    where: privy_users_tokensWhereUniqueInput
  }

  /**
   * privy_users_tokens findUniqueOrThrow
   */
  export type privy_users_tokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_users_tokens
     */
    select?: privy_users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_users_tokens
     */
    omit?: privy_users_tokensOmit<ExtArgs> | null
    /**
     * Filter, which privy_users_tokens to fetch.
     */
    where: privy_users_tokensWhereUniqueInput
  }

  /**
   * privy_users_tokens findFirst
   */
  export type privy_users_tokensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_users_tokens
     */
    select?: privy_users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_users_tokens
     */
    omit?: privy_users_tokensOmit<ExtArgs> | null
    /**
     * Filter, which privy_users_tokens to fetch.
     */
    where?: privy_users_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of privy_users_tokens to fetch.
     */
    orderBy?: privy_users_tokensOrderByWithRelationInput | privy_users_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for privy_users_tokens.
     */
    cursor?: privy_users_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` privy_users_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` privy_users_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of privy_users_tokens.
     */
    distinct?: Privy_users_tokensScalarFieldEnum | Privy_users_tokensScalarFieldEnum[]
  }

  /**
   * privy_users_tokens findFirstOrThrow
   */
  export type privy_users_tokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_users_tokens
     */
    select?: privy_users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_users_tokens
     */
    omit?: privy_users_tokensOmit<ExtArgs> | null
    /**
     * Filter, which privy_users_tokens to fetch.
     */
    where?: privy_users_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of privy_users_tokens to fetch.
     */
    orderBy?: privy_users_tokensOrderByWithRelationInput | privy_users_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for privy_users_tokens.
     */
    cursor?: privy_users_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` privy_users_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` privy_users_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of privy_users_tokens.
     */
    distinct?: Privy_users_tokensScalarFieldEnum | Privy_users_tokensScalarFieldEnum[]
  }

  /**
   * privy_users_tokens findMany
   */
  export type privy_users_tokensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_users_tokens
     */
    select?: privy_users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_users_tokens
     */
    omit?: privy_users_tokensOmit<ExtArgs> | null
    /**
     * Filter, which privy_users_tokens to fetch.
     */
    where?: privy_users_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of privy_users_tokens to fetch.
     */
    orderBy?: privy_users_tokensOrderByWithRelationInput | privy_users_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing privy_users_tokens.
     */
    cursor?: privy_users_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` privy_users_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` privy_users_tokens.
     */
    skip?: number
    distinct?: Privy_users_tokensScalarFieldEnum | Privy_users_tokensScalarFieldEnum[]
  }

  /**
   * privy_users_tokens create
   */
  export type privy_users_tokensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_users_tokens
     */
    select?: privy_users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_users_tokens
     */
    omit?: privy_users_tokensOmit<ExtArgs> | null
    /**
     * The data needed to create a privy_users_tokens.
     */
    data: XOR<privy_users_tokensCreateInput, privy_users_tokensUncheckedCreateInput>
  }

  /**
   * privy_users_tokens createMany
   */
  export type privy_users_tokensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many privy_users_tokens.
     */
    data: privy_users_tokensCreateManyInput | privy_users_tokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * privy_users_tokens createManyAndReturn
   */
  export type privy_users_tokensCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_users_tokens
     */
    select?: privy_users_tokensSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the privy_users_tokens
     */
    omit?: privy_users_tokensOmit<ExtArgs> | null
    /**
     * The data used to create many privy_users_tokens.
     */
    data: privy_users_tokensCreateManyInput | privy_users_tokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * privy_users_tokens update
   */
  export type privy_users_tokensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_users_tokens
     */
    select?: privy_users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_users_tokens
     */
    omit?: privy_users_tokensOmit<ExtArgs> | null
    /**
     * The data needed to update a privy_users_tokens.
     */
    data: XOR<privy_users_tokensUpdateInput, privy_users_tokensUncheckedUpdateInput>
    /**
     * Choose, which privy_users_tokens to update.
     */
    where: privy_users_tokensWhereUniqueInput
  }

  /**
   * privy_users_tokens updateMany
   */
  export type privy_users_tokensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update privy_users_tokens.
     */
    data: XOR<privy_users_tokensUpdateManyMutationInput, privy_users_tokensUncheckedUpdateManyInput>
    /**
     * Filter which privy_users_tokens to update
     */
    where?: privy_users_tokensWhereInput
  }

  /**
   * privy_users_tokens updateManyAndReturn
   */
  export type privy_users_tokensUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_users_tokens
     */
    select?: privy_users_tokensSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the privy_users_tokens
     */
    omit?: privy_users_tokensOmit<ExtArgs> | null
    /**
     * The data used to update privy_users_tokens.
     */
    data: XOR<privy_users_tokensUpdateManyMutationInput, privy_users_tokensUncheckedUpdateManyInput>
    /**
     * Filter which privy_users_tokens to update
     */
    where?: privy_users_tokensWhereInput
  }

  /**
   * privy_users_tokens upsert
   */
  export type privy_users_tokensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_users_tokens
     */
    select?: privy_users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_users_tokens
     */
    omit?: privy_users_tokensOmit<ExtArgs> | null
    /**
     * The filter to search for the privy_users_tokens to update in case it exists.
     */
    where: privy_users_tokensWhereUniqueInput
    /**
     * In case the privy_users_tokens found by the `where` argument doesn't exist, create a new privy_users_tokens with this data.
     */
    create: XOR<privy_users_tokensCreateInput, privy_users_tokensUncheckedCreateInput>
    /**
     * In case the privy_users_tokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<privy_users_tokensUpdateInput, privy_users_tokensUncheckedUpdateInput>
  }

  /**
   * privy_users_tokens delete
   */
  export type privy_users_tokensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_users_tokens
     */
    select?: privy_users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_users_tokens
     */
    omit?: privy_users_tokensOmit<ExtArgs> | null
    /**
     * Filter which privy_users_tokens to delete.
     */
    where: privy_users_tokensWhereUniqueInput
  }

  /**
   * privy_users_tokens deleteMany
   */
  export type privy_users_tokensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which privy_users_tokens to delete
     */
    where?: privy_users_tokensWhereInput
  }

  /**
   * privy_users_tokens without action
   */
  export type privy_users_tokensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the privy_users_tokens
     */
    select?: privy_users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the privy_users_tokens
     */
    omit?: privy_users_tokensOmit<ExtArgs> | null
  }


  /**
   * Model problem_trans
   */

  export type AggregateProblem_trans = {
    _count: Problem_transCountAggregateOutputType | null
    _avg: Problem_transAvgAggregateOutputType | null
    _sum: Problem_transSumAggregateOutputType | null
    _min: Problem_transMinAggregateOutputType | null
    _max: Problem_transMaxAggregateOutputType | null
  }

  export type Problem_transAvgAggregateOutputType = {
    id: number | null
    state: number | null
  }

  export type Problem_transSumAggregateOutputType = {
    id: bigint | null
    state: number | null
  }

  export type Problem_transMinAggregateOutputType = {
    id: bigint | null
    signature: string | null
    state: number | null
    source: string | null
    result: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Problem_transMaxAggregateOutputType = {
    id: bigint | null
    signature: string | null
    state: number | null
    source: string | null
    result: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Problem_transCountAggregateOutputType = {
    id: number
    signature: number
    state: number
    source: number
    result: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Problem_transAvgAggregateInputType = {
    id?: true
    state?: true
  }

  export type Problem_transSumAggregateInputType = {
    id?: true
    state?: true
  }

  export type Problem_transMinAggregateInputType = {
    id?: true
    signature?: true
    state?: true
    source?: true
    result?: true
    created_at?: true
    updated_at?: true
  }

  export type Problem_transMaxAggregateInputType = {
    id?: true
    signature?: true
    state?: true
    source?: true
    result?: true
    created_at?: true
    updated_at?: true
  }

  export type Problem_transCountAggregateInputType = {
    id?: true
    signature?: true
    state?: true
    source?: true
    result?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Problem_transAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which problem_trans to aggregate.
     */
    where?: problem_transWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of problem_trans to fetch.
     */
    orderBy?: problem_transOrderByWithRelationInput | problem_transOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: problem_transWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` problem_trans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` problem_trans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned problem_trans
    **/
    _count?: true | Problem_transCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Problem_transAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Problem_transSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Problem_transMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Problem_transMaxAggregateInputType
  }

  export type GetProblem_transAggregateType<T extends Problem_transAggregateArgs> = {
        [P in keyof T & keyof AggregateProblem_trans]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblem_trans[P]>
      : GetScalarType<T[P], AggregateProblem_trans[P]>
  }




  export type problem_transGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: problem_transWhereInput
    orderBy?: problem_transOrderByWithAggregationInput | problem_transOrderByWithAggregationInput[]
    by: Problem_transScalarFieldEnum[] | Problem_transScalarFieldEnum
    having?: problem_transScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Problem_transCountAggregateInputType | true
    _avg?: Problem_transAvgAggregateInputType
    _sum?: Problem_transSumAggregateInputType
    _min?: Problem_transMinAggregateInputType
    _max?: Problem_transMaxAggregateInputType
  }

  export type Problem_transGroupByOutputType = {
    id: bigint
    signature: string
    state: number
    source: string
    result: string | null
    created_at: Date
    updated_at: Date
    _count: Problem_transCountAggregateOutputType | null
    _avg: Problem_transAvgAggregateOutputType | null
    _sum: Problem_transSumAggregateOutputType | null
    _min: Problem_transMinAggregateOutputType | null
    _max: Problem_transMaxAggregateOutputType | null
  }

  type GetProblem_transGroupByPayload<T extends problem_transGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Problem_transGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Problem_transGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Problem_transGroupByOutputType[P]>
            : GetScalarType<T[P], Problem_transGroupByOutputType[P]>
        }
      >
    >


  export type problem_transSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signature?: boolean
    state?: boolean
    source?: boolean
    result?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["problem_trans"]>

  export type problem_transSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signature?: boolean
    state?: boolean
    source?: boolean
    result?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["problem_trans"]>

  export type problem_transSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signature?: boolean
    state?: boolean
    source?: boolean
    result?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["problem_trans"]>

  export type problem_transSelectScalar = {
    id?: boolean
    signature?: boolean
    state?: boolean
    source?: boolean
    result?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type problem_transOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "signature" | "state" | "source" | "result" | "created_at" | "updated_at", ExtArgs["result"]["problem_trans"]>

  export type $problem_transPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "problem_trans"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      signature: string
      state: number
      source: string
      result: string | null
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["problem_trans"]>
    composites: {}
  }

  type problem_transGetPayload<S extends boolean | null | undefined | problem_transDefaultArgs> = $Result.GetResult<Prisma.$problem_transPayload, S>

  type problem_transCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<problem_transFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Problem_transCountAggregateInputType | true
    }

  export interface problem_transDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['problem_trans'], meta: { name: 'problem_trans' } }
    /**
     * Find zero or one Problem_trans that matches the filter.
     * @param {problem_transFindUniqueArgs} args - Arguments to find a Problem_trans
     * @example
     * // Get one Problem_trans
     * const problem_trans = await prisma.problem_trans.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends problem_transFindUniqueArgs>(args: SelectSubset<T, problem_transFindUniqueArgs<ExtArgs>>): Prisma__problem_transClient<$Result.GetResult<Prisma.$problem_transPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Problem_trans that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {problem_transFindUniqueOrThrowArgs} args - Arguments to find a Problem_trans
     * @example
     * // Get one Problem_trans
     * const problem_trans = await prisma.problem_trans.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends problem_transFindUniqueOrThrowArgs>(args: SelectSubset<T, problem_transFindUniqueOrThrowArgs<ExtArgs>>): Prisma__problem_transClient<$Result.GetResult<Prisma.$problem_transPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Problem_trans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {problem_transFindFirstArgs} args - Arguments to find a Problem_trans
     * @example
     * // Get one Problem_trans
     * const problem_trans = await prisma.problem_trans.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends problem_transFindFirstArgs>(args?: SelectSubset<T, problem_transFindFirstArgs<ExtArgs>>): Prisma__problem_transClient<$Result.GetResult<Prisma.$problem_transPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Problem_trans that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {problem_transFindFirstOrThrowArgs} args - Arguments to find a Problem_trans
     * @example
     * // Get one Problem_trans
     * const problem_trans = await prisma.problem_trans.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends problem_transFindFirstOrThrowArgs>(args?: SelectSubset<T, problem_transFindFirstOrThrowArgs<ExtArgs>>): Prisma__problem_transClient<$Result.GetResult<Prisma.$problem_transPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Problem_trans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {problem_transFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Problem_trans
     * const problem_trans = await prisma.problem_trans.findMany()
     * 
     * // Get first 10 Problem_trans
     * const problem_trans = await prisma.problem_trans.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problem_transWithIdOnly = await prisma.problem_trans.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends problem_transFindManyArgs>(args?: SelectSubset<T, problem_transFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$problem_transPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Problem_trans.
     * @param {problem_transCreateArgs} args - Arguments to create a Problem_trans.
     * @example
     * // Create one Problem_trans
     * const Problem_trans = await prisma.problem_trans.create({
     *   data: {
     *     // ... data to create a Problem_trans
     *   }
     * })
     * 
     */
    create<T extends problem_transCreateArgs>(args: SelectSubset<T, problem_transCreateArgs<ExtArgs>>): Prisma__problem_transClient<$Result.GetResult<Prisma.$problem_transPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Problem_trans.
     * @param {problem_transCreateManyArgs} args - Arguments to create many Problem_trans.
     * @example
     * // Create many Problem_trans
     * const problem_trans = await prisma.problem_trans.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends problem_transCreateManyArgs>(args?: SelectSubset<T, problem_transCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Problem_trans and returns the data saved in the database.
     * @param {problem_transCreateManyAndReturnArgs} args - Arguments to create many Problem_trans.
     * @example
     * // Create many Problem_trans
     * const problem_trans = await prisma.problem_trans.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Problem_trans and only return the `id`
     * const problem_transWithIdOnly = await prisma.problem_trans.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends problem_transCreateManyAndReturnArgs>(args?: SelectSubset<T, problem_transCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$problem_transPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Problem_trans.
     * @param {problem_transDeleteArgs} args - Arguments to delete one Problem_trans.
     * @example
     * // Delete one Problem_trans
     * const Problem_trans = await prisma.problem_trans.delete({
     *   where: {
     *     // ... filter to delete one Problem_trans
     *   }
     * })
     * 
     */
    delete<T extends problem_transDeleteArgs>(args: SelectSubset<T, problem_transDeleteArgs<ExtArgs>>): Prisma__problem_transClient<$Result.GetResult<Prisma.$problem_transPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Problem_trans.
     * @param {problem_transUpdateArgs} args - Arguments to update one Problem_trans.
     * @example
     * // Update one Problem_trans
     * const problem_trans = await prisma.problem_trans.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends problem_transUpdateArgs>(args: SelectSubset<T, problem_transUpdateArgs<ExtArgs>>): Prisma__problem_transClient<$Result.GetResult<Prisma.$problem_transPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Problem_trans.
     * @param {problem_transDeleteManyArgs} args - Arguments to filter Problem_trans to delete.
     * @example
     * // Delete a few Problem_trans
     * const { count } = await prisma.problem_trans.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends problem_transDeleteManyArgs>(args?: SelectSubset<T, problem_transDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Problem_trans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {problem_transUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Problem_trans
     * const problem_trans = await prisma.problem_trans.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends problem_transUpdateManyArgs>(args: SelectSubset<T, problem_transUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Problem_trans and returns the data updated in the database.
     * @param {problem_transUpdateManyAndReturnArgs} args - Arguments to update many Problem_trans.
     * @example
     * // Update many Problem_trans
     * const problem_trans = await prisma.problem_trans.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Problem_trans and only return the `id`
     * const problem_transWithIdOnly = await prisma.problem_trans.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends problem_transUpdateManyAndReturnArgs>(args: SelectSubset<T, problem_transUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$problem_transPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Problem_trans.
     * @param {problem_transUpsertArgs} args - Arguments to update or create a Problem_trans.
     * @example
     * // Update or create a Problem_trans
     * const problem_trans = await prisma.problem_trans.upsert({
     *   create: {
     *     // ... data to create a Problem_trans
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Problem_trans we want to update
     *   }
     * })
     */
    upsert<T extends problem_transUpsertArgs>(args: SelectSubset<T, problem_transUpsertArgs<ExtArgs>>): Prisma__problem_transClient<$Result.GetResult<Prisma.$problem_transPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Problem_trans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {problem_transCountArgs} args - Arguments to filter Problem_trans to count.
     * @example
     * // Count the number of Problem_trans
     * const count = await prisma.problem_trans.count({
     *   where: {
     *     // ... the filter for the Problem_trans we want to count
     *   }
     * })
    **/
    count<T extends problem_transCountArgs>(
      args?: Subset<T, problem_transCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Problem_transCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Problem_trans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Problem_transAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Problem_transAggregateArgs>(args: Subset<T, Problem_transAggregateArgs>): Prisma.PrismaPromise<GetProblem_transAggregateType<T>>

    /**
     * Group by Problem_trans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {problem_transGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends problem_transGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: problem_transGroupByArgs['orderBy'] }
        : { orderBy?: problem_transGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, problem_transGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblem_transGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the problem_trans model
   */
  readonly fields: problem_transFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for problem_trans.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__problem_transClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the problem_trans model
   */ 
  interface problem_transFieldRefs {
    readonly id: FieldRef<"problem_trans", 'BigInt'>
    readonly signature: FieldRef<"problem_trans", 'String'>
    readonly state: FieldRef<"problem_trans", 'Int'>
    readonly source: FieldRef<"problem_trans", 'String'>
    readonly result: FieldRef<"problem_trans", 'String'>
    readonly created_at: FieldRef<"problem_trans", 'DateTime'>
    readonly updated_at: FieldRef<"problem_trans", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * problem_trans findUnique
   */
  export type problem_transFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the problem_trans
     */
    select?: problem_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the problem_trans
     */
    omit?: problem_transOmit<ExtArgs> | null
    /**
     * Filter, which problem_trans to fetch.
     */
    where: problem_transWhereUniqueInput
  }

  /**
   * problem_trans findUniqueOrThrow
   */
  export type problem_transFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the problem_trans
     */
    select?: problem_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the problem_trans
     */
    omit?: problem_transOmit<ExtArgs> | null
    /**
     * Filter, which problem_trans to fetch.
     */
    where: problem_transWhereUniqueInput
  }

  /**
   * problem_trans findFirst
   */
  export type problem_transFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the problem_trans
     */
    select?: problem_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the problem_trans
     */
    omit?: problem_transOmit<ExtArgs> | null
    /**
     * Filter, which problem_trans to fetch.
     */
    where?: problem_transWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of problem_trans to fetch.
     */
    orderBy?: problem_transOrderByWithRelationInput | problem_transOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for problem_trans.
     */
    cursor?: problem_transWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` problem_trans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` problem_trans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of problem_trans.
     */
    distinct?: Problem_transScalarFieldEnum | Problem_transScalarFieldEnum[]
  }

  /**
   * problem_trans findFirstOrThrow
   */
  export type problem_transFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the problem_trans
     */
    select?: problem_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the problem_trans
     */
    omit?: problem_transOmit<ExtArgs> | null
    /**
     * Filter, which problem_trans to fetch.
     */
    where?: problem_transWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of problem_trans to fetch.
     */
    orderBy?: problem_transOrderByWithRelationInput | problem_transOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for problem_trans.
     */
    cursor?: problem_transWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` problem_trans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` problem_trans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of problem_trans.
     */
    distinct?: Problem_transScalarFieldEnum | Problem_transScalarFieldEnum[]
  }

  /**
   * problem_trans findMany
   */
  export type problem_transFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the problem_trans
     */
    select?: problem_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the problem_trans
     */
    omit?: problem_transOmit<ExtArgs> | null
    /**
     * Filter, which problem_trans to fetch.
     */
    where?: problem_transWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of problem_trans to fetch.
     */
    orderBy?: problem_transOrderByWithRelationInput | problem_transOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing problem_trans.
     */
    cursor?: problem_transWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` problem_trans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` problem_trans.
     */
    skip?: number
    distinct?: Problem_transScalarFieldEnum | Problem_transScalarFieldEnum[]
  }

  /**
   * problem_trans create
   */
  export type problem_transCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the problem_trans
     */
    select?: problem_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the problem_trans
     */
    omit?: problem_transOmit<ExtArgs> | null
    /**
     * The data needed to create a problem_trans.
     */
    data: XOR<problem_transCreateInput, problem_transUncheckedCreateInput>
  }

  /**
   * problem_trans createMany
   */
  export type problem_transCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many problem_trans.
     */
    data: problem_transCreateManyInput | problem_transCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * problem_trans createManyAndReturn
   */
  export type problem_transCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the problem_trans
     */
    select?: problem_transSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the problem_trans
     */
    omit?: problem_transOmit<ExtArgs> | null
    /**
     * The data used to create many problem_trans.
     */
    data: problem_transCreateManyInput | problem_transCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * problem_trans update
   */
  export type problem_transUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the problem_trans
     */
    select?: problem_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the problem_trans
     */
    omit?: problem_transOmit<ExtArgs> | null
    /**
     * The data needed to update a problem_trans.
     */
    data: XOR<problem_transUpdateInput, problem_transUncheckedUpdateInput>
    /**
     * Choose, which problem_trans to update.
     */
    where: problem_transWhereUniqueInput
  }

  /**
   * problem_trans updateMany
   */
  export type problem_transUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update problem_trans.
     */
    data: XOR<problem_transUpdateManyMutationInput, problem_transUncheckedUpdateManyInput>
    /**
     * Filter which problem_trans to update
     */
    where?: problem_transWhereInput
  }

  /**
   * problem_trans updateManyAndReturn
   */
  export type problem_transUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the problem_trans
     */
    select?: problem_transSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the problem_trans
     */
    omit?: problem_transOmit<ExtArgs> | null
    /**
     * The data used to update problem_trans.
     */
    data: XOR<problem_transUpdateManyMutationInput, problem_transUncheckedUpdateManyInput>
    /**
     * Filter which problem_trans to update
     */
    where?: problem_transWhereInput
  }

  /**
   * problem_trans upsert
   */
  export type problem_transUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the problem_trans
     */
    select?: problem_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the problem_trans
     */
    omit?: problem_transOmit<ExtArgs> | null
    /**
     * The filter to search for the problem_trans to update in case it exists.
     */
    where: problem_transWhereUniqueInput
    /**
     * In case the problem_trans found by the `where` argument doesn't exist, create a new problem_trans with this data.
     */
    create: XOR<problem_transCreateInput, problem_transUncheckedCreateInput>
    /**
     * In case the problem_trans was found with the provided `where` argument, update it with this data.
     */
    update: XOR<problem_transUpdateInput, problem_transUncheckedUpdateInput>
  }

  /**
   * problem_trans delete
   */
  export type problem_transDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the problem_trans
     */
    select?: problem_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the problem_trans
     */
    omit?: problem_transOmit<ExtArgs> | null
    /**
     * Filter which problem_trans to delete.
     */
    where: problem_transWhereUniqueInput
  }

  /**
   * problem_trans deleteMany
   */
  export type problem_transDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which problem_trans to delete
     */
    where?: problem_transWhereInput
  }

  /**
   * problem_trans without action
   */
  export type problem_transDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the problem_trans
     */
    select?: problem_transSelect<ExtArgs> | null
    /**
     * Omit specific fields from the problem_trans
     */
    omit?: problem_transOmit<ExtArgs> | null
  }


  /**
   * Model sol_price
   */

  export type AggregateSol_price = {
    _count: Sol_priceCountAggregateOutputType | null
    _avg: Sol_priceAvgAggregateOutputType | null
    _sum: Sol_priceSumAggregateOutputType | null
    _min: Sol_priceMinAggregateOutputType | null
    _max: Sol_priceMaxAggregateOutputType | null
  }

  export type Sol_priceAvgAggregateOutputType = {
    id: number | null
    time: number | null
  }

  export type Sol_priceSumAggregateOutputType = {
    id: number | null
    time: number | null
  }

  export type Sol_priceMinAggregateOutputType = {
    id: number | null
    price: string | null
    time: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Sol_priceMaxAggregateOutputType = {
    id: number | null
    price: string | null
    time: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Sol_priceCountAggregateOutputType = {
    id: number
    price: number
    time: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Sol_priceAvgAggregateInputType = {
    id?: true
    time?: true
  }

  export type Sol_priceSumAggregateInputType = {
    id?: true
    time?: true
  }

  export type Sol_priceMinAggregateInputType = {
    id?: true
    price?: true
    time?: true
    created_at?: true
    updated_at?: true
  }

  export type Sol_priceMaxAggregateInputType = {
    id?: true
    price?: true
    time?: true
    created_at?: true
    updated_at?: true
  }

  export type Sol_priceCountAggregateInputType = {
    id?: true
    price?: true
    time?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Sol_priceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sol_price to aggregate.
     */
    where?: sol_priceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sol_prices to fetch.
     */
    orderBy?: sol_priceOrderByWithRelationInput | sol_priceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sol_priceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sol_prices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sol_prices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sol_prices
    **/
    _count?: true | Sol_priceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Sol_priceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Sol_priceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Sol_priceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Sol_priceMaxAggregateInputType
  }

  export type GetSol_priceAggregateType<T extends Sol_priceAggregateArgs> = {
        [P in keyof T & keyof AggregateSol_price]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSol_price[P]>
      : GetScalarType<T[P], AggregateSol_price[P]>
  }




  export type sol_priceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sol_priceWhereInput
    orderBy?: sol_priceOrderByWithAggregationInput | sol_priceOrderByWithAggregationInput[]
    by: Sol_priceScalarFieldEnum[] | Sol_priceScalarFieldEnum
    having?: sol_priceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Sol_priceCountAggregateInputType | true
    _avg?: Sol_priceAvgAggregateInputType
    _sum?: Sol_priceSumAggregateInputType
    _min?: Sol_priceMinAggregateInputType
    _max?: Sol_priceMaxAggregateInputType
  }

  export type Sol_priceGroupByOutputType = {
    id: number
    price: string
    time: number
    created_at: Date
    updated_at: Date
    _count: Sol_priceCountAggregateOutputType | null
    _avg: Sol_priceAvgAggregateOutputType | null
    _sum: Sol_priceSumAggregateOutputType | null
    _min: Sol_priceMinAggregateOutputType | null
    _max: Sol_priceMaxAggregateOutputType | null
  }

  type GetSol_priceGroupByPayload<T extends sol_priceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Sol_priceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Sol_priceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Sol_priceGroupByOutputType[P]>
            : GetScalarType<T[P], Sol_priceGroupByOutputType[P]>
        }
      >
    >


  export type sol_priceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    price?: boolean
    time?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["sol_price"]>

  export type sol_priceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    price?: boolean
    time?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["sol_price"]>

  export type sol_priceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    price?: boolean
    time?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["sol_price"]>

  export type sol_priceSelectScalar = {
    id?: boolean
    price?: boolean
    time?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type sol_priceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "price" | "time" | "created_at" | "updated_at", ExtArgs["result"]["sol_price"]>

  export type $sol_pricePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "sol_price"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      price: string
      time: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["sol_price"]>
    composites: {}
  }

  type sol_priceGetPayload<S extends boolean | null | undefined | sol_priceDefaultArgs> = $Result.GetResult<Prisma.$sol_pricePayload, S>

  type sol_priceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<sol_priceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Sol_priceCountAggregateInputType | true
    }

  export interface sol_priceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sol_price'], meta: { name: 'sol_price' } }
    /**
     * Find zero or one Sol_price that matches the filter.
     * @param {sol_priceFindUniqueArgs} args - Arguments to find a Sol_price
     * @example
     * // Get one Sol_price
     * const sol_price = await prisma.sol_price.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends sol_priceFindUniqueArgs>(args: SelectSubset<T, sol_priceFindUniqueArgs<ExtArgs>>): Prisma__sol_priceClient<$Result.GetResult<Prisma.$sol_pricePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Sol_price that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {sol_priceFindUniqueOrThrowArgs} args - Arguments to find a Sol_price
     * @example
     * // Get one Sol_price
     * const sol_price = await prisma.sol_price.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends sol_priceFindUniqueOrThrowArgs>(args: SelectSubset<T, sol_priceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__sol_priceClient<$Result.GetResult<Prisma.$sol_pricePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Sol_price that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sol_priceFindFirstArgs} args - Arguments to find a Sol_price
     * @example
     * // Get one Sol_price
     * const sol_price = await prisma.sol_price.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends sol_priceFindFirstArgs>(args?: SelectSubset<T, sol_priceFindFirstArgs<ExtArgs>>): Prisma__sol_priceClient<$Result.GetResult<Prisma.$sol_pricePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Sol_price that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sol_priceFindFirstOrThrowArgs} args - Arguments to find a Sol_price
     * @example
     * // Get one Sol_price
     * const sol_price = await prisma.sol_price.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends sol_priceFindFirstOrThrowArgs>(args?: SelectSubset<T, sol_priceFindFirstOrThrowArgs<ExtArgs>>): Prisma__sol_priceClient<$Result.GetResult<Prisma.$sol_pricePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Sol_prices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sol_priceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sol_prices
     * const sol_prices = await prisma.sol_price.findMany()
     * 
     * // Get first 10 Sol_prices
     * const sol_prices = await prisma.sol_price.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sol_priceWithIdOnly = await prisma.sol_price.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends sol_priceFindManyArgs>(args?: SelectSubset<T, sol_priceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sol_pricePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Sol_price.
     * @param {sol_priceCreateArgs} args - Arguments to create a Sol_price.
     * @example
     * // Create one Sol_price
     * const Sol_price = await prisma.sol_price.create({
     *   data: {
     *     // ... data to create a Sol_price
     *   }
     * })
     * 
     */
    create<T extends sol_priceCreateArgs>(args: SelectSubset<T, sol_priceCreateArgs<ExtArgs>>): Prisma__sol_priceClient<$Result.GetResult<Prisma.$sol_pricePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Sol_prices.
     * @param {sol_priceCreateManyArgs} args - Arguments to create many Sol_prices.
     * @example
     * // Create many Sol_prices
     * const sol_price = await prisma.sol_price.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends sol_priceCreateManyArgs>(args?: SelectSubset<T, sol_priceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sol_prices and returns the data saved in the database.
     * @param {sol_priceCreateManyAndReturnArgs} args - Arguments to create many Sol_prices.
     * @example
     * // Create many Sol_prices
     * const sol_price = await prisma.sol_price.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sol_prices and only return the `id`
     * const sol_priceWithIdOnly = await prisma.sol_price.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends sol_priceCreateManyAndReturnArgs>(args?: SelectSubset<T, sol_priceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sol_pricePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Sol_price.
     * @param {sol_priceDeleteArgs} args - Arguments to delete one Sol_price.
     * @example
     * // Delete one Sol_price
     * const Sol_price = await prisma.sol_price.delete({
     *   where: {
     *     // ... filter to delete one Sol_price
     *   }
     * })
     * 
     */
    delete<T extends sol_priceDeleteArgs>(args: SelectSubset<T, sol_priceDeleteArgs<ExtArgs>>): Prisma__sol_priceClient<$Result.GetResult<Prisma.$sol_pricePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Sol_price.
     * @param {sol_priceUpdateArgs} args - Arguments to update one Sol_price.
     * @example
     * // Update one Sol_price
     * const sol_price = await prisma.sol_price.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends sol_priceUpdateArgs>(args: SelectSubset<T, sol_priceUpdateArgs<ExtArgs>>): Prisma__sol_priceClient<$Result.GetResult<Prisma.$sol_pricePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Sol_prices.
     * @param {sol_priceDeleteManyArgs} args - Arguments to filter Sol_prices to delete.
     * @example
     * // Delete a few Sol_prices
     * const { count } = await prisma.sol_price.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends sol_priceDeleteManyArgs>(args?: SelectSubset<T, sol_priceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sol_prices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sol_priceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sol_prices
     * const sol_price = await prisma.sol_price.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends sol_priceUpdateManyArgs>(args: SelectSubset<T, sol_priceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sol_prices and returns the data updated in the database.
     * @param {sol_priceUpdateManyAndReturnArgs} args - Arguments to update many Sol_prices.
     * @example
     * // Update many Sol_prices
     * const sol_price = await prisma.sol_price.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sol_prices and only return the `id`
     * const sol_priceWithIdOnly = await prisma.sol_price.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends sol_priceUpdateManyAndReturnArgs>(args: SelectSubset<T, sol_priceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sol_pricePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Sol_price.
     * @param {sol_priceUpsertArgs} args - Arguments to update or create a Sol_price.
     * @example
     * // Update or create a Sol_price
     * const sol_price = await prisma.sol_price.upsert({
     *   create: {
     *     // ... data to create a Sol_price
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sol_price we want to update
     *   }
     * })
     */
    upsert<T extends sol_priceUpsertArgs>(args: SelectSubset<T, sol_priceUpsertArgs<ExtArgs>>): Prisma__sol_priceClient<$Result.GetResult<Prisma.$sol_pricePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Sol_prices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sol_priceCountArgs} args - Arguments to filter Sol_prices to count.
     * @example
     * // Count the number of Sol_prices
     * const count = await prisma.sol_price.count({
     *   where: {
     *     // ... the filter for the Sol_prices we want to count
     *   }
     * })
    **/
    count<T extends sol_priceCountArgs>(
      args?: Subset<T, sol_priceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Sol_priceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sol_price.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Sol_priceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Sol_priceAggregateArgs>(args: Subset<T, Sol_priceAggregateArgs>): Prisma.PrismaPromise<GetSol_priceAggregateType<T>>

    /**
     * Group by Sol_price.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sol_priceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sol_priceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sol_priceGroupByArgs['orderBy'] }
        : { orderBy?: sol_priceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sol_priceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSol_priceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sol_price model
   */
  readonly fields: sol_priceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sol_price.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sol_priceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the sol_price model
   */ 
  interface sol_priceFieldRefs {
    readonly id: FieldRef<"sol_price", 'Int'>
    readonly price: FieldRef<"sol_price", 'String'>
    readonly time: FieldRef<"sol_price", 'Int'>
    readonly created_at: FieldRef<"sol_price", 'DateTime'>
    readonly updated_at: FieldRef<"sol_price", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * sol_price findUnique
   */
  export type sol_priceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sol_price
     */
    select?: sol_priceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sol_price
     */
    omit?: sol_priceOmit<ExtArgs> | null
    /**
     * Filter, which sol_price to fetch.
     */
    where: sol_priceWhereUniqueInput
  }

  /**
   * sol_price findUniqueOrThrow
   */
  export type sol_priceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sol_price
     */
    select?: sol_priceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sol_price
     */
    omit?: sol_priceOmit<ExtArgs> | null
    /**
     * Filter, which sol_price to fetch.
     */
    where: sol_priceWhereUniqueInput
  }

  /**
   * sol_price findFirst
   */
  export type sol_priceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sol_price
     */
    select?: sol_priceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sol_price
     */
    omit?: sol_priceOmit<ExtArgs> | null
    /**
     * Filter, which sol_price to fetch.
     */
    where?: sol_priceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sol_prices to fetch.
     */
    orderBy?: sol_priceOrderByWithRelationInput | sol_priceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sol_prices.
     */
    cursor?: sol_priceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sol_prices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sol_prices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sol_prices.
     */
    distinct?: Sol_priceScalarFieldEnum | Sol_priceScalarFieldEnum[]
  }

  /**
   * sol_price findFirstOrThrow
   */
  export type sol_priceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sol_price
     */
    select?: sol_priceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sol_price
     */
    omit?: sol_priceOmit<ExtArgs> | null
    /**
     * Filter, which sol_price to fetch.
     */
    where?: sol_priceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sol_prices to fetch.
     */
    orderBy?: sol_priceOrderByWithRelationInput | sol_priceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sol_prices.
     */
    cursor?: sol_priceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sol_prices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sol_prices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sol_prices.
     */
    distinct?: Sol_priceScalarFieldEnum | Sol_priceScalarFieldEnum[]
  }

  /**
   * sol_price findMany
   */
  export type sol_priceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sol_price
     */
    select?: sol_priceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sol_price
     */
    omit?: sol_priceOmit<ExtArgs> | null
    /**
     * Filter, which sol_prices to fetch.
     */
    where?: sol_priceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sol_prices to fetch.
     */
    orderBy?: sol_priceOrderByWithRelationInput | sol_priceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sol_prices.
     */
    cursor?: sol_priceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sol_prices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sol_prices.
     */
    skip?: number
    distinct?: Sol_priceScalarFieldEnum | Sol_priceScalarFieldEnum[]
  }

  /**
   * sol_price create
   */
  export type sol_priceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sol_price
     */
    select?: sol_priceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sol_price
     */
    omit?: sol_priceOmit<ExtArgs> | null
    /**
     * The data needed to create a sol_price.
     */
    data?: XOR<sol_priceCreateInput, sol_priceUncheckedCreateInput>
  }

  /**
   * sol_price createMany
   */
  export type sol_priceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sol_prices.
     */
    data: sol_priceCreateManyInput | sol_priceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * sol_price createManyAndReturn
   */
  export type sol_priceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sol_price
     */
    select?: sol_priceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the sol_price
     */
    omit?: sol_priceOmit<ExtArgs> | null
    /**
     * The data used to create many sol_prices.
     */
    data: sol_priceCreateManyInput | sol_priceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * sol_price update
   */
  export type sol_priceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sol_price
     */
    select?: sol_priceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sol_price
     */
    omit?: sol_priceOmit<ExtArgs> | null
    /**
     * The data needed to update a sol_price.
     */
    data: XOR<sol_priceUpdateInput, sol_priceUncheckedUpdateInput>
    /**
     * Choose, which sol_price to update.
     */
    where: sol_priceWhereUniqueInput
  }

  /**
   * sol_price updateMany
   */
  export type sol_priceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sol_prices.
     */
    data: XOR<sol_priceUpdateManyMutationInput, sol_priceUncheckedUpdateManyInput>
    /**
     * Filter which sol_prices to update
     */
    where?: sol_priceWhereInput
  }

  /**
   * sol_price updateManyAndReturn
   */
  export type sol_priceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sol_price
     */
    select?: sol_priceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the sol_price
     */
    omit?: sol_priceOmit<ExtArgs> | null
    /**
     * The data used to update sol_prices.
     */
    data: XOR<sol_priceUpdateManyMutationInput, sol_priceUncheckedUpdateManyInput>
    /**
     * Filter which sol_prices to update
     */
    where?: sol_priceWhereInput
  }

  /**
   * sol_price upsert
   */
  export type sol_priceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sol_price
     */
    select?: sol_priceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sol_price
     */
    omit?: sol_priceOmit<ExtArgs> | null
    /**
     * The filter to search for the sol_price to update in case it exists.
     */
    where: sol_priceWhereUniqueInput
    /**
     * In case the sol_price found by the `where` argument doesn't exist, create a new sol_price with this data.
     */
    create: XOR<sol_priceCreateInput, sol_priceUncheckedCreateInput>
    /**
     * In case the sol_price was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sol_priceUpdateInput, sol_priceUncheckedUpdateInput>
  }

  /**
   * sol_price delete
   */
  export type sol_priceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sol_price
     */
    select?: sol_priceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sol_price
     */
    omit?: sol_priceOmit<ExtArgs> | null
    /**
     * Filter which sol_price to delete.
     */
    where: sol_priceWhereUniqueInput
  }

  /**
   * sol_price deleteMany
   */
  export type sol_priceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sol_prices to delete
     */
    where?: sol_priceWhereInput
  }

  /**
   * sol_price without action
   */
  export type sol_priceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sol_price
     */
    select?: sol_priceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sol_price
     */
    omit?: sol_priceOmit<ExtArgs> | null
  }


  /**
   * Model sorted_tags
   */

  export type AggregateSorted_tags = {
    _count: Sorted_tagsCountAggregateOutputType | null
    _avg: Sorted_tagsAvgAggregateOutputType | null
    _sum: Sorted_tagsSumAggregateOutputType | null
    _min: Sorted_tagsMinAggregateOutputType | null
    _max: Sorted_tagsMaxAggregateOutputType | null
  }

  export type Sorted_tagsAvgAggregateOutputType = {
    id: number | null
    amount: number | null
  }

  export type Sorted_tagsSumAggregateOutputType = {
    id: number | null
    amount: number | null
  }

  export type Sorted_tagsMinAggregateOutputType = {
    id: number | null
    tag: string | null
    amount: number | null
    created_at: Date | null
    wallet: string | null
    updated_at: Date | null
  }

  export type Sorted_tagsMaxAggregateOutputType = {
    id: number | null
    tag: string | null
    amount: number | null
    created_at: Date | null
    wallet: string | null
    updated_at: Date | null
  }

  export type Sorted_tagsCountAggregateOutputType = {
    id: number
    tag: number
    amount: number
    created_at: number
    wallet: number
    updated_at: number
    _all: number
  }


  export type Sorted_tagsAvgAggregateInputType = {
    id?: true
    amount?: true
  }

  export type Sorted_tagsSumAggregateInputType = {
    id?: true
    amount?: true
  }

  export type Sorted_tagsMinAggregateInputType = {
    id?: true
    tag?: true
    amount?: true
    created_at?: true
    wallet?: true
    updated_at?: true
  }

  export type Sorted_tagsMaxAggregateInputType = {
    id?: true
    tag?: true
    amount?: true
    created_at?: true
    wallet?: true
    updated_at?: true
  }

  export type Sorted_tagsCountAggregateInputType = {
    id?: true
    tag?: true
    amount?: true
    created_at?: true
    wallet?: true
    updated_at?: true
    _all?: true
  }

  export type Sorted_tagsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sorted_tags to aggregate.
     */
    where?: sorted_tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sorted_tags to fetch.
     */
    orderBy?: sorted_tagsOrderByWithRelationInput | sorted_tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sorted_tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sorted_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sorted_tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sorted_tags
    **/
    _count?: true | Sorted_tagsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Sorted_tagsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Sorted_tagsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Sorted_tagsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Sorted_tagsMaxAggregateInputType
  }

  export type GetSorted_tagsAggregateType<T extends Sorted_tagsAggregateArgs> = {
        [P in keyof T & keyof AggregateSorted_tags]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSorted_tags[P]>
      : GetScalarType<T[P], AggregateSorted_tags[P]>
  }




  export type sorted_tagsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sorted_tagsWhereInput
    orderBy?: sorted_tagsOrderByWithAggregationInput | sorted_tagsOrderByWithAggregationInput[]
    by: Sorted_tagsScalarFieldEnum[] | Sorted_tagsScalarFieldEnum
    having?: sorted_tagsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Sorted_tagsCountAggregateInputType | true
    _avg?: Sorted_tagsAvgAggregateInputType
    _sum?: Sorted_tagsSumAggregateInputType
    _min?: Sorted_tagsMinAggregateInputType
    _max?: Sorted_tagsMaxAggregateInputType
  }

  export type Sorted_tagsGroupByOutputType = {
    id: number
    tag: string
    amount: number
    created_at: Date
    wallet: string
    updated_at: Date
    _count: Sorted_tagsCountAggregateOutputType | null
    _avg: Sorted_tagsAvgAggregateOutputType | null
    _sum: Sorted_tagsSumAggregateOutputType | null
    _min: Sorted_tagsMinAggregateOutputType | null
    _max: Sorted_tagsMaxAggregateOutputType | null
  }

  type GetSorted_tagsGroupByPayload<T extends sorted_tagsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Sorted_tagsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Sorted_tagsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Sorted_tagsGroupByOutputType[P]>
            : GetScalarType<T[P], Sorted_tagsGroupByOutputType[P]>
        }
      >
    >


  export type sorted_tagsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag?: boolean
    amount?: boolean
    created_at?: boolean
    wallet?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["sorted_tags"]>

  export type sorted_tagsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag?: boolean
    amount?: boolean
    created_at?: boolean
    wallet?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["sorted_tags"]>

  export type sorted_tagsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tag?: boolean
    amount?: boolean
    created_at?: boolean
    wallet?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["sorted_tags"]>

  export type sorted_tagsSelectScalar = {
    id?: boolean
    tag?: boolean
    amount?: boolean
    created_at?: boolean
    wallet?: boolean
    updated_at?: boolean
  }

  export type sorted_tagsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tag" | "amount" | "created_at" | "wallet" | "updated_at", ExtArgs["result"]["sorted_tags"]>

  export type $sorted_tagsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "sorted_tags"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tag: string
      amount: number
      created_at: Date
      wallet: string
      updated_at: Date
    }, ExtArgs["result"]["sorted_tags"]>
    composites: {}
  }

  type sorted_tagsGetPayload<S extends boolean | null | undefined | sorted_tagsDefaultArgs> = $Result.GetResult<Prisma.$sorted_tagsPayload, S>

  type sorted_tagsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<sorted_tagsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Sorted_tagsCountAggregateInputType | true
    }

  export interface sorted_tagsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sorted_tags'], meta: { name: 'sorted_tags' } }
    /**
     * Find zero or one Sorted_tags that matches the filter.
     * @param {sorted_tagsFindUniqueArgs} args - Arguments to find a Sorted_tags
     * @example
     * // Get one Sorted_tags
     * const sorted_tags = await prisma.sorted_tags.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends sorted_tagsFindUniqueArgs>(args: SelectSubset<T, sorted_tagsFindUniqueArgs<ExtArgs>>): Prisma__sorted_tagsClient<$Result.GetResult<Prisma.$sorted_tagsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Sorted_tags that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {sorted_tagsFindUniqueOrThrowArgs} args - Arguments to find a Sorted_tags
     * @example
     * // Get one Sorted_tags
     * const sorted_tags = await prisma.sorted_tags.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends sorted_tagsFindUniqueOrThrowArgs>(args: SelectSubset<T, sorted_tagsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__sorted_tagsClient<$Result.GetResult<Prisma.$sorted_tagsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Sorted_tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sorted_tagsFindFirstArgs} args - Arguments to find a Sorted_tags
     * @example
     * // Get one Sorted_tags
     * const sorted_tags = await prisma.sorted_tags.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends sorted_tagsFindFirstArgs>(args?: SelectSubset<T, sorted_tagsFindFirstArgs<ExtArgs>>): Prisma__sorted_tagsClient<$Result.GetResult<Prisma.$sorted_tagsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Sorted_tags that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sorted_tagsFindFirstOrThrowArgs} args - Arguments to find a Sorted_tags
     * @example
     * // Get one Sorted_tags
     * const sorted_tags = await prisma.sorted_tags.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends sorted_tagsFindFirstOrThrowArgs>(args?: SelectSubset<T, sorted_tagsFindFirstOrThrowArgs<ExtArgs>>): Prisma__sorted_tagsClient<$Result.GetResult<Prisma.$sorted_tagsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Sorted_tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sorted_tagsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sorted_tags
     * const sorted_tags = await prisma.sorted_tags.findMany()
     * 
     * // Get first 10 Sorted_tags
     * const sorted_tags = await prisma.sorted_tags.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sorted_tagsWithIdOnly = await prisma.sorted_tags.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends sorted_tagsFindManyArgs>(args?: SelectSubset<T, sorted_tagsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sorted_tagsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Sorted_tags.
     * @param {sorted_tagsCreateArgs} args - Arguments to create a Sorted_tags.
     * @example
     * // Create one Sorted_tags
     * const Sorted_tags = await prisma.sorted_tags.create({
     *   data: {
     *     // ... data to create a Sorted_tags
     *   }
     * })
     * 
     */
    create<T extends sorted_tagsCreateArgs>(args: SelectSubset<T, sorted_tagsCreateArgs<ExtArgs>>): Prisma__sorted_tagsClient<$Result.GetResult<Prisma.$sorted_tagsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Sorted_tags.
     * @param {sorted_tagsCreateManyArgs} args - Arguments to create many Sorted_tags.
     * @example
     * // Create many Sorted_tags
     * const sorted_tags = await prisma.sorted_tags.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends sorted_tagsCreateManyArgs>(args?: SelectSubset<T, sorted_tagsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sorted_tags and returns the data saved in the database.
     * @param {sorted_tagsCreateManyAndReturnArgs} args - Arguments to create many Sorted_tags.
     * @example
     * // Create many Sorted_tags
     * const sorted_tags = await prisma.sorted_tags.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sorted_tags and only return the `id`
     * const sorted_tagsWithIdOnly = await prisma.sorted_tags.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends sorted_tagsCreateManyAndReturnArgs>(args?: SelectSubset<T, sorted_tagsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sorted_tagsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Sorted_tags.
     * @param {sorted_tagsDeleteArgs} args - Arguments to delete one Sorted_tags.
     * @example
     * // Delete one Sorted_tags
     * const Sorted_tags = await prisma.sorted_tags.delete({
     *   where: {
     *     // ... filter to delete one Sorted_tags
     *   }
     * })
     * 
     */
    delete<T extends sorted_tagsDeleteArgs>(args: SelectSubset<T, sorted_tagsDeleteArgs<ExtArgs>>): Prisma__sorted_tagsClient<$Result.GetResult<Prisma.$sorted_tagsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Sorted_tags.
     * @param {sorted_tagsUpdateArgs} args - Arguments to update one Sorted_tags.
     * @example
     * // Update one Sorted_tags
     * const sorted_tags = await prisma.sorted_tags.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends sorted_tagsUpdateArgs>(args: SelectSubset<T, sorted_tagsUpdateArgs<ExtArgs>>): Prisma__sorted_tagsClient<$Result.GetResult<Prisma.$sorted_tagsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Sorted_tags.
     * @param {sorted_tagsDeleteManyArgs} args - Arguments to filter Sorted_tags to delete.
     * @example
     * // Delete a few Sorted_tags
     * const { count } = await prisma.sorted_tags.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends sorted_tagsDeleteManyArgs>(args?: SelectSubset<T, sorted_tagsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sorted_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sorted_tagsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sorted_tags
     * const sorted_tags = await prisma.sorted_tags.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends sorted_tagsUpdateManyArgs>(args: SelectSubset<T, sorted_tagsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sorted_tags and returns the data updated in the database.
     * @param {sorted_tagsUpdateManyAndReturnArgs} args - Arguments to update many Sorted_tags.
     * @example
     * // Update many Sorted_tags
     * const sorted_tags = await prisma.sorted_tags.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sorted_tags and only return the `id`
     * const sorted_tagsWithIdOnly = await prisma.sorted_tags.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends sorted_tagsUpdateManyAndReturnArgs>(args: SelectSubset<T, sorted_tagsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sorted_tagsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Sorted_tags.
     * @param {sorted_tagsUpsertArgs} args - Arguments to update or create a Sorted_tags.
     * @example
     * // Update or create a Sorted_tags
     * const sorted_tags = await prisma.sorted_tags.upsert({
     *   create: {
     *     // ... data to create a Sorted_tags
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sorted_tags we want to update
     *   }
     * })
     */
    upsert<T extends sorted_tagsUpsertArgs>(args: SelectSubset<T, sorted_tagsUpsertArgs<ExtArgs>>): Prisma__sorted_tagsClient<$Result.GetResult<Prisma.$sorted_tagsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Sorted_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sorted_tagsCountArgs} args - Arguments to filter Sorted_tags to count.
     * @example
     * // Count the number of Sorted_tags
     * const count = await prisma.sorted_tags.count({
     *   where: {
     *     // ... the filter for the Sorted_tags we want to count
     *   }
     * })
    **/
    count<T extends sorted_tagsCountArgs>(
      args?: Subset<T, sorted_tagsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Sorted_tagsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sorted_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Sorted_tagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Sorted_tagsAggregateArgs>(args: Subset<T, Sorted_tagsAggregateArgs>): Prisma.PrismaPromise<GetSorted_tagsAggregateType<T>>

    /**
     * Group by Sorted_tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sorted_tagsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sorted_tagsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sorted_tagsGroupByArgs['orderBy'] }
        : { orderBy?: sorted_tagsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sorted_tagsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSorted_tagsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sorted_tags model
   */
  readonly fields: sorted_tagsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sorted_tags.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sorted_tagsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the sorted_tags model
   */ 
  interface sorted_tagsFieldRefs {
    readonly id: FieldRef<"sorted_tags", 'Int'>
    readonly tag: FieldRef<"sorted_tags", 'String'>
    readonly amount: FieldRef<"sorted_tags", 'Int'>
    readonly created_at: FieldRef<"sorted_tags", 'DateTime'>
    readonly wallet: FieldRef<"sorted_tags", 'String'>
    readonly updated_at: FieldRef<"sorted_tags", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * sorted_tags findUnique
   */
  export type sorted_tagsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sorted_tags
     */
    select?: sorted_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sorted_tags
     */
    omit?: sorted_tagsOmit<ExtArgs> | null
    /**
     * Filter, which sorted_tags to fetch.
     */
    where: sorted_tagsWhereUniqueInput
  }

  /**
   * sorted_tags findUniqueOrThrow
   */
  export type sorted_tagsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sorted_tags
     */
    select?: sorted_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sorted_tags
     */
    omit?: sorted_tagsOmit<ExtArgs> | null
    /**
     * Filter, which sorted_tags to fetch.
     */
    where: sorted_tagsWhereUniqueInput
  }

  /**
   * sorted_tags findFirst
   */
  export type sorted_tagsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sorted_tags
     */
    select?: sorted_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sorted_tags
     */
    omit?: sorted_tagsOmit<ExtArgs> | null
    /**
     * Filter, which sorted_tags to fetch.
     */
    where?: sorted_tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sorted_tags to fetch.
     */
    orderBy?: sorted_tagsOrderByWithRelationInput | sorted_tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sorted_tags.
     */
    cursor?: sorted_tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sorted_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sorted_tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sorted_tags.
     */
    distinct?: Sorted_tagsScalarFieldEnum | Sorted_tagsScalarFieldEnum[]
  }

  /**
   * sorted_tags findFirstOrThrow
   */
  export type sorted_tagsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sorted_tags
     */
    select?: sorted_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sorted_tags
     */
    omit?: sorted_tagsOmit<ExtArgs> | null
    /**
     * Filter, which sorted_tags to fetch.
     */
    where?: sorted_tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sorted_tags to fetch.
     */
    orderBy?: sorted_tagsOrderByWithRelationInput | sorted_tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sorted_tags.
     */
    cursor?: sorted_tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sorted_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sorted_tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sorted_tags.
     */
    distinct?: Sorted_tagsScalarFieldEnum | Sorted_tagsScalarFieldEnum[]
  }

  /**
   * sorted_tags findMany
   */
  export type sorted_tagsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sorted_tags
     */
    select?: sorted_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sorted_tags
     */
    omit?: sorted_tagsOmit<ExtArgs> | null
    /**
     * Filter, which sorted_tags to fetch.
     */
    where?: sorted_tagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sorted_tags to fetch.
     */
    orderBy?: sorted_tagsOrderByWithRelationInput | sorted_tagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sorted_tags.
     */
    cursor?: sorted_tagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sorted_tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sorted_tags.
     */
    skip?: number
    distinct?: Sorted_tagsScalarFieldEnum | Sorted_tagsScalarFieldEnum[]
  }

  /**
   * sorted_tags create
   */
  export type sorted_tagsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sorted_tags
     */
    select?: sorted_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sorted_tags
     */
    omit?: sorted_tagsOmit<ExtArgs> | null
    /**
     * The data needed to create a sorted_tags.
     */
    data: XOR<sorted_tagsCreateInput, sorted_tagsUncheckedCreateInput>
  }

  /**
   * sorted_tags createMany
   */
  export type sorted_tagsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sorted_tags.
     */
    data: sorted_tagsCreateManyInput | sorted_tagsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * sorted_tags createManyAndReturn
   */
  export type sorted_tagsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sorted_tags
     */
    select?: sorted_tagsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the sorted_tags
     */
    omit?: sorted_tagsOmit<ExtArgs> | null
    /**
     * The data used to create many sorted_tags.
     */
    data: sorted_tagsCreateManyInput | sorted_tagsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * sorted_tags update
   */
  export type sorted_tagsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sorted_tags
     */
    select?: sorted_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sorted_tags
     */
    omit?: sorted_tagsOmit<ExtArgs> | null
    /**
     * The data needed to update a sorted_tags.
     */
    data: XOR<sorted_tagsUpdateInput, sorted_tagsUncheckedUpdateInput>
    /**
     * Choose, which sorted_tags to update.
     */
    where: sorted_tagsWhereUniqueInput
  }

  /**
   * sorted_tags updateMany
   */
  export type sorted_tagsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sorted_tags.
     */
    data: XOR<sorted_tagsUpdateManyMutationInput, sorted_tagsUncheckedUpdateManyInput>
    /**
     * Filter which sorted_tags to update
     */
    where?: sorted_tagsWhereInput
  }

  /**
   * sorted_tags updateManyAndReturn
   */
  export type sorted_tagsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sorted_tags
     */
    select?: sorted_tagsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the sorted_tags
     */
    omit?: sorted_tagsOmit<ExtArgs> | null
    /**
     * The data used to update sorted_tags.
     */
    data: XOR<sorted_tagsUpdateManyMutationInput, sorted_tagsUncheckedUpdateManyInput>
    /**
     * Filter which sorted_tags to update
     */
    where?: sorted_tagsWhereInput
  }

  /**
   * sorted_tags upsert
   */
  export type sorted_tagsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sorted_tags
     */
    select?: sorted_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sorted_tags
     */
    omit?: sorted_tagsOmit<ExtArgs> | null
    /**
     * The filter to search for the sorted_tags to update in case it exists.
     */
    where: sorted_tagsWhereUniqueInput
    /**
     * In case the sorted_tags found by the `where` argument doesn't exist, create a new sorted_tags with this data.
     */
    create: XOR<sorted_tagsCreateInput, sorted_tagsUncheckedCreateInput>
    /**
     * In case the sorted_tags was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sorted_tagsUpdateInput, sorted_tagsUncheckedUpdateInput>
  }

  /**
   * sorted_tags delete
   */
  export type sorted_tagsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sorted_tags
     */
    select?: sorted_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sorted_tags
     */
    omit?: sorted_tagsOmit<ExtArgs> | null
    /**
     * Filter which sorted_tags to delete.
     */
    where: sorted_tagsWhereUniqueInput
  }

  /**
   * sorted_tags deleteMany
   */
  export type sorted_tagsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sorted_tags to delete
     */
    where?: sorted_tagsWhereInput
  }

  /**
   * sorted_tags without action
   */
  export type sorted_tagsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sorted_tags
     */
    select?: sorted_tagsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sorted_tags
     */
    omit?: sorted_tagsOmit<ExtArgs> | null
  }


  /**
   * Model swap
   */

  export type AggregateSwap = {
    _count: SwapCountAggregateOutputType | null
    _avg: SwapAvgAggregateOutputType | null
    _sum: SwapSumAggregateOutputType | null
    _min: SwapMinAggregateOutputType | null
    _max: SwapMaxAggregateOutputType | null
  }

  export type SwapAvgAggregateOutputType = {
    id: number | null
    slippage: number | null
    fee: number | null
    blocktime: number | null
    fdv: Decimal | null
  }

  export type SwapSumAggregateOutputType = {
    id: number | null
    slippage: number | null
    fee: bigint | null
    blocktime: number | null
    fdv: Decimal | null
  }

  export type SwapMinAggregateOutputType = {
    id: number | null
    wallet: string | null
    token: string | null
    created_at: Date | null
    signature: string | null
    sol_price: string | null
    state: string | null
    swap_type: string | null
    slippage: number | null
    fee: bigint | null
    blocktime: number | null
    from_address: string | null
    network: string | null
    to_address: string | null
    fdv: Decimal | null
    updated_at: Date | null
  }

  export type SwapMaxAggregateOutputType = {
    id: number | null
    wallet: string | null
    token: string | null
    created_at: Date | null
    signature: string | null
    sol_price: string | null
    state: string | null
    swap_type: string | null
    slippage: number | null
    fee: bigint | null
    blocktime: number | null
    from_address: string | null
    network: string | null
    to_address: string | null
    fdv: Decimal | null
    updated_at: Date | null
  }

  export type SwapCountAggregateOutputType = {
    id: number
    wallet: number
    token: number
    actions: number
    created_at: number
    signature: number
    sol_price: number
    state: number
    swap_type: number
    slippage: number
    fee: number
    blocktime: number
    from_address: number
    network: number
    swap: number
    to_address: number
    fdv: number
    updated_at: number
    _all: number
  }


  export type SwapAvgAggregateInputType = {
    id?: true
    slippage?: true
    fee?: true
    blocktime?: true
    fdv?: true
  }

  export type SwapSumAggregateInputType = {
    id?: true
    slippage?: true
    fee?: true
    blocktime?: true
    fdv?: true
  }

  export type SwapMinAggregateInputType = {
    id?: true
    wallet?: true
    token?: true
    created_at?: true
    signature?: true
    sol_price?: true
    state?: true
    swap_type?: true
    slippage?: true
    fee?: true
    blocktime?: true
    from_address?: true
    network?: true
    to_address?: true
    fdv?: true
    updated_at?: true
  }

  export type SwapMaxAggregateInputType = {
    id?: true
    wallet?: true
    token?: true
    created_at?: true
    signature?: true
    sol_price?: true
    state?: true
    swap_type?: true
    slippage?: true
    fee?: true
    blocktime?: true
    from_address?: true
    network?: true
    to_address?: true
    fdv?: true
    updated_at?: true
  }

  export type SwapCountAggregateInputType = {
    id?: true
    wallet?: true
    token?: true
    actions?: true
    created_at?: true
    signature?: true
    sol_price?: true
    state?: true
    swap_type?: true
    slippage?: true
    fee?: true
    blocktime?: true
    from_address?: true
    network?: true
    swap?: true
    to_address?: true
    fdv?: true
    updated_at?: true
    _all?: true
  }

  export type SwapAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which swap to aggregate.
     */
    where?: swapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of swaps to fetch.
     */
    orderBy?: swapOrderByWithRelationInput | swapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: swapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` swaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` swaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned swaps
    **/
    _count?: true | SwapCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SwapAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SwapSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SwapMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SwapMaxAggregateInputType
  }

  export type GetSwapAggregateType<T extends SwapAggregateArgs> = {
        [P in keyof T & keyof AggregateSwap]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSwap[P]>
      : GetScalarType<T[P], AggregateSwap[P]>
  }




  export type swapGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: swapWhereInput
    orderBy?: swapOrderByWithAggregationInput | swapOrderByWithAggregationInput[]
    by: SwapScalarFieldEnum[] | SwapScalarFieldEnum
    having?: swapScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SwapCountAggregateInputType | true
    _avg?: SwapAvgAggregateInputType
    _sum?: SwapSumAggregateInputType
    _min?: SwapMinAggregateInputType
    _max?: SwapMaxAggregateInputType
  }

  export type SwapGroupByOutputType = {
    id: number
    wallet: string
    token: string
    actions: JsonValue | null
    created_at: Date
    signature: string
    sol_price: string
    state: string
    swap_type: string
    slippage: number
    fee: bigint
    blocktime: number
    from_address: string | null
    network: string
    swap: JsonValue | null
    to_address: string | null
    fdv: Decimal
    updated_at: Date
    _count: SwapCountAggregateOutputType | null
    _avg: SwapAvgAggregateOutputType | null
    _sum: SwapSumAggregateOutputType | null
    _min: SwapMinAggregateOutputType | null
    _max: SwapMaxAggregateOutputType | null
  }

  type GetSwapGroupByPayload<T extends swapGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SwapGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SwapGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SwapGroupByOutputType[P]>
            : GetScalarType<T[P], SwapGroupByOutputType[P]>
        }
      >
    >


  export type swapSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wallet?: boolean
    token?: boolean
    actions?: boolean
    created_at?: boolean
    signature?: boolean
    sol_price?: boolean
    state?: boolean
    swap_type?: boolean
    slippage?: boolean
    fee?: boolean
    blocktime?: boolean
    from_address?: boolean
    network?: boolean
    swap?: boolean
    to_address?: boolean
    fdv?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["swap"]>

  export type swapSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wallet?: boolean
    token?: boolean
    actions?: boolean
    created_at?: boolean
    signature?: boolean
    sol_price?: boolean
    state?: boolean
    swap_type?: boolean
    slippage?: boolean
    fee?: boolean
    blocktime?: boolean
    from_address?: boolean
    network?: boolean
    swap?: boolean
    to_address?: boolean
    fdv?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["swap"]>

  export type swapSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wallet?: boolean
    token?: boolean
    actions?: boolean
    created_at?: boolean
    signature?: boolean
    sol_price?: boolean
    state?: boolean
    swap_type?: boolean
    slippage?: boolean
    fee?: boolean
    blocktime?: boolean
    from_address?: boolean
    network?: boolean
    swap?: boolean
    to_address?: boolean
    fdv?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["swap"]>

  export type swapSelectScalar = {
    id?: boolean
    wallet?: boolean
    token?: boolean
    actions?: boolean
    created_at?: boolean
    signature?: boolean
    sol_price?: boolean
    state?: boolean
    swap_type?: boolean
    slippage?: boolean
    fee?: boolean
    blocktime?: boolean
    from_address?: boolean
    network?: boolean
    swap?: boolean
    to_address?: boolean
    fdv?: boolean
    updated_at?: boolean
  }

  export type swapOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "wallet" | "token" | "actions" | "created_at" | "signature" | "sol_price" | "state" | "swap_type" | "slippage" | "fee" | "blocktime" | "from_address" | "network" | "swap" | "to_address" | "fdv" | "updated_at", ExtArgs["result"]["swap"]>

  export type $swapPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "swap"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      wallet: string
      token: string
      actions: Prisma.JsonValue | null
      created_at: Date
      signature: string
      sol_price: string
      state: string
      swap_type: string
      slippage: number
      fee: bigint
      blocktime: number
      from_address: string | null
      network: string
      swap: Prisma.JsonValue | null
      to_address: string | null
      fdv: Prisma.Decimal
      updated_at: Date
    }, ExtArgs["result"]["swap"]>
    composites: {}
  }

  type swapGetPayload<S extends boolean | null | undefined | swapDefaultArgs> = $Result.GetResult<Prisma.$swapPayload, S>

  type swapCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<swapFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SwapCountAggregateInputType | true
    }

  export interface swapDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['swap'], meta: { name: 'swap' } }
    /**
     * Find zero or one Swap that matches the filter.
     * @param {swapFindUniqueArgs} args - Arguments to find a Swap
     * @example
     * // Get one Swap
     * const swap = await prisma.swap.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends swapFindUniqueArgs>(args: SelectSubset<T, swapFindUniqueArgs<ExtArgs>>): Prisma__swapClient<$Result.GetResult<Prisma.$swapPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Swap that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {swapFindUniqueOrThrowArgs} args - Arguments to find a Swap
     * @example
     * // Get one Swap
     * const swap = await prisma.swap.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends swapFindUniqueOrThrowArgs>(args: SelectSubset<T, swapFindUniqueOrThrowArgs<ExtArgs>>): Prisma__swapClient<$Result.GetResult<Prisma.$swapPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Swap that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {swapFindFirstArgs} args - Arguments to find a Swap
     * @example
     * // Get one Swap
     * const swap = await prisma.swap.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends swapFindFirstArgs>(args?: SelectSubset<T, swapFindFirstArgs<ExtArgs>>): Prisma__swapClient<$Result.GetResult<Prisma.$swapPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Swap that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {swapFindFirstOrThrowArgs} args - Arguments to find a Swap
     * @example
     * // Get one Swap
     * const swap = await prisma.swap.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends swapFindFirstOrThrowArgs>(args?: SelectSubset<T, swapFindFirstOrThrowArgs<ExtArgs>>): Prisma__swapClient<$Result.GetResult<Prisma.$swapPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Swaps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {swapFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Swaps
     * const swaps = await prisma.swap.findMany()
     * 
     * // Get first 10 Swaps
     * const swaps = await prisma.swap.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const swapWithIdOnly = await prisma.swap.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends swapFindManyArgs>(args?: SelectSubset<T, swapFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$swapPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Swap.
     * @param {swapCreateArgs} args - Arguments to create a Swap.
     * @example
     * // Create one Swap
     * const Swap = await prisma.swap.create({
     *   data: {
     *     // ... data to create a Swap
     *   }
     * })
     * 
     */
    create<T extends swapCreateArgs>(args: SelectSubset<T, swapCreateArgs<ExtArgs>>): Prisma__swapClient<$Result.GetResult<Prisma.$swapPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Swaps.
     * @param {swapCreateManyArgs} args - Arguments to create many Swaps.
     * @example
     * // Create many Swaps
     * const swap = await prisma.swap.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends swapCreateManyArgs>(args?: SelectSubset<T, swapCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Swaps and returns the data saved in the database.
     * @param {swapCreateManyAndReturnArgs} args - Arguments to create many Swaps.
     * @example
     * // Create many Swaps
     * const swap = await prisma.swap.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Swaps and only return the `id`
     * const swapWithIdOnly = await prisma.swap.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends swapCreateManyAndReturnArgs>(args?: SelectSubset<T, swapCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$swapPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Swap.
     * @param {swapDeleteArgs} args - Arguments to delete one Swap.
     * @example
     * // Delete one Swap
     * const Swap = await prisma.swap.delete({
     *   where: {
     *     // ... filter to delete one Swap
     *   }
     * })
     * 
     */
    delete<T extends swapDeleteArgs>(args: SelectSubset<T, swapDeleteArgs<ExtArgs>>): Prisma__swapClient<$Result.GetResult<Prisma.$swapPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Swap.
     * @param {swapUpdateArgs} args - Arguments to update one Swap.
     * @example
     * // Update one Swap
     * const swap = await prisma.swap.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends swapUpdateArgs>(args: SelectSubset<T, swapUpdateArgs<ExtArgs>>): Prisma__swapClient<$Result.GetResult<Prisma.$swapPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Swaps.
     * @param {swapDeleteManyArgs} args - Arguments to filter Swaps to delete.
     * @example
     * // Delete a few Swaps
     * const { count } = await prisma.swap.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends swapDeleteManyArgs>(args?: SelectSubset<T, swapDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Swaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {swapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Swaps
     * const swap = await prisma.swap.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends swapUpdateManyArgs>(args: SelectSubset<T, swapUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Swaps and returns the data updated in the database.
     * @param {swapUpdateManyAndReturnArgs} args - Arguments to update many Swaps.
     * @example
     * // Update many Swaps
     * const swap = await prisma.swap.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Swaps and only return the `id`
     * const swapWithIdOnly = await prisma.swap.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends swapUpdateManyAndReturnArgs>(args: SelectSubset<T, swapUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$swapPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Swap.
     * @param {swapUpsertArgs} args - Arguments to update or create a Swap.
     * @example
     * // Update or create a Swap
     * const swap = await prisma.swap.upsert({
     *   create: {
     *     // ... data to create a Swap
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Swap we want to update
     *   }
     * })
     */
    upsert<T extends swapUpsertArgs>(args: SelectSubset<T, swapUpsertArgs<ExtArgs>>): Prisma__swapClient<$Result.GetResult<Prisma.$swapPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Swaps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {swapCountArgs} args - Arguments to filter Swaps to count.
     * @example
     * // Count the number of Swaps
     * const count = await prisma.swap.count({
     *   where: {
     *     // ... the filter for the Swaps we want to count
     *   }
     * })
    **/
    count<T extends swapCountArgs>(
      args?: Subset<T, swapCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SwapCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Swap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SwapAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SwapAggregateArgs>(args: Subset<T, SwapAggregateArgs>): Prisma.PrismaPromise<GetSwapAggregateType<T>>

    /**
     * Group by Swap.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {swapGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends swapGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: swapGroupByArgs['orderBy'] }
        : { orderBy?: swapGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, swapGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSwapGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the swap model
   */
  readonly fields: swapFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for swap.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__swapClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the swap model
   */ 
  interface swapFieldRefs {
    readonly id: FieldRef<"swap", 'Int'>
    readonly wallet: FieldRef<"swap", 'String'>
    readonly token: FieldRef<"swap", 'String'>
    readonly actions: FieldRef<"swap", 'Json'>
    readonly created_at: FieldRef<"swap", 'DateTime'>
    readonly signature: FieldRef<"swap", 'String'>
    readonly sol_price: FieldRef<"swap", 'String'>
    readonly state: FieldRef<"swap", 'String'>
    readonly swap_type: FieldRef<"swap", 'String'>
    readonly slippage: FieldRef<"swap", 'Float'>
    readonly fee: FieldRef<"swap", 'BigInt'>
    readonly blocktime: FieldRef<"swap", 'Int'>
    readonly from_address: FieldRef<"swap", 'String'>
    readonly network: FieldRef<"swap", 'String'>
    readonly swap: FieldRef<"swap", 'Json'>
    readonly to_address: FieldRef<"swap", 'String'>
    readonly fdv: FieldRef<"swap", 'Decimal'>
    readonly updated_at: FieldRef<"swap", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * swap findUnique
   */
  export type swapFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the swap
     */
    select?: swapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the swap
     */
    omit?: swapOmit<ExtArgs> | null
    /**
     * Filter, which swap to fetch.
     */
    where: swapWhereUniqueInput
  }

  /**
   * swap findUniqueOrThrow
   */
  export type swapFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the swap
     */
    select?: swapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the swap
     */
    omit?: swapOmit<ExtArgs> | null
    /**
     * Filter, which swap to fetch.
     */
    where: swapWhereUniqueInput
  }

  /**
   * swap findFirst
   */
  export type swapFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the swap
     */
    select?: swapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the swap
     */
    omit?: swapOmit<ExtArgs> | null
    /**
     * Filter, which swap to fetch.
     */
    where?: swapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of swaps to fetch.
     */
    orderBy?: swapOrderByWithRelationInput | swapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for swaps.
     */
    cursor?: swapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` swaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` swaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of swaps.
     */
    distinct?: SwapScalarFieldEnum | SwapScalarFieldEnum[]
  }

  /**
   * swap findFirstOrThrow
   */
  export type swapFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the swap
     */
    select?: swapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the swap
     */
    omit?: swapOmit<ExtArgs> | null
    /**
     * Filter, which swap to fetch.
     */
    where?: swapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of swaps to fetch.
     */
    orderBy?: swapOrderByWithRelationInput | swapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for swaps.
     */
    cursor?: swapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` swaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` swaps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of swaps.
     */
    distinct?: SwapScalarFieldEnum | SwapScalarFieldEnum[]
  }

  /**
   * swap findMany
   */
  export type swapFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the swap
     */
    select?: swapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the swap
     */
    omit?: swapOmit<ExtArgs> | null
    /**
     * Filter, which swaps to fetch.
     */
    where?: swapWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of swaps to fetch.
     */
    orderBy?: swapOrderByWithRelationInput | swapOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing swaps.
     */
    cursor?: swapWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` swaps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` swaps.
     */
    skip?: number
    distinct?: SwapScalarFieldEnum | SwapScalarFieldEnum[]
  }

  /**
   * swap create
   */
  export type swapCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the swap
     */
    select?: swapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the swap
     */
    omit?: swapOmit<ExtArgs> | null
    /**
     * The data needed to create a swap.
     */
    data: XOR<swapCreateInput, swapUncheckedCreateInput>
  }

  /**
   * swap createMany
   */
  export type swapCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many swaps.
     */
    data: swapCreateManyInput | swapCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * swap createManyAndReturn
   */
  export type swapCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the swap
     */
    select?: swapSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the swap
     */
    omit?: swapOmit<ExtArgs> | null
    /**
     * The data used to create many swaps.
     */
    data: swapCreateManyInput | swapCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * swap update
   */
  export type swapUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the swap
     */
    select?: swapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the swap
     */
    omit?: swapOmit<ExtArgs> | null
    /**
     * The data needed to update a swap.
     */
    data: XOR<swapUpdateInput, swapUncheckedUpdateInput>
    /**
     * Choose, which swap to update.
     */
    where: swapWhereUniqueInput
  }

  /**
   * swap updateMany
   */
  export type swapUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update swaps.
     */
    data: XOR<swapUpdateManyMutationInput, swapUncheckedUpdateManyInput>
    /**
     * Filter which swaps to update
     */
    where?: swapWhereInput
  }

  /**
   * swap updateManyAndReturn
   */
  export type swapUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the swap
     */
    select?: swapSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the swap
     */
    omit?: swapOmit<ExtArgs> | null
    /**
     * The data used to update swaps.
     */
    data: XOR<swapUpdateManyMutationInput, swapUncheckedUpdateManyInput>
    /**
     * Filter which swaps to update
     */
    where?: swapWhereInput
  }

  /**
   * swap upsert
   */
  export type swapUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the swap
     */
    select?: swapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the swap
     */
    omit?: swapOmit<ExtArgs> | null
    /**
     * The filter to search for the swap to update in case it exists.
     */
    where: swapWhereUniqueInput
    /**
     * In case the swap found by the `where` argument doesn't exist, create a new swap with this data.
     */
    create: XOR<swapCreateInput, swapUncheckedCreateInput>
    /**
     * In case the swap was found with the provided `where` argument, update it with this data.
     */
    update: XOR<swapUpdateInput, swapUncheckedUpdateInput>
  }

  /**
   * swap delete
   */
  export type swapDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the swap
     */
    select?: swapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the swap
     */
    omit?: swapOmit<ExtArgs> | null
    /**
     * Filter which swap to delete.
     */
    where: swapWhereUniqueInput
  }

  /**
   * swap deleteMany
   */
  export type swapDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which swaps to delete
     */
    where?: swapWhereInput
  }

  /**
   * swap without action
   */
  export type swapDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the swap
     */
    select?: swapSelect<ExtArgs> | null
    /**
     * Omit specific fields from the swap
     */
    omit?: swapOmit<ExtArgs> | null
  }


  /**
   * Model tokens
   */

  export type AggregateTokens = {
    _count: TokensCountAggregateOutputType | null
    _avg: TokensAvgAggregateOutputType | null
    _sum: TokensSumAggregateOutputType | null
    _min: TokensMinAggregateOutputType | null
    _max: TokensMaxAggregateOutputType | null
  }

  export type TokensAvgAggregateOutputType = {
    id: number | null
    decimals: number | null
    followers: number | null
    supply: number | null
    token_created_time: number | null
  }

  export type TokensSumAggregateOutputType = {
    id: bigint | null
    decimals: number | null
    followers: number | null
    supply: bigint | null
    token_created_time: number | null
  }

  export type TokensMinAggregateOutputType = {
    id: bigint | null
    symbol: string | null
    address: string | null
    name: string | null
    uri: string | null
    decimals: number | null
    async: boolean | null
    followers: number | null
    twitter_handle: string | null
    twitter_name: string | null
    created_at: Date | null
    supply: bigint | null
    network: string | null
    token_created_time: number | null
    updated_at: Date | null
  }

  export type TokensMaxAggregateOutputType = {
    id: bigint | null
    symbol: string | null
    address: string | null
    name: string | null
    uri: string | null
    decimals: number | null
    async: boolean | null
    followers: number | null
    twitter_handle: string | null
    twitter_name: string | null
    created_at: Date | null
    supply: bigint | null
    network: string | null
    token_created_time: number | null
    updated_at: Date | null
  }

  export type TokensCountAggregateOutputType = {
    id: number
    symbol: number
    address: number
    name: number
    uri: number
    decimals: number
    metadata: number
    async: number
    followers: number
    twitter_handle: number
    twitter_name: number
    created_at: number
    supply: number
    network: number
    token_created_time: number
    updated_at: number
    _all: number
  }


  export type TokensAvgAggregateInputType = {
    id?: true
    decimals?: true
    followers?: true
    supply?: true
    token_created_time?: true
  }

  export type TokensSumAggregateInputType = {
    id?: true
    decimals?: true
    followers?: true
    supply?: true
    token_created_time?: true
  }

  export type TokensMinAggregateInputType = {
    id?: true
    symbol?: true
    address?: true
    name?: true
    uri?: true
    decimals?: true
    async?: true
    followers?: true
    twitter_handle?: true
    twitter_name?: true
    created_at?: true
    supply?: true
    network?: true
    token_created_time?: true
    updated_at?: true
  }

  export type TokensMaxAggregateInputType = {
    id?: true
    symbol?: true
    address?: true
    name?: true
    uri?: true
    decimals?: true
    async?: true
    followers?: true
    twitter_handle?: true
    twitter_name?: true
    created_at?: true
    supply?: true
    network?: true
    token_created_time?: true
    updated_at?: true
  }

  export type TokensCountAggregateInputType = {
    id?: true
    symbol?: true
    address?: true
    name?: true
    uri?: true
    decimals?: true
    metadata?: true
    async?: true
    followers?: true
    twitter_handle?: true
    twitter_name?: true
    created_at?: true
    supply?: true
    network?: true
    token_created_time?: true
    updated_at?: true
    _all?: true
  }

  export type TokensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tokens to aggregate.
     */
    where?: tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tokens to fetch.
     */
    orderBy?: tokensOrderByWithRelationInput | tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tokens
    **/
    _count?: true | TokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokensMaxAggregateInputType
  }

  export type GetTokensAggregateType<T extends TokensAggregateArgs> = {
        [P in keyof T & keyof AggregateTokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTokens[P]>
      : GetScalarType<T[P], AggregateTokens[P]>
  }




  export type tokensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tokensWhereInput
    orderBy?: tokensOrderByWithAggregationInput | tokensOrderByWithAggregationInput[]
    by: TokensScalarFieldEnum[] | TokensScalarFieldEnum
    having?: tokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokensCountAggregateInputType | true
    _avg?: TokensAvgAggregateInputType
    _sum?: TokensSumAggregateInputType
    _min?: TokensMinAggregateInputType
    _max?: TokensMaxAggregateInputType
  }

  export type TokensGroupByOutputType = {
    id: bigint
    symbol: string
    address: string
    name: string | null
    uri: string | null
    decimals: number
    metadata: JsonValue | null
    async: boolean | null
    followers: number | null
    twitter_handle: string | null
    twitter_name: string | null
    created_at: Date
    supply: bigint
    network: string
    token_created_time: number
    updated_at: Date
    _count: TokensCountAggregateOutputType | null
    _avg: TokensAvgAggregateOutputType | null
    _sum: TokensSumAggregateOutputType | null
    _min: TokensMinAggregateOutputType | null
    _max: TokensMaxAggregateOutputType | null
  }

  type GetTokensGroupByPayload<T extends tokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokensGroupByOutputType[P]>
            : GetScalarType<T[P], TokensGroupByOutputType[P]>
        }
      >
    >


  export type tokensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    address?: boolean
    name?: boolean
    uri?: boolean
    decimals?: boolean
    metadata?: boolean
    async?: boolean
    followers?: boolean
    twitter_handle?: boolean
    twitter_name?: boolean
    created_at?: boolean
    supply?: boolean
    network?: boolean
    token_created_time?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["tokens"]>

  export type tokensSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    address?: boolean
    name?: boolean
    uri?: boolean
    decimals?: boolean
    metadata?: boolean
    async?: boolean
    followers?: boolean
    twitter_handle?: boolean
    twitter_name?: boolean
    created_at?: boolean
    supply?: boolean
    network?: boolean
    token_created_time?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["tokens"]>

  export type tokensSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    address?: boolean
    name?: boolean
    uri?: boolean
    decimals?: boolean
    metadata?: boolean
    async?: boolean
    followers?: boolean
    twitter_handle?: boolean
    twitter_name?: boolean
    created_at?: boolean
    supply?: boolean
    network?: boolean
    token_created_time?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["tokens"]>

  export type tokensSelectScalar = {
    id?: boolean
    symbol?: boolean
    address?: boolean
    name?: boolean
    uri?: boolean
    decimals?: boolean
    metadata?: boolean
    async?: boolean
    followers?: boolean
    twitter_handle?: boolean
    twitter_name?: boolean
    created_at?: boolean
    supply?: boolean
    network?: boolean
    token_created_time?: boolean
    updated_at?: boolean
  }

  export type tokensOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "symbol" | "address" | "name" | "uri" | "decimals" | "metadata" | "async" | "followers" | "twitter_handle" | "twitter_name" | "created_at" | "supply" | "network" | "token_created_time" | "updated_at", ExtArgs["result"]["tokens"]>

  export type $tokensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tokens"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      symbol: string
      address: string
      name: string | null
      uri: string | null
      decimals: number
      metadata: Prisma.JsonValue | null
      async: boolean | null
      followers: number | null
      twitter_handle: string | null
      twitter_name: string | null
      created_at: Date
      supply: bigint
      network: string
      token_created_time: number
      updated_at: Date
    }, ExtArgs["result"]["tokens"]>
    composites: {}
  }

  type tokensGetPayload<S extends boolean | null | undefined | tokensDefaultArgs> = $Result.GetResult<Prisma.$tokensPayload, S>

  type tokensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tokensFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TokensCountAggregateInputType | true
    }

  export interface tokensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tokens'], meta: { name: 'tokens' } }
    /**
     * Find zero or one Tokens that matches the filter.
     * @param {tokensFindUniqueArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tokensFindUniqueArgs>(args: SelectSubset<T, tokensFindUniqueArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Tokens that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tokensFindUniqueOrThrowArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tokensFindUniqueOrThrowArgs>(args: SelectSubset<T, tokensFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tokensFindFirstArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tokensFindFirstArgs>(args?: SelectSubset<T, tokensFindFirstArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Tokens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tokensFindFirstOrThrowArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tokensFindFirstOrThrowArgs>(args?: SelectSubset<T, tokensFindFirstOrThrowArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tokensFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.tokens.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokensWithIdOnly = await prisma.tokens.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends tokensFindManyArgs>(args?: SelectSubset<T, tokensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Tokens.
     * @param {tokensCreateArgs} args - Arguments to create a Tokens.
     * @example
     * // Create one Tokens
     * const Tokens = await prisma.tokens.create({
     *   data: {
     *     // ... data to create a Tokens
     *   }
     * })
     * 
     */
    create<T extends tokensCreateArgs>(args: SelectSubset<T, tokensCreateArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Tokens.
     * @param {tokensCreateManyArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const tokens = await prisma.tokens.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tokensCreateManyArgs>(args?: SelectSubset<T, tokensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tokens and returns the data saved in the database.
     * @param {tokensCreateManyAndReturnArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const tokens = await prisma.tokens.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tokens and only return the `id`
     * const tokensWithIdOnly = await prisma.tokens.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends tokensCreateManyAndReturnArgs>(args?: SelectSubset<T, tokensCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Tokens.
     * @param {tokensDeleteArgs} args - Arguments to delete one Tokens.
     * @example
     * // Delete one Tokens
     * const Tokens = await prisma.tokens.delete({
     *   where: {
     *     // ... filter to delete one Tokens
     *   }
     * })
     * 
     */
    delete<T extends tokensDeleteArgs>(args: SelectSubset<T, tokensDeleteArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Tokens.
     * @param {tokensUpdateArgs} args - Arguments to update one Tokens.
     * @example
     * // Update one Tokens
     * const tokens = await prisma.tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tokensUpdateArgs>(args: SelectSubset<T, tokensUpdateArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Tokens.
     * @param {tokensDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tokensDeleteManyArgs>(args?: SelectSubset<T, tokensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const tokens = await prisma.tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tokensUpdateManyArgs>(args: SelectSubset<T, tokensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens and returns the data updated in the database.
     * @param {tokensUpdateManyAndReturnArgs} args - Arguments to update many Tokens.
     * @example
     * // Update many Tokens
     * const tokens = await prisma.tokens.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tokens and only return the `id`
     * const tokensWithIdOnly = await prisma.tokens.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends tokensUpdateManyAndReturnArgs>(args: SelectSubset<T, tokensUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Tokens.
     * @param {tokensUpsertArgs} args - Arguments to update or create a Tokens.
     * @example
     * // Update or create a Tokens
     * const tokens = await prisma.tokens.upsert({
     *   create: {
     *     // ... data to create a Tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tokens we want to update
     *   }
     * })
     */
    upsert<T extends tokensUpsertArgs>(args: SelectSubset<T, tokensUpsertArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tokensCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.tokens.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends tokensCountArgs>(
      args?: Subset<T, tokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokensAggregateArgs>(args: Subset<T, TokensAggregateArgs>): Prisma.PrismaPromise<GetTokensAggregateType<T>>

    /**
     * Group by Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tokensGroupByArgs['orderBy'] }
        : { orderBy?: tokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tokens model
   */
  readonly fields: tokensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tokensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tokens model
   */ 
  interface tokensFieldRefs {
    readonly id: FieldRef<"tokens", 'BigInt'>
    readonly symbol: FieldRef<"tokens", 'String'>
    readonly address: FieldRef<"tokens", 'String'>
    readonly name: FieldRef<"tokens", 'String'>
    readonly uri: FieldRef<"tokens", 'String'>
    readonly decimals: FieldRef<"tokens", 'Int'>
    readonly metadata: FieldRef<"tokens", 'Json'>
    readonly async: FieldRef<"tokens", 'Boolean'>
    readonly followers: FieldRef<"tokens", 'Int'>
    readonly twitter_handle: FieldRef<"tokens", 'String'>
    readonly twitter_name: FieldRef<"tokens", 'String'>
    readonly created_at: FieldRef<"tokens", 'DateTime'>
    readonly supply: FieldRef<"tokens", 'BigInt'>
    readonly network: FieldRef<"tokens", 'String'>
    readonly token_created_time: FieldRef<"tokens", 'Int'>
    readonly updated_at: FieldRef<"tokens", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * tokens findUnique
   */
  export type tokensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Filter, which tokens to fetch.
     */
    where: tokensWhereUniqueInput
  }

  /**
   * tokens findUniqueOrThrow
   */
  export type tokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Filter, which tokens to fetch.
     */
    where: tokensWhereUniqueInput
  }

  /**
   * tokens findFirst
   */
  export type tokensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Filter, which tokens to fetch.
     */
    where?: tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tokens to fetch.
     */
    orderBy?: tokensOrderByWithRelationInput | tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tokens.
     */
    cursor?: tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tokens.
     */
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }

  /**
   * tokens findFirstOrThrow
   */
  export type tokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Filter, which tokens to fetch.
     */
    where?: tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tokens to fetch.
     */
    orderBy?: tokensOrderByWithRelationInput | tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tokens.
     */
    cursor?: tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tokens.
     */
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }

  /**
   * tokens findMany
   */
  export type tokensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Filter, which tokens to fetch.
     */
    where?: tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tokens to fetch.
     */
    orderBy?: tokensOrderByWithRelationInput | tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tokens.
     */
    cursor?: tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tokens.
     */
    skip?: number
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }

  /**
   * tokens create
   */
  export type tokensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * The data needed to create a tokens.
     */
    data: XOR<tokensCreateInput, tokensUncheckedCreateInput>
  }

  /**
   * tokens createMany
   */
  export type tokensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tokens.
     */
    data: tokensCreateManyInput | tokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tokens createManyAndReturn
   */
  export type tokensCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * The data used to create many tokens.
     */
    data: tokensCreateManyInput | tokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tokens update
   */
  export type tokensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * The data needed to update a tokens.
     */
    data: XOR<tokensUpdateInput, tokensUncheckedUpdateInput>
    /**
     * Choose, which tokens to update.
     */
    where: tokensWhereUniqueInput
  }

  /**
   * tokens updateMany
   */
  export type tokensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tokens.
     */
    data: XOR<tokensUpdateManyMutationInput, tokensUncheckedUpdateManyInput>
    /**
     * Filter which tokens to update
     */
    where?: tokensWhereInput
  }

  /**
   * tokens updateManyAndReturn
   */
  export type tokensUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * The data used to update tokens.
     */
    data: XOR<tokensUpdateManyMutationInput, tokensUncheckedUpdateManyInput>
    /**
     * Filter which tokens to update
     */
    where?: tokensWhereInput
  }

  /**
   * tokens upsert
   */
  export type tokensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * The filter to search for the tokens to update in case it exists.
     */
    where: tokensWhereUniqueInput
    /**
     * In case the tokens found by the `where` argument doesn't exist, create a new tokens with this data.
     */
    create: XOR<tokensCreateInput, tokensUncheckedCreateInput>
    /**
     * In case the tokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tokensUpdateInput, tokensUncheckedUpdateInput>
  }

  /**
   * tokens delete
   */
  export type tokensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Filter which tokens to delete.
     */
    where: tokensWhereUniqueInput
  }

  /**
   * tokens deleteMany
   */
  export type tokensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tokens to delete
     */
    where?: tokensWhereInput
  }

  /**
   * tokens without action
   */
  export type tokensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
  }


  /**
   * Model transactions
   */

  export type AggregateTransactions = {
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  export type TransactionsAvgAggregateOutputType = {
    id: number | null
    blocktime: number | null
    block: number | null
    fdv: Decimal | null
  }

  export type TransactionsSumAggregateOutputType = {
    id: bigint | null
    blocktime: number | null
    block: bigint | null
    fdv: Decimal | null
  }

  export type TransactionsMinAggregateOutputType = {
    id: bigint | null
    signature: string | null
    address: string | null
    blocktime: number | null
    created_at: Date | null
    block: bigint | null
    sol_price: string | null
    swap_type: string | null
    token: string | null
    from_address: string | null
    network: string | null
    state: string | null
    to_address: string | null
    fdv: Decimal | null
    updated_at: Date | null
  }

  export type TransactionsMaxAggregateOutputType = {
    id: bigint | null
    signature: string | null
    address: string | null
    blocktime: number | null
    created_at: Date | null
    block: bigint | null
    sol_price: string | null
    swap_type: string | null
    token: string | null
    from_address: string | null
    network: string | null
    state: string | null
    to_address: string | null
    fdv: Decimal | null
    updated_at: Date | null
  }

  export type TransactionsCountAggregateOutputType = {
    id: number
    signature: number
    address: number
    blocktime: number
    created_at: number
    actions: number
    block: number
    sol_price: number
    swap_actions: number
    swap_type: number
    token: number
    from_address: number
    network: number
    state: number
    swap: number
    to_address: number
    fdv: number
    updated_at: number
    _all: number
  }


  export type TransactionsAvgAggregateInputType = {
    id?: true
    blocktime?: true
    block?: true
    fdv?: true
  }

  export type TransactionsSumAggregateInputType = {
    id?: true
    blocktime?: true
    block?: true
    fdv?: true
  }

  export type TransactionsMinAggregateInputType = {
    id?: true
    signature?: true
    address?: true
    blocktime?: true
    created_at?: true
    block?: true
    sol_price?: true
    swap_type?: true
    token?: true
    from_address?: true
    network?: true
    state?: true
    to_address?: true
    fdv?: true
    updated_at?: true
  }

  export type TransactionsMaxAggregateInputType = {
    id?: true
    signature?: true
    address?: true
    blocktime?: true
    created_at?: true
    block?: true
    sol_price?: true
    swap_type?: true
    token?: true
    from_address?: true
    network?: true
    state?: true
    to_address?: true
    fdv?: true
    updated_at?: true
  }

  export type TransactionsCountAggregateInputType = {
    id?: true
    signature?: true
    address?: true
    blocktime?: true
    created_at?: true
    actions?: true
    block?: true
    sol_price?: true
    swap_actions?: true
    swap_type?: true
    token?: true
    from_address?: true
    network?: true
    state?: true
    swap?: true
    to_address?: true
    fdv?: true
    updated_at?: true
    _all?: true
  }

  export type TransactionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transactions to aggregate.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned transactions
    **/
    _count?: true | TransactionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionsMaxAggregateInputType
  }

  export type GetTransactionsAggregateType<T extends TransactionsAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactions[P]>
      : GetScalarType<T[P], AggregateTransactions[P]>
  }




  export type transactionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithAggregationInput | transactionsOrderByWithAggregationInput[]
    by: TransactionsScalarFieldEnum[] | TransactionsScalarFieldEnum
    having?: transactionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionsCountAggregateInputType | true
    _avg?: TransactionsAvgAggregateInputType
    _sum?: TransactionsSumAggregateInputType
    _min?: TransactionsMinAggregateInputType
    _max?: TransactionsMaxAggregateInputType
  }

  export type TransactionsGroupByOutputType = {
    id: bigint
    signature: string
    address: string
    blocktime: number
    created_at: Date
    actions: JsonValue | null
    block: bigint
    sol_price: string
    swap_actions: JsonValue | null
    swap_type: string
    token: string | null
    from_address: string | null
    network: string
    state: string
    swap: JsonValue | null
    to_address: string | null
    fdv: Decimal
    updated_at: Date
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  type GetTransactionsGroupByPayload<T extends transactionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
        }
      >
    >


  export type transactionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signature?: boolean
    address?: boolean
    blocktime?: boolean
    created_at?: boolean
    actions?: boolean
    block?: boolean
    sol_price?: boolean
    swap_actions?: boolean
    swap_type?: boolean
    token?: boolean
    from_address?: boolean
    network?: boolean
    state?: boolean
    swap?: boolean
    to_address?: boolean
    fdv?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["transactions"]>

  export type transactionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signature?: boolean
    address?: boolean
    blocktime?: boolean
    created_at?: boolean
    actions?: boolean
    block?: boolean
    sol_price?: boolean
    swap_actions?: boolean
    swap_type?: boolean
    token?: boolean
    from_address?: boolean
    network?: boolean
    state?: boolean
    swap?: boolean
    to_address?: boolean
    fdv?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["transactions"]>

  export type transactionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signature?: boolean
    address?: boolean
    blocktime?: boolean
    created_at?: boolean
    actions?: boolean
    block?: boolean
    sol_price?: boolean
    swap_actions?: boolean
    swap_type?: boolean
    token?: boolean
    from_address?: boolean
    network?: boolean
    state?: boolean
    swap?: boolean
    to_address?: boolean
    fdv?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["transactions"]>

  export type transactionsSelectScalar = {
    id?: boolean
    signature?: boolean
    address?: boolean
    blocktime?: boolean
    created_at?: boolean
    actions?: boolean
    block?: boolean
    sol_price?: boolean
    swap_actions?: boolean
    swap_type?: boolean
    token?: boolean
    from_address?: boolean
    network?: boolean
    state?: boolean
    swap?: boolean
    to_address?: boolean
    fdv?: boolean
    updated_at?: boolean
  }

  export type transactionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "signature" | "address" | "blocktime" | "created_at" | "actions" | "block" | "sol_price" | "swap_actions" | "swap_type" | "token" | "from_address" | "network" | "state" | "swap" | "to_address" | "fdv" | "updated_at", ExtArgs["result"]["transactions"]>

  export type $transactionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "transactions"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      signature: string
      address: string
      blocktime: number
      created_at: Date
      actions: Prisma.JsonValue | null
      block: bigint
      sol_price: string
      swap_actions: Prisma.JsonValue | null
      swap_type: string
      token: string | null
      from_address: string | null
      network: string
      state: string
      swap: Prisma.JsonValue | null
      to_address: string | null
      fdv: Prisma.Decimal
      updated_at: Date
    }, ExtArgs["result"]["transactions"]>
    composites: {}
  }

  type transactionsGetPayload<S extends boolean | null | undefined | transactionsDefaultArgs> = $Result.GetResult<Prisma.$transactionsPayload, S>

  type transactionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<transactionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionsCountAggregateInputType | true
    }

  export interface transactionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['transactions'], meta: { name: 'transactions' } }
    /**
     * Find zero or one Transactions that matches the filter.
     * @param {transactionsFindUniqueArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends transactionsFindUniqueArgs>(args: SelectSubset<T, transactionsFindUniqueArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Transactions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {transactionsFindUniqueOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends transactionsFindUniqueOrThrowArgs>(args: SelectSubset<T, transactionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindFirstArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends transactionsFindFirstArgs>(args?: SelectSubset<T, transactionsFindFirstArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Transactions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindFirstOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends transactionsFindFirstOrThrowArgs>(args?: SelectSubset<T, transactionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transactions.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transactions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionsWithIdOnly = await prisma.transactions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends transactionsFindManyArgs>(args?: SelectSubset<T, transactionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Transactions.
     * @param {transactionsCreateArgs} args - Arguments to create a Transactions.
     * @example
     * // Create one Transactions
     * const Transactions = await prisma.transactions.create({
     *   data: {
     *     // ... data to create a Transactions
     *   }
     * })
     * 
     */
    create<T extends transactionsCreateArgs>(args: SelectSubset<T, transactionsCreateArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Transactions.
     * @param {transactionsCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transactions = await prisma.transactions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends transactionsCreateManyArgs>(args?: SelectSubset<T, transactionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {transactionsCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transactions = await prisma.transactions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionsWithIdOnly = await prisma.transactions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends transactionsCreateManyAndReturnArgs>(args?: SelectSubset<T, transactionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Transactions.
     * @param {transactionsDeleteArgs} args - Arguments to delete one Transactions.
     * @example
     * // Delete one Transactions
     * const Transactions = await prisma.transactions.delete({
     *   where: {
     *     // ... filter to delete one Transactions
     *   }
     * })
     * 
     */
    delete<T extends transactionsDeleteArgs>(args: SelectSubset<T, transactionsDeleteArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Transactions.
     * @param {transactionsUpdateArgs} args - Arguments to update one Transactions.
     * @example
     * // Update one Transactions
     * const transactions = await prisma.transactions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends transactionsUpdateArgs>(args: SelectSubset<T, transactionsUpdateArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Transactions.
     * @param {transactionsDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transactions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends transactionsDeleteManyArgs>(args?: SelectSubset<T, transactionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transactions = await prisma.transactions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends transactionsUpdateManyArgs>(args: SelectSubset<T, transactionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {transactionsUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transactions = await prisma.transactions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `id`
     * const transactionsWithIdOnly = await prisma.transactions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends transactionsUpdateManyAndReturnArgs>(args: SelectSubset<T, transactionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Transactions.
     * @param {transactionsUpsertArgs} args - Arguments to update or create a Transactions.
     * @example
     * // Update or create a Transactions
     * const transactions = await prisma.transactions.upsert({
     *   create: {
     *     // ... data to create a Transactions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transactions we want to update
     *   }
     * })
     */
    upsert<T extends transactionsUpsertArgs>(args: SelectSubset<T, transactionsUpsertArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transactions.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends transactionsCountArgs>(
      args?: Subset<T, transactionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionsAggregateArgs>(args: Subset<T, TransactionsAggregateArgs>): Prisma.PrismaPromise<GetTransactionsAggregateType<T>>

    /**
     * Group by Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends transactionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: transactionsGroupByArgs['orderBy'] }
        : { orderBy?: transactionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, transactionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the transactions model
   */
  readonly fields: transactionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for transactions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__transactionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the transactions model
   */ 
  interface transactionsFieldRefs {
    readonly id: FieldRef<"transactions", 'BigInt'>
    readonly signature: FieldRef<"transactions", 'String'>
    readonly address: FieldRef<"transactions", 'String'>
    readonly blocktime: FieldRef<"transactions", 'Int'>
    readonly created_at: FieldRef<"transactions", 'DateTime'>
    readonly actions: FieldRef<"transactions", 'Json'>
    readonly block: FieldRef<"transactions", 'BigInt'>
    readonly sol_price: FieldRef<"transactions", 'String'>
    readonly swap_actions: FieldRef<"transactions", 'Json'>
    readonly swap_type: FieldRef<"transactions", 'String'>
    readonly token: FieldRef<"transactions", 'String'>
    readonly from_address: FieldRef<"transactions", 'String'>
    readonly network: FieldRef<"transactions", 'String'>
    readonly state: FieldRef<"transactions", 'String'>
    readonly swap: FieldRef<"transactions", 'Json'>
    readonly to_address: FieldRef<"transactions", 'String'>
    readonly fdv: FieldRef<"transactions", 'Decimal'>
    readonly updated_at: FieldRef<"transactions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * transactions findUnique
   */
  export type transactionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions findUniqueOrThrow
   */
  export type transactionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions findFirst
   */
  export type transactionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions findFirstOrThrow
   */
  export type transactionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions findMany
   */
  export type transactionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions create
   */
  export type transactionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * The data needed to create a transactions.
     */
    data: XOR<transactionsCreateInput, transactionsUncheckedCreateInput>
  }

  /**
   * transactions createMany
   */
  export type transactionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many transactions.
     */
    data: transactionsCreateManyInput | transactionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * transactions createManyAndReturn
   */
  export type transactionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * The data used to create many transactions.
     */
    data: transactionsCreateManyInput | transactionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * transactions update
   */
  export type transactionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * The data needed to update a transactions.
     */
    data: XOR<transactionsUpdateInput, transactionsUncheckedUpdateInput>
    /**
     * Choose, which transactions to update.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions updateMany
   */
  export type transactionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update transactions.
     */
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyInput>
    /**
     * Filter which transactions to update
     */
    where?: transactionsWhereInput
  }

  /**
   * transactions updateManyAndReturn
   */
  export type transactionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * The data used to update transactions.
     */
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyInput>
    /**
     * Filter which transactions to update
     */
    where?: transactionsWhereInput
  }

  /**
   * transactions upsert
   */
  export type transactionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * The filter to search for the transactions to update in case it exists.
     */
    where: transactionsWhereUniqueInput
    /**
     * In case the transactions found by the `where` argument doesn't exist, create a new transactions with this data.
     */
    create: XOR<transactionsCreateInput, transactionsUncheckedCreateInput>
    /**
     * In case the transactions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<transactionsUpdateInput, transactionsUncheckedUpdateInput>
  }

  /**
   * transactions delete
   */
  export type transactionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
    /**
     * Filter which transactions to delete.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions deleteMany
   */
  export type transactionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transactions to delete
     */
    where?: transactionsWhereInput
  }

  /**
   * transactions without action
   */
  export type transactionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the transactions
     */
    omit?: transactionsOmit<ExtArgs> | null
  }


  /**
   * Model tts
   */

  export type AggregateTts = {
    _count: TtsCountAggregateOutputType | null
    _avg: TtsAvgAggregateOutputType | null
    _sum: TtsSumAggregateOutputType | null
    _min: TtsMinAggregateOutputType | null
    _max: TtsMaxAggregateOutputType | null
  }

  export type TtsAvgAggregateOutputType = {
    id: number | null
    state: number | null
  }

  export type TtsSumAggregateOutputType = {
    id: number | null
    state: number | null
  }

  export type TtsMinAggregateOutputType = {
    id: number | null
    tts_address: string | null
    state: number | null
    privy_address: string | null
    user_did: string | null
    updated_at: Date | null
  }

  export type TtsMaxAggregateOutputType = {
    id: number | null
    tts_address: string | null
    state: number | null
    privy_address: string | null
    user_did: string | null
    updated_at: Date | null
  }

  export type TtsCountAggregateOutputType = {
    id: number
    tts_address: number
    state: number
    privy_address: number
    user_did: number
    updated_at: number
    _all: number
  }


  export type TtsAvgAggregateInputType = {
    id?: true
    state?: true
  }

  export type TtsSumAggregateInputType = {
    id?: true
    state?: true
  }

  export type TtsMinAggregateInputType = {
    id?: true
    tts_address?: true
    state?: true
    privy_address?: true
    user_did?: true
    updated_at?: true
  }

  export type TtsMaxAggregateInputType = {
    id?: true
    tts_address?: true
    state?: true
    privy_address?: true
    user_did?: true
    updated_at?: true
  }

  export type TtsCountAggregateInputType = {
    id?: true
    tts_address?: true
    state?: true
    privy_address?: true
    user_did?: true
    updated_at?: true
    _all?: true
  }

  export type TtsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tts to aggregate.
     */
    where?: ttsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tts to fetch.
     */
    orderBy?: ttsOrderByWithRelationInput | ttsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ttsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tts
    **/
    _count?: true | TtsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TtsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TtsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TtsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TtsMaxAggregateInputType
  }

  export type GetTtsAggregateType<T extends TtsAggregateArgs> = {
        [P in keyof T & keyof AggregateTts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTts[P]>
      : GetScalarType<T[P], AggregateTts[P]>
  }




  export type ttsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ttsWhereInput
    orderBy?: ttsOrderByWithAggregationInput | ttsOrderByWithAggregationInput[]
    by: TtsScalarFieldEnum[] | TtsScalarFieldEnum
    having?: ttsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TtsCountAggregateInputType | true
    _avg?: TtsAvgAggregateInputType
    _sum?: TtsSumAggregateInputType
    _min?: TtsMinAggregateInputType
    _max?: TtsMaxAggregateInputType
  }

  export type TtsGroupByOutputType = {
    id: number
    tts_address: string
    state: number
    privy_address: string
    user_did: string
    updated_at: Date
    _count: TtsCountAggregateOutputType | null
    _avg: TtsAvgAggregateOutputType | null
    _sum: TtsSumAggregateOutputType | null
    _min: TtsMinAggregateOutputType | null
    _max: TtsMaxAggregateOutputType | null
  }

  type GetTtsGroupByPayload<T extends ttsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TtsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TtsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TtsGroupByOutputType[P]>
            : GetScalarType<T[P], TtsGroupByOutputType[P]>
        }
      >
    >


  export type ttsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tts_address?: boolean
    state?: boolean
    privy_address?: boolean
    user_did?: boolean
    updated_at?: boolean
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tts"]>

  export type ttsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tts_address?: boolean
    state?: boolean
    privy_address?: boolean
    user_did?: boolean
    updated_at?: boolean
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tts"]>

  export type ttsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tts_address?: boolean
    state?: boolean
    privy_address?: boolean
    user_did?: boolean
    updated_at?: boolean
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tts"]>

  export type ttsSelectScalar = {
    id?: boolean
    tts_address?: boolean
    state?: boolean
    privy_address?: boolean
    user_did?: boolean
    updated_at?: boolean
  }

  export type ttsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tts_address" | "state" | "privy_address" | "user_did" | "updated_at", ExtArgs["result"]["tts"]>
  export type ttsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }
  export type ttsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }
  export type ttsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }

  export type $ttsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tts"
    objects: {
      privy_user: Prisma.$privy_userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tts_address: string
      state: number
      privy_address: string
      user_did: string
      updated_at: Date
    }, ExtArgs["result"]["tts"]>
    composites: {}
  }

  type ttsGetPayload<S extends boolean | null | undefined | ttsDefaultArgs> = $Result.GetResult<Prisma.$ttsPayload, S>

  type ttsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ttsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TtsCountAggregateInputType | true
    }

  export interface ttsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tts'], meta: { name: 'tts' } }
    /**
     * Find zero or one Tts that matches the filter.
     * @param {ttsFindUniqueArgs} args - Arguments to find a Tts
     * @example
     * // Get one Tts
     * const tts = await prisma.tts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ttsFindUniqueArgs>(args: SelectSubset<T, ttsFindUniqueArgs<ExtArgs>>): Prisma__ttsClient<$Result.GetResult<Prisma.$ttsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Tts that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ttsFindUniqueOrThrowArgs} args - Arguments to find a Tts
     * @example
     * // Get one Tts
     * const tts = await prisma.tts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ttsFindUniqueOrThrowArgs>(args: SelectSubset<T, ttsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ttsClient<$Result.GetResult<Prisma.$ttsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Tts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ttsFindFirstArgs} args - Arguments to find a Tts
     * @example
     * // Get one Tts
     * const tts = await prisma.tts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ttsFindFirstArgs>(args?: SelectSubset<T, ttsFindFirstArgs<ExtArgs>>): Prisma__ttsClient<$Result.GetResult<Prisma.$ttsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Tts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ttsFindFirstOrThrowArgs} args - Arguments to find a Tts
     * @example
     * // Get one Tts
     * const tts = await prisma.tts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ttsFindFirstOrThrowArgs>(args?: SelectSubset<T, ttsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ttsClient<$Result.GetResult<Prisma.$ttsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Tts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ttsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tts
     * const tts = await prisma.tts.findMany()
     * 
     * // Get first 10 Tts
     * const tts = await prisma.tts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ttsWithIdOnly = await prisma.tts.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ttsFindManyArgs>(args?: SelectSubset<T, ttsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ttsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Tts.
     * @param {ttsCreateArgs} args - Arguments to create a Tts.
     * @example
     * // Create one Tts
     * const Tts = await prisma.tts.create({
     *   data: {
     *     // ... data to create a Tts
     *   }
     * })
     * 
     */
    create<T extends ttsCreateArgs>(args: SelectSubset<T, ttsCreateArgs<ExtArgs>>): Prisma__ttsClient<$Result.GetResult<Prisma.$ttsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Tts.
     * @param {ttsCreateManyArgs} args - Arguments to create many Tts.
     * @example
     * // Create many Tts
     * const tts = await prisma.tts.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ttsCreateManyArgs>(args?: SelectSubset<T, ttsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tts and returns the data saved in the database.
     * @param {ttsCreateManyAndReturnArgs} args - Arguments to create many Tts.
     * @example
     * // Create many Tts
     * const tts = await prisma.tts.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tts and only return the `id`
     * const ttsWithIdOnly = await prisma.tts.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ttsCreateManyAndReturnArgs>(args?: SelectSubset<T, ttsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ttsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Tts.
     * @param {ttsDeleteArgs} args - Arguments to delete one Tts.
     * @example
     * // Delete one Tts
     * const Tts = await prisma.tts.delete({
     *   where: {
     *     // ... filter to delete one Tts
     *   }
     * })
     * 
     */
    delete<T extends ttsDeleteArgs>(args: SelectSubset<T, ttsDeleteArgs<ExtArgs>>): Prisma__ttsClient<$Result.GetResult<Prisma.$ttsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Tts.
     * @param {ttsUpdateArgs} args - Arguments to update one Tts.
     * @example
     * // Update one Tts
     * const tts = await prisma.tts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ttsUpdateArgs>(args: SelectSubset<T, ttsUpdateArgs<ExtArgs>>): Prisma__ttsClient<$Result.GetResult<Prisma.$ttsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Tts.
     * @param {ttsDeleteManyArgs} args - Arguments to filter Tts to delete.
     * @example
     * // Delete a few Tts
     * const { count } = await prisma.tts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ttsDeleteManyArgs>(args?: SelectSubset<T, ttsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ttsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tts
     * const tts = await prisma.tts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ttsUpdateManyArgs>(args: SelectSubset<T, ttsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tts and returns the data updated in the database.
     * @param {ttsUpdateManyAndReturnArgs} args - Arguments to update many Tts.
     * @example
     * // Update many Tts
     * const tts = await prisma.tts.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tts and only return the `id`
     * const ttsWithIdOnly = await prisma.tts.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ttsUpdateManyAndReturnArgs>(args: SelectSubset<T, ttsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ttsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Tts.
     * @param {ttsUpsertArgs} args - Arguments to update or create a Tts.
     * @example
     * // Update or create a Tts
     * const tts = await prisma.tts.upsert({
     *   create: {
     *     // ... data to create a Tts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tts we want to update
     *   }
     * })
     */
    upsert<T extends ttsUpsertArgs>(args: SelectSubset<T, ttsUpsertArgs<ExtArgs>>): Prisma__ttsClient<$Result.GetResult<Prisma.$ttsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Tts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ttsCountArgs} args - Arguments to filter Tts to count.
     * @example
     * // Count the number of Tts
     * const count = await prisma.tts.count({
     *   where: {
     *     // ... the filter for the Tts we want to count
     *   }
     * })
    **/
    count<T extends ttsCountArgs>(
      args?: Subset<T, ttsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TtsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TtsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TtsAggregateArgs>(args: Subset<T, TtsAggregateArgs>): Prisma.PrismaPromise<GetTtsAggregateType<T>>

    /**
     * Group by Tts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ttsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ttsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ttsGroupByArgs['orderBy'] }
        : { orderBy?: ttsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ttsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTtsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tts model
   */
  readonly fields: ttsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ttsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    privy_user<T extends privy_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, privy_userDefaultArgs<ExtArgs>>): Prisma__privy_userClient<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tts model
   */ 
  interface ttsFieldRefs {
    readonly id: FieldRef<"tts", 'Int'>
    readonly tts_address: FieldRef<"tts", 'String'>
    readonly state: FieldRef<"tts", 'Int'>
    readonly privy_address: FieldRef<"tts", 'String'>
    readonly user_did: FieldRef<"tts", 'String'>
    readonly updated_at: FieldRef<"tts", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * tts findUnique
   */
  export type ttsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tts
     */
    select?: ttsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tts
     */
    omit?: ttsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ttsInclude<ExtArgs> | null
    /**
     * Filter, which tts to fetch.
     */
    where: ttsWhereUniqueInput
  }

  /**
   * tts findUniqueOrThrow
   */
  export type ttsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tts
     */
    select?: ttsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tts
     */
    omit?: ttsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ttsInclude<ExtArgs> | null
    /**
     * Filter, which tts to fetch.
     */
    where: ttsWhereUniqueInput
  }

  /**
   * tts findFirst
   */
  export type ttsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tts
     */
    select?: ttsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tts
     */
    omit?: ttsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ttsInclude<ExtArgs> | null
    /**
     * Filter, which tts to fetch.
     */
    where?: ttsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tts to fetch.
     */
    orderBy?: ttsOrderByWithRelationInput | ttsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tts.
     */
    cursor?: ttsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tts.
     */
    distinct?: TtsScalarFieldEnum | TtsScalarFieldEnum[]
  }

  /**
   * tts findFirstOrThrow
   */
  export type ttsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tts
     */
    select?: ttsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tts
     */
    omit?: ttsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ttsInclude<ExtArgs> | null
    /**
     * Filter, which tts to fetch.
     */
    where?: ttsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tts to fetch.
     */
    orderBy?: ttsOrderByWithRelationInput | ttsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tts.
     */
    cursor?: ttsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tts.
     */
    distinct?: TtsScalarFieldEnum | TtsScalarFieldEnum[]
  }

  /**
   * tts findMany
   */
  export type ttsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tts
     */
    select?: ttsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tts
     */
    omit?: ttsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ttsInclude<ExtArgs> | null
    /**
     * Filter, which tts to fetch.
     */
    where?: ttsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tts to fetch.
     */
    orderBy?: ttsOrderByWithRelationInput | ttsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tts.
     */
    cursor?: ttsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tts.
     */
    skip?: number
    distinct?: TtsScalarFieldEnum | TtsScalarFieldEnum[]
  }

  /**
   * tts create
   */
  export type ttsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tts
     */
    select?: ttsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tts
     */
    omit?: ttsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ttsInclude<ExtArgs> | null
    /**
     * The data needed to create a tts.
     */
    data: XOR<ttsCreateInput, ttsUncheckedCreateInput>
  }

  /**
   * tts createMany
   */
  export type ttsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tts.
     */
    data: ttsCreateManyInput | ttsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tts createManyAndReturn
   */
  export type ttsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tts
     */
    select?: ttsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the tts
     */
    omit?: ttsOmit<ExtArgs> | null
    /**
     * The data used to create many tts.
     */
    data: ttsCreateManyInput | ttsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ttsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * tts update
   */
  export type ttsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tts
     */
    select?: ttsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tts
     */
    omit?: ttsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ttsInclude<ExtArgs> | null
    /**
     * The data needed to update a tts.
     */
    data: XOR<ttsUpdateInput, ttsUncheckedUpdateInput>
    /**
     * Choose, which tts to update.
     */
    where: ttsWhereUniqueInput
  }

  /**
   * tts updateMany
   */
  export type ttsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tts.
     */
    data: XOR<ttsUpdateManyMutationInput, ttsUncheckedUpdateManyInput>
    /**
     * Filter which tts to update
     */
    where?: ttsWhereInput
  }

  /**
   * tts updateManyAndReturn
   */
  export type ttsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tts
     */
    select?: ttsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the tts
     */
    omit?: ttsOmit<ExtArgs> | null
    /**
     * The data used to update tts.
     */
    data: XOR<ttsUpdateManyMutationInput, ttsUncheckedUpdateManyInput>
    /**
     * Filter which tts to update
     */
    where?: ttsWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ttsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * tts upsert
   */
  export type ttsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tts
     */
    select?: ttsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tts
     */
    omit?: ttsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ttsInclude<ExtArgs> | null
    /**
     * The filter to search for the tts to update in case it exists.
     */
    where: ttsWhereUniqueInput
    /**
     * In case the tts found by the `where` argument doesn't exist, create a new tts with this data.
     */
    create: XOR<ttsCreateInput, ttsUncheckedCreateInput>
    /**
     * In case the tts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ttsUpdateInput, ttsUncheckedUpdateInput>
  }

  /**
   * tts delete
   */
  export type ttsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tts
     */
    select?: ttsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tts
     */
    omit?: ttsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ttsInclude<ExtArgs> | null
    /**
     * Filter which tts to delete.
     */
    where: ttsWhereUniqueInput
  }

  /**
   * tts deleteMany
   */
  export type ttsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tts to delete
     */
    where?: ttsWhereInput
  }

  /**
   * tts without action
   */
  export type ttsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tts
     */
    select?: ttsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tts
     */
    omit?: ttsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ttsInclude<ExtArgs> | null
  }


  /**
   * Model user_watching_tokens
   */

  export type AggregateUser_watching_tokens = {
    _count: User_watching_tokensCountAggregateOutputType | null
    _avg: User_watching_tokensAvgAggregateOutputType | null
    _sum: User_watching_tokensSumAggregateOutputType | null
    _min: User_watching_tokensMinAggregateOutputType | null
    _max: User_watching_tokensMaxAggregateOutputType | null
  }

  export type User_watching_tokensAvgAggregateOutputType = {
    id: number | null
    state: number | null
  }

  export type User_watching_tokensSumAggregateOutputType = {
    id: number | null
    state: number | null
  }

  export type User_watching_tokensMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    token_address: string | null
    state: number | null
    privy_address: string | null
    user_did: string | null
    updated_at: Date | null
  }

  export type User_watching_tokensMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    token_address: string | null
    state: number | null
    privy_address: string | null
    user_did: string | null
    updated_at: Date | null
  }

  export type User_watching_tokensCountAggregateOutputType = {
    id: number
    created_at: number
    token_address: number
    state: number
    privy_address: number
    user_did: number
    updated_at: number
    _all: number
  }


  export type User_watching_tokensAvgAggregateInputType = {
    id?: true
    state?: true
  }

  export type User_watching_tokensSumAggregateInputType = {
    id?: true
    state?: true
  }

  export type User_watching_tokensMinAggregateInputType = {
    id?: true
    created_at?: true
    token_address?: true
    state?: true
    privy_address?: true
    user_did?: true
    updated_at?: true
  }

  export type User_watching_tokensMaxAggregateInputType = {
    id?: true
    created_at?: true
    token_address?: true
    state?: true
    privy_address?: true
    user_did?: true
    updated_at?: true
  }

  export type User_watching_tokensCountAggregateInputType = {
    id?: true
    created_at?: true
    token_address?: true
    state?: true
    privy_address?: true
    user_did?: true
    updated_at?: true
    _all?: true
  }

  export type User_watching_tokensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_watching_tokens to aggregate.
     */
    where?: user_watching_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_watching_tokens to fetch.
     */
    orderBy?: user_watching_tokensOrderByWithRelationInput | user_watching_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: user_watching_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_watching_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_watching_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned user_watching_tokens
    **/
    _count?: true | User_watching_tokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: User_watching_tokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: User_watching_tokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: User_watching_tokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: User_watching_tokensMaxAggregateInputType
  }

  export type GetUser_watching_tokensAggregateType<T extends User_watching_tokensAggregateArgs> = {
        [P in keyof T & keyof AggregateUser_watching_tokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser_watching_tokens[P]>
      : GetScalarType<T[P], AggregateUser_watching_tokens[P]>
  }




  export type user_watching_tokensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: user_watching_tokensWhereInput
    orderBy?: user_watching_tokensOrderByWithAggregationInput | user_watching_tokensOrderByWithAggregationInput[]
    by: User_watching_tokensScalarFieldEnum[] | User_watching_tokensScalarFieldEnum
    having?: user_watching_tokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: User_watching_tokensCountAggregateInputType | true
    _avg?: User_watching_tokensAvgAggregateInputType
    _sum?: User_watching_tokensSumAggregateInputType
    _min?: User_watching_tokensMinAggregateInputType
    _max?: User_watching_tokensMaxAggregateInputType
  }

  export type User_watching_tokensGroupByOutputType = {
    id: number
    created_at: Date
    token_address: string
    state: number
    privy_address: string
    user_did: string
    updated_at: Date
    _count: User_watching_tokensCountAggregateOutputType | null
    _avg: User_watching_tokensAvgAggregateOutputType | null
    _sum: User_watching_tokensSumAggregateOutputType | null
    _min: User_watching_tokensMinAggregateOutputType | null
    _max: User_watching_tokensMaxAggregateOutputType | null
  }

  type GetUser_watching_tokensGroupByPayload<T extends user_watching_tokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<User_watching_tokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof User_watching_tokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], User_watching_tokensGroupByOutputType[P]>
            : GetScalarType<T[P], User_watching_tokensGroupByOutputType[P]>
        }
      >
    >


  export type user_watching_tokensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    token_address?: boolean
    state?: boolean
    privy_address?: boolean
    user_did?: boolean
    updated_at?: boolean
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_watching_tokens"]>

  export type user_watching_tokensSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    token_address?: boolean
    state?: boolean
    privy_address?: boolean
    user_did?: boolean
    updated_at?: boolean
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_watching_tokens"]>

  export type user_watching_tokensSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    token_address?: boolean
    state?: boolean
    privy_address?: boolean
    user_did?: boolean
    updated_at?: boolean
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user_watching_tokens"]>

  export type user_watching_tokensSelectScalar = {
    id?: boolean
    created_at?: boolean
    token_address?: boolean
    state?: boolean
    privy_address?: boolean
    user_did?: boolean
    updated_at?: boolean
  }

  export type user_watching_tokensOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "token_address" | "state" | "privy_address" | "user_did" | "updated_at", ExtArgs["result"]["user_watching_tokens"]>
  export type user_watching_tokensInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }
  export type user_watching_tokensIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }
  export type user_watching_tokensIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
  }

  export type $user_watching_tokensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user_watching_tokens"
    objects: {
      privy_user: Prisma.$privy_userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      created_at: Date
      token_address: string
      state: number
      privy_address: string
      user_did: string
      updated_at: Date
    }, ExtArgs["result"]["user_watching_tokens"]>
    composites: {}
  }

  type user_watching_tokensGetPayload<S extends boolean | null | undefined | user_watching_tokensDefaultArgs> = $Result.GetResult<Prisma.$user_watching_tokensPayload, S>

  type user_watching_tokensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<user_watching_tokensFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: User_watching_tokensCountAggregateInputType | true
    }

  export interface user_watching_tokensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user_watching_tokens'], meta: { name: 'user_watching_tokens' } }
    /**
     * Find zero or one User_watching_tokens that matches the filter.
     * @param {user_watching_tokensFindUniqueArgs} args - Arguments to find a User_watching_tokens
     * @example
     * // Get one User_watching_tokens
     * const user_watching_tokens = await prisma.user_watching_tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends user_watching_tokensFindUniqueArgs>(args: SelectSubset<T, user_watching_tokensFindUniqueArgs<ExtArgs>>): Prisma__user_watching_tokensClient<$Result.GetResult<Prisma.$user_watching_tokensPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User_watching_tokens that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {user_watching_tokensFindUniqueOrThrowArgs} args - Arguments to find a User_watching_tokens
     * @example
     * // Get one User_watching_tokens
     * const user_watching_tokens = await prisma.user_watching_tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends user_watching_tokensFindUniqueOrThrowArgs>(args: SelectSubset<T, user_watching_tokensFindUniqueOrThrowArgs<ExtArgs>>): Prisma__user_watching_tokensClient<$Result.GetResult<Prisma.$user_watching_tokensPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User_watching_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_watching_tokensFindFirstArgs} args - Arguments to find a User_watching_tokens
     * @example
     * // Get one User_watching_tokens
     * const user_watching_tokens = await prisma.user_watching_tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends user_watching_tokensFindFirstArgs>(args?: SelectSubset<T, user_watching_tokensFindFirstArgs<ExtArgs>>): Prisma__user_watching_tokensClient<$Result.GetResult<Prisma.$user_watching_tokensPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User_watching_tokens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_watching_tokensFindFirstOrThrowArgs} args - Arguments to find a User_watching_tokens
     * @example
     * // Get one User_watching_tokens
     * const user_watching_tokens = await prisma.user_watching_tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends user_watching_tokensFindFirstOrThrowArgs>(args?: SelectSubset<T, user_watching_tokensFindFirstOrThrowArgs<ExtArgs>>): Prisma__user_watching_tokensClient<$Result.GetResult<Prisma.$user_watching_tokensPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more User_watching_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_watching_tokensFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all User_watching_tokens
     * const user_watching_tokens = await prisma.user_watching_tokens.findMany()
     * 
     * // Get first 10 User_watching_tokens
     * const user_watching_tokens = await prisma.user_watching_tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const user_watching_tokensWithIdOnly = await prisma.user_watching_tokens.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends user_watching_tokensFindManyArgs>(args?: SelectSubset<T, user_watching_tokensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_watching_tokensPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User_watching_tokens.
     * @param {user_watching_tokensCreateArgs} args - Arguments to create a User_watching_tokens.
     * @example
     * // Create one User_watching_tokens
     * const User_watching_tokens = await prisma.user_watching_tokens.create({
     *   data: {
     *     // ... data to create a User_watching_tokens
     *   }
     * })
     * 
     */
    create<T extends user_watching_tokensCreateArgs>(args: SelectSubset<T, user_watching_tokensCreateArgs<ExtArgs>>): Prisma__user_watching_tokensClient<$Result.GetResult<Prisma.$user_watching_tokensPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many User_watching_tokens.
     * @param {user_watching_tokensCreateManyArgs} args - Arguments to create many User_watching_tokens.
     * @example
     * // Create many User_watching_tokens
     * const user_watching_tokens = await prisma.user_watching_tokens.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends user_watching_tokensCreateManyArgs>(args?: SelectSubset<T, user_watching_tokensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many User_watching_tokens and returns the data saved in the database.
     * @param {user_watching_tokensCreateManyAndReturnArgs} args - Arguments to create many User_watching_tokens.
     * @example
     * // Create many User_watching_tokens
     * const user_watching_tokens = await prisma.user_watching_tokens.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many User_watching_tokens and only return the `id`
     * const user_watching_tokensWithIdOnly = await prisma.user_watching_tokens.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends user_watching_tokensCreateManyAndReturnArgs>(args?: SelectSubset<T, user_watching_tokensCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_watching_tokensPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User_watching_tokens.
     * @param {user_watching_tokensDeleteArgs} args - Arguments to delete one User_watching_tokens.
     * @example
     * // Delete one User_watching_tokens
     * const User_watching_tokens = await prisma.user_watching_tokens.delete({
     *   where: {
     *     // ... filter to delete one User_watching_tokens
     *   }
     * })
     * 
     */
    delete<T extends user_watching_tokensDeleteArgs>(args: SelectSubset<T, user_watching_tokensDeleteArgs<ExtArgs>>): Prisma__user_watching_tokensClient<$Result.GetResult<Prisma.$user_watching_tokensPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User_watching_tokens.
     * @param {user_watching_tokensUpdateArgs} args - Arguments to update one User_watching_tokens.
     * @example
     * // Update one User_watching_tokens
     * const user_watching_tokens = await prisma.user_watching_tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends user_watching_tokensUpdateArgs>(args: SelectSubset<T, user_watching_tokensUpdateArgs<ExtArgs>>): Prisma__user_watching_tokensClient<$Result.GetResult<Prisma.$user_watching_tokensPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more User_watching_tokens.
     * @param {user_watching_tokensDeleteManyArgs} args - Arguments to filter User_watching_tokens to delete.
     * @example
     * // Delete a few User_watching_tokens
     * const { count } = await prisma.user_watching_tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends user_watching_tokensDeleteManyArgs>(args?: SelectSubset<T, user_watching_tokensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_watching_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_watching_tokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many User_watching_tokens
     * const user_watching_tokens = await prisma.user_watching_tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends user_watching_tokensUpdateManyArgs>(args: SelectSubset<T, user_watching_tokensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more User_watching_tokens and returns the data updated in the database.
     * @param {user_watching_tokensUpdateManyAndReturnArgs} args - Arguments to update many User_watching_tokens.
     * @example
     * // Update many User_watching_tokens
     * const user_watching_tokens = await prisma.user_watching_tokens.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more User_watching_tokens and only return the `id`
     * const user_watching_tokensWithIdOnly = await prisma.user_watching_tokens.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends user_watching_tokensUpdateManyAndReturnArgs>(args: SelectSubset<T, user_watching_tokensUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$user_watching_tokensPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User_watching_tokens.
     * @param {user_watching_tokensUpsertArgs} args - Arguments to update or create a User_watching_tokens.
     * @example
     * // Update or create a User_watching_tokens
     * const user_watching_tokens = await prisma.user_watching_tokens.upsert({
     *   create: {
     *     // ... data to create a User_watching_tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User_watching_tokens we want to update
     *   }
     * })
     */
    upsert<T extends user_watching_tokensUpsertArgs>(args: SelectSubset<T, user_watching_tokensUpsertArgs<ExtArgs>>): Prisma__user_watching_tokensClient<$Result.GetResult<Prisma.$user_watching_tokensPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of User_watching_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_watching_tokensCountArgs} args - Arguments to filter User_watching_tokens to count.
     * @example
     * // Count the number of User_watching_tokens
     * const count = await prisma.user_watching_tokens.count({
     *   where: {
     *     // ... the filter for the User_watching_tokens we want to count
     *   }
     * })
    **/
    count<T extends user_watching_tokensCountArgs>(
      args?: Subset<T, user_watching_tokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], User_watching_tokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User_watching_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {User_watching_tokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends User_watching_tokensAggregateArgs>(args: Subset<T, User_watching_tokensAggregateArgs>): Prisma.PrismaPromise<GetUser_watching_tokensAggregateType<T>>

    /**
     * Group by User_watching_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {user_watching_tokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends user_watching_tokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: user_watching_tokensGroupByArgs['orderBy'] }
        : { orderBy?: user_watching_tokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, user_watching_tokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUser_watching_tokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user_watching_tokens model
   */
  readonly fields: user_watching_tokensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user_watching_tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__user_watching_tokensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    privy_user<T extends privy_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, privy_userDefaultArgs<ExtArgs>>): Prisma__privy_userClient<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user_watching_tokens model
   */ 
  interface user_watching_tokensFieldRefs {
    readonly id: FieldRef<"user_watching_tokens", 'Int'>
    readonly created_at: FieldRef<"user_watching_tokens", 'DateTime'>
    readonly token_address: FieldRef<"user_watching_tokens", 'String'>
    readonly state: FieldRef<"user_watching_tokens", 'Int'>
    readonly privy_address: FieldRef<"user_watching_tokens", 'String'>
    readonly user_did: FieldRef<"user_watching_tokens", 'String'>
    readonly updated_at: FieldRef<"user_watching_tokens", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * user_watching_tokens findUnique
   */
  export type user_watching_tokensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_watching_tokens
     */
    select?: user_watching_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_watching_tokens
     */
    omit?: user_watching_tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_watching_tokensInclude<ExtArgs> | null
    /**
     * Filter, which user_watching_tokens to fetch.
     */
    where: user_watching_tokensWhereUniqueInput
  }

  /**
   * user_watching_tokens findUniqueOrThrow
   */
  export type user_watching_tokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_watching_tokens
     */
    select?: user_watching_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_watching_tokens
     */
    omit?: user_watching_tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_watching_tokensInclude<ExtArgs> | null
    /**
     * Filter, which user_watching_tokens to fetch.
     */
    where: user_watching_tokensWhereUniqueInput
  }

  /**
   * user_watching_tokens findFirst
   */
  export type user_watching_tokensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_watching_tokens
     */
    select?: user_watching_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_watching_tokens
     */
    omit?: user_watching_tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_watching_tokensInclude<ExtArgs> | null
    /**
     * Filter, which user_watching_tokens to fetch.
     */
    where?: user_watching_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_watching_tokens to fetch.
     */
    orderBy?: user_watching_tokensOrderByWithRelationInput | user_watching_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_watching_tokens.
     */
    cursor?: user_watching_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_watching_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_watching_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_watching_tokens.
     */
    distinct?: User_watching_tokensScalarFieldEnum | User_watching_tokensScalarFieldEnum[]
  }

  /**
   * user_watching_tokens findFirstOrThrow
   */
  export type user_watching_tokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_watching_tokens
     */
    select?: user_watching_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_watching_tokens
     */
    omit?: user_watching_tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_watching_tokensInclude<ExtArgs> | null
    /**
     * Filter, which user_watching_tokens to fetch.
     */
    where?: user_watching_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_watching_tokens to fetch.
     */
    orderBy?: user_watching_tokensOrderByWithRelationInput | user_watching_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for user_watching_tokens.
     */
    cursor?: user_watching_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_watching_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_watching_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of user_watching_tokens.
     */
    distinct?: User_watching_tokensScalarFieldEnum | User_watching_tokensScalarFieldEnum[]
  }

  /**
   * user_watching_tokens findMany
   */
  export type user_watching_tokensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_watching_tokens
     */
    select?: user_watching_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_watching_tokens
     */
    omit?: user_watching_tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_watching_tokensInclude<ExtArgs> | null
    /**
     * Filter, which user_watching_tokens to fetch.
     */
    where?: user_watching_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of user_watching_tokens to fetch.
     */
    orderBy?: user_watching_tokensOrderByWithRelationInput | user_watching_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing user_watching_tokens.
     */
    cursor?: user_watching_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` user_watching_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` user_watching_tokens.
     */
    skip?: number
    distinct?: User_watching_tokensScalarFieldEnum | User_watching_tokensScalarFieldEnum[]
  }

  /**
   * user_watching_tokens create
   */
  export type user_watching_tokensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_watching_tokens
     */
    select?: user_watching_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_watching_tokens
     */
    omit?: user_watching_tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_watching_tokensInclude<ExtArgs> | null
    /**
     * The data needed to create a user_watching_tokens.
     */
    data: XOR<user_watching_tokensCreateInput, user_watching_tokensUncheckedCreateInput>
  }

  /**
   * user_watching_tokens createMany
   */
  export type user_watching_tokensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many user_watching_tokens.
     */
    data: user_watching_tokensCreateManyInput | user_watching_tokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user_watching_tokens createManyAndReturn
   */
  export type user_watching_tokensCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_watching_tokens
     */
    select?: user_watching_tokensSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_watching_tokens
     */
    omit?: user_watching_tokensOmit<ExtArgs> | null
    /**
     * The data used to create many user_watching_tokens.
     */
    data: user_watching_tokensCreateManyInput | user_watching_tokensCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_watching_tokensIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_watching_tokens update
   */
  export type user_watching_tokensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_watching_tokens
     */
    select?: user_watching_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_watching_tokens
     */
    omit?: user_watching_tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_watching_tokensInclude<ExtArgs> | null
    /**
     * The data needed to update a user_watching_tokens.
     */
    data: XOR<user_watching_tokensUpdateInput, user_watching_tokensUncheckedUpdateInput>
    /**
     * Choose, which user_watching_tokens to update.
     */
    where: user_watching_tokensWhereUniqueInput
  }

  /**
   * user_watching_tokens updateMany
   */
  export type user_watching_tokensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update user_watching_tokens.
     */
    data: XOR<user_watching_tokensUpdateManyMutationInput, user_watching_tokensUncheckedUpdateManyInput>
    /**
     * Filter which user_watching_tokens to update
     */
    where?: user_watching_tokensWhereInput
  }

  /**
   * user_watching_tokens updateManyAndReturn
   */
  export type user_watching_tokensUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_watching_tokens
     */
    select?: user_watching_tokensSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the user_watching_tokens
     */
    omit?: user_watching_tokensOmit<ExtArgs> | null
    /**
     * The data used to update user_watching_tokens.
     */
    data: XOR<user_watching_tokensUpdateManyMutationInput, user_watching_tokensUncheckedUpdateManyInput>
    /**
     * Filter which user_watching_tokens to update
     */
    where?: user_watching_tokensWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_watching_tokensIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * user_watching_tokens upsert
   */
  export type user_watching_tokensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_watching_tokens
     */
    select?: user_watching_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_watching_tokens
     */
    omit?: user_watching_tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_watching_tokensInclude<ExtArgs> | null
    /**
     * The filter to search for the user_watching_tokens to update in case it exists.
     */
    where: user_watching_tokensWhereUniqueInput
    /**
     * In case the user_watching_tokens found by the `where` argument doesn't exist, create a new user_watching_tokens with this data.
     */
    create: XOR<user_watching_tokensCreateInput, user_watching_tokensUncheckedCreateInput>
    /**
     * In case the user_watching_tokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<user_watching_tokensUpdateInput, user_watching_tokensUncheckedUpdateInput>
  }

  /**
   * user_watching_tokens delete
   */
  export type user_watching_tokensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_watching_tokens
     */
    select?: user_watching_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_watching_tokens
     */
    omit?: user_watching_tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_watching_tokensInclude<ExtArgs> | null
    /**
     * Filter which user_watching_tokens to delete.
     */
    where: user_watching_tokensWhereUniqueInput
  }

  /**
   * user_watching_tokens deleteMany
   */
  export type user_watching_tokensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user_watching_tokens to delete
     */
    where?: user_watching_tokensWhereInput
  }

  /**
   * user_watching_tokens without action
   */
  export type user_watching_tokensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user_watching_tokens
     */
    select?: user_watching_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user_watching_tokens
     */
    omit?: user_watching_tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: user_watching_tokensInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    state: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: bigint | null
    state: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: bigint | null
    address: string | null
    state: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: bigint | null
    address: string | null
    state: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    address: number
    state: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    state?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    state?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    address?: true
    state?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    address?: true
    state?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    address?: true
    state?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: bigint
    address: string
    state: number
    created_at: Date
    updated_at: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    state?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    state?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    state?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    address?: boolean
    state?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "address" | "state" | "created_at" | "updated_at", ExtArgs["result"]["users"]>

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      address: string
      state: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {usersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends usersUpdateManyAndReturnArgs>(args: SelectSubset<T, usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'BigInt'>
    readonly address: FieldRef<"users", 'String'>
    readonly state: FieldRef<"users", 'Int'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly updated_at: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users createManyAndReturn
   */
  export type usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users updateManyAndReturn
   */
  export type usersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
  }


  /**
   * Model users_tokens
   */

  export type AggregateUsers_tokens = {
    _count: Users_tokensCountAggregateOutputType | null
    _avg: Users_tokensAvgAggregateOutputType | null
    _sum: Users_tokensSumAggregateOutputType | null
    _min: Users_tokensMinAggregateOutputType | null
    _max: Users_tokensMaxAggregateOutputType | null
  }

  export type Users_tokensAvgAggregateOutputType = {
    id: number | null
    balance: number | null
    total_amount: number | null
  }

  export type Users_tokensSumAggregateOutputType = {
    id: bigint | null
    balance: bigint | null
    total_amount: bigint | null
  }

  export type Users_tokensMinAggregateOutputType = {
    id: bigint | null
    walletAddress: string | null
    tokenAddress: string | null
    balance: bigint | null
    total_amount: bigint | null
    token_address: string | null
    wallet_address: string | null
    updated_at: Date | null
  }

  export type Users_tokensMaxAggregateOutputType = {
    id: bigint | null
    walletAddress: string | null
    tokenAddress: string | null
    balance: bigint | null
    total_amount: bigint | null
    token_address: string | null
    wallet_address: string | null
    updated_at: Date | null
  }

  export type Users_tokensCountAggregateOutputType = {
    id: number
    walletAddress: number
    tokenAddress: number
    balance: number
    total_amount: number
    token_address: number
    wallet_address: number
    updated_at: number
    _all: number
  }


  export type Users_tokensAvgAggregateInputType = {
    id?: true
    balance?: true
    total_amount?: true
  }

  export type Users_tokensSumAggregateInputType = {
    id?: true
    balance?: true
    total_amount?: true
  }

  export type Users_tokensMinAggregateInputType = {
    id?: true
    walletAddress?: true
    tokenAddress?: true
    balance?: true
    total_amount?: true
    token_address?: true
    wallet_address?: true
    updated_at?: true
  }

  export type Users_tokensMaxAggregateInputType = {
    id?: true
    walletAddress?: true
    tokenAddress?: true
    balance?: true
    total_amount?: true
    token_address?: true
    wallet_address?: true
    updated_at?: true
  }

  export type Users_tokensCountAggregateInputType = {
    id?: true
    walletAddress?: true
    tokenAddress?: true
    balance?: true
    total_amount?: true
    token_address?: true
    wallet_address?: true
    updated_at?: true
    _all?: true
  }

  export type Users_tokensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users_tokens to aggregate.
     */
    where?: users_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_tokens to fetch.
     */
    orderBy?: users_tokensOrderByWithRelationInput | users_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: users_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users_tokens
    **/
    _count?: true | Users_tokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Users_tokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Users_tokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Users_tokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Users_tokensMaxAggregateInputType
  }

  export type GetUsers_tokensAggregateType<T extends Users_tokensAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers_tokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers_tokens[P]>
      : GetScalarType<T[P], AggregateUsers_tokens[P]>
  }




  export type users_tokensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: users_tokensWhereInput
    orderBy?: users_tokensOrderByWithAggregationInput | users_tokensOrderByWithAggregationInput[]
    by: Users_tokensScalarFieldEnum[] | Users_tokensScalarFieldEnum
    having?: users_tokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Users_tokensCountAggregateInputType | true
    _avg?: Users_tokensAvgAggregateInputType
    _sum?: Users_tokensSumAggregateInputType
    _min?: Users_tokensMinAggregateInputType
    _max?: Users_tokensMaxAggregateInputType
  }

  export type Users_tokensGroupByOutputType = {
    id: bigint
    walletAddress: string
    tokenAddress: string
    balance: bigint
    total_amount: bigint
    token_address: string
    wallet_address: string
    updated_at: Date
    _count: Users_tokensCountAggregateOutputType | null
    _avg: Users_tokensAvgAggregateOutputType | null
    _sum: Users_tokensSumAggregateOutputType | null
    _min: Users_tokensMinAggregateOutputType | null
    _max: Users_tokensMaxAggregateOutputType | null
  }

  type GetUsers_tokensGroupByPayload<T extends users_tokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Users_tokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Users_tokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Users_tokensGroupByOutputType[P]>
            : GetScalarType<T[P], Users_tokensGroupByOutputType[P]>
        }
      >
    >


  export type users_tokensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    tokenAddress?: boolean
    balance?: boolean
    total_amount?: boolean
    token_address?: boolean
    wallet_address?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users_tokens"]>

  export type users_tokensSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    tokenAddress?: boolean
    balance?: boolean
    total_amount?: boolean
    token_address?: boolean
    wallet_address?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users_tokens"]>

  export type users_tokensSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletAddress?: boolean
    tokenAddress?: boolean
    balance?: boolean
    total_amount?: boolean
    token_address?: boolean
    wallet_address?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users_tokens"]>

  export type users_tokensSelectScalar = {
    id?: boolean
    walletAddress?: boolean
    tokenAddress?: boolean
    balance?: boolean
    total_amount?: boolean
    token_address?: boolean
    wallet_address?: boolean
    updated_at?: boolean
  }

  export type users_tokensOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "walletAddress" | "tokenAddress" | "balance" | "total_amount" | "token_address" | "wallet_address" | "updated_at", ExtArgs["result"]["users_tokens"]>

  export type $users_tokensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users_tokens"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      walletAddress: string
      tokenAddress: string
      balance: bigint
      total_amount: bigint
      token_address: string
      wallet_address: string
      updated_at: Date
    }, ExtArgs["result"]["users_tokens"]>
    composites: {}
  }

  type users_tokensGetPayload<S extends boolean | null | undefined | users_tokensDefaultArgs> = $Result.GetResult<Prisma.$users_tokensPayload, S>

  type users_tokensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<users_tokensFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Users_tokensCountAggregateInputType | true
    }

  export interface users_tokensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users_tokens'], meta: { name: 'users_tokens' } }
    /**
     * Find zero or one Users_tokens that matches the filter.
     * @param {users_tokensFindUniqueArgs} args - Arguments to find a Users_tokens
     * @example
     * // Get one Users_tokens
     * const users_tokens = await prisma.users_tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends users_tokensFindUniqueArgs>(args: SelectSubset<T, users_tokensFindUniqueArgs<ExtArgs>>): Prisma__users_tokensClient<$Result.GetResult<Prisma.$users_tokensPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Users_tokens that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {users_tokensFindUniqueOrThrowArgs} args - Arguments to find a Users_tokens
     * @example
     * // Get one Users_tokens
     * const users_tokens = await prisma.users_tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends users_tokensFindUniqueOrThrowArgs>(args: SelectSubset<T, users_tokensFindUniqueOrThrowArgs<ExtArgs>>): Prisma__users_tokensClient<$Result.GetResult<Prisma.$users_tokensPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Users_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_tokensFindFirstArgs} args - Arguments to find a Users_tokens
     * @example
     * // Get one Users_tokens
     * const users_tokens = await prisma.users_tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends users_tokensFindFirstArgs>(args?: SelectSubset<T, users_tokensFindFirstArgs<ExtArgs>>): Prisma__users_tokensClient<$Result.GetResult<Prisma.$users_tokensPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Users_tokens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_tokensFindFirstOrThrowArgs} args - Arguments to find a Users_tokens
     * @example
     * // Get one Users_tokens
     * const users_tokens = await prisma.users_tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends users_tokensFindFirstOrThrowArgs>(args?: SelectSubset<T, users_tokensFindFirstOrThrowArgs<ExtArgs>>): Prisma__users_tokensClient<$Result.GetResult<Prisma.$users_tokensPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_tokensFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users_tokens
     * const users_tokens = await prisma.users_tokens.findMany()
     * 
     * // Get first 10 Users_tokens
     * const users_tokens = await prisma.users_tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const users_tokensWithIdOnly = await prisma.users_tokens.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends users_tokensFindManyArgs>(args?: SelectSubset<T, users_tokensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$users_tokensPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Users_tokens.
     * @param {users_tokensCreateArgs} args - Arguments to create a Users_tokens.
     * @example
     * // Create one Users_tokens
     * const Users_tokens = await prisma.users_tokens.create({
     *   data: {
     *     // ... data to create a Users_tokens
     *   }
     * })
     * 
     */
    create<T extends users_tokensCreateArgs>(args: SelectSubset<T, users_tokensCreateArgs<ExtArgs>>): Prisma__users_tokensClient<$Result.GetResult<Prisma.$users_tokensPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users_tokens.
     * @param {users_tokensCreateManyArgs} args - Arguments to create many Users_tokens.
     * @example
     * // Create many Users_tokens
     * const users_tokens = await prisma.users_tokens.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends users_tokensCreateManyArgs>(args?: SelectSubset<T, users_tokensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users_tokens and returns the data saved in the database.
     * @param {users_tokensCreateManyAndReturnArgs} args - Arguments to create many Users_tokens.
     * @example
     * // Create many Users_tokens
     * const users_tokens = await prisma.users_tokens.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users_tokens and only return the `id`
     * const users_tokensWithIdOnly = await prisma.users_tokens.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends users_tokensCreateManyAndReturnArgs>(args?: SelectSubset<T, users_tokensCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$users_tokensPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Users_tokens.
     * @param {users_tokensDeleteArgs} args - Arguments to delete one Users_tokens.
     * @example
     * // Delete one Users_tokens
     * const Users_tokens = await prisma.users_tokens.delete({
     *   where: {
     *     // ... filter to delete one Users_tokens
     *   }
     * })
     * 
     */
    delete<T extends users_tokensDeleteArgs>(args: SelectSubset<T, users_tokensDeleteArgs<ExtArgs>>): Prisma__users_tokensClient<$Result.GetResult<Prisma.$users_tokensPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Users_tokens.
     * @param {users_tokensUpdateArgs} args - Arguments to update one Users_tokens.
     * @example
     * // Update one Users_tokens
     * const users_tokens = await prisma.users_tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends users_tokensUpdateArgs>(args: SelectSubset<T, users_tokensUpdateArgs<ExtArgs>>): Prisma__users_tokensClient<$Result.GetResult<Prisma.$users_tokensPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users_tokens.
     * @param {users_tokensDeleteManyArgs} args - Arguments to filter Users_tokens to delete.
     * @example
     * // Delete a few Users_tokens
     * const { count } = await prisma.users_tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends users_tokensDeleteManyArgs>(args?: SelectSubset<T, users_tokensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_tokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users_tokens
     * const users_tokens = await prisma.users_tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends users_tokensUpdateManyArgs>(args: SelectSubset<T, users_tokensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users_tokens and returns the data updated in the database.
     * @param {users_tokensUpdateManyAndReturnArgs} args - Arguments to update many Users_tokens.
     * @example
     * // Update many Users_tokens
     * const users_tokens = await prisma.users_tokens.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users_tokens and only return the `id`
     * const users_tokensWithIdOnly = await prisma.users_tokens.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends users_tokensUpdateManyAndReturnArgs>(args: SelectSubset<T, users_tokensUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$users_tokensPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Users_tokens.
     * @param {users_tokensUpsertArgs} args - Arguments to update or create a Users_tokens.
     * @example
     * // Update or create a Users_tokens
     * const users_tokens = await prisma.users_tokens.upsert({
     *   create: {
     *     // ... data to create a Users_tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users_tokens we want to update
     *   }
     * })
     */
    upsert<T extends users_tokensUpsertArgs>(args: SelectSubset<T, users_tokensUpsertArgs<ExtArgs>>): Prisma__users_tokensClient<$Result.GetResult<Prisma.$users_tokensPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_tokensCountArgs} args - Arguments to filter Users_tokens to count.
     * @example
     * // Count the number of Users_tokens
     * const count = await prisma.users_tokens.count({
     *   where: {
     *     // ... the filter for the Users_tokens we want to count
     *   }
     * })
    **/
    count<T extends users_tokensCountArgs>(
      args?: Subset<T, users_tokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Users_tokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_tokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Users_tokensAggregateArgs>(args: Subset<T, Users_tokensAggregateArgs>): Prisma.PrismaPromise<GetUsers_tokensAggregateType<T>>

    /**
     * Group by Users_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_tokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends users_tokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: users_tokensGroupByArgs['orderBy'] }
        : { orderBy?: users_tokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, users_tokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsers_tokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users_tokens model
   */
  readonly fields: users_tokensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users_tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__users_tokensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users_tokens model
   */ 
  interface users_tokensFieldRefs {
    readonly id: FieldRef<"users_tokens", 'BigInt'>
    readonly walletAddress: FieldRef<"users_tokens", 'String'>
    readonly tokenAddress: FieldRef<"users_tokens", 'String'>
    readonly balance: FieldRef<"users_tokens", 'BigInt'>
    readonly total_amount: FieldRef<"users_tokens", 'BigInt'>
    readonly token_address: FieldRef<"users_tokens", 'String'>
    readonly wallet_address: FieldRef<"users_tokens", 'String'>
    readonly updated_at: FieldRef<"users_tokens", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users_tokens findUnique
   */
  export type users_tokensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_tokens
     */
    select?: users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_tokens
     */
    omit?: users_tokensOmit<ExtArgs> | null
    /**
     * Filter, which users_tokens to fetch.
     */
    where: users_tokensWhereUniqueInput
  }

  /**
   * users_tokens findUniqueOrThrow
   */
  export type users_tokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_tokens
     */
    select?: users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_tokens
     */
    omit?: users_tokensOmit<ExtArgs> | null
    /**
     * Filter, which users_tokens to fetch.
     */
    where: users_tokensWhereUniqueInput
  }

  /**
   * users_tokens findFirst
   */
  export type users_tokensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_tokens
     */
    select?: users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_tokens
     */
    omit?: users_tokensOmit<ExtArgs> | null
    /**
     * Filter, which users_tokens to fetch.
     */
    where?: users_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_tokens to fetch.
     */
    orderBy?: users_tokensOrderByWithRelationInput | users_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users_tokens.
     */
    cursor?: users_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users_tokens.
     */
    distinct?: Users_tokensScalarFieldEnum | Users_tokensScalarFieldEnum[]
  }

  /**
   * users_tokens findFirstOrThrow
   */
  export type users_tokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_tokens
     */
    select?: users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_tokens
     */
    omit?: users_tokensOmit<ExtArgs> | null
    /**
     * Filter, which users_tokens to fetch.
     */
    where?: users_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_tokens to fetch.
     */
    orderBy?: users_tokensOrderByWithRelationInput | users_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users_tokens.
     */
    cursor?: users_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users_tokens.
     */
    distinct?: Users_tokensScalarFieldEnum | Users_tokensScalarFieldEnum[]
  }

  /**
   * users_tokens findMany
   */
  export type users_tokensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_tokens
     */
    select?: users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_tokens
     */
    omit?: users_tokensOmit<ExtArgs> | null
    /**
     * Filter, which users_tokens to fetch.
     */
    where?: users_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_tokens to fetch.
     */
    orderBy?: users_tokensOrderByWithRelationInput | users_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users_tokens.
     */
    cursor?: users_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_tokens.
     */
    skip?: number
    distinct?: Users_tokensScalarFieldEnum | Users_tokensScalarFieldEnum[]
  }

  /**
   * users_tokens create
   */
  export type users_tokensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_tokens
     */
    select?: users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_tokens
     */
    omit?: users_tokensOmit<ExtArgs> | null
    /**
     * The data needed to create a users_tokens.
     */
    data: XOR<users_tokensCreateInput, users_tokensUncheckedCreateInput>
  }

  /**
   * users_tokens createMany
   */
  export type users_tokensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users_tokens.
     */
    data: users_tokensCreateManyInput | users_tokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users_tokens createManyAndReturn
   */
  export type users_tokensCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_tokens
     */
    select?: users_tokensSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users_tokens
     */
    omit?: users_tokensOmit<ExtArgs> | null
    /**
     * The data used to create many users_tokens.
     */
    data: users_tokensCreateManyInput | users_tokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users_tokens update
   */
  export type users_tokensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_tokens
     */
    select?: users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_tokens
     */
    omit?: users_tokensOmit<ExtArgs> | null
    /**
     * The data needed to update a users_tokens.
     */
    data: XOR<users_tokensUpdateInput, users_tokensUncheckedUpdateInput>
    /**
     * Choose, which users_tokens to update.
     */
    where: users_tokensWhereUniqueInput
  }

  /**
   * users_tokens updateMany
   */
  export type users_tokensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users_tokens.
     */
    data: XOR<users_tokensUpdateManyMutationInput, users_tokensUncheckedUpdateManyInput>
    /**
     * Filter which users_tokens to update
     */
    where?: users_tokensWhereInput
  }

  /**
   * users_tokens updateManyAndReturn
   */
  export type users_tokensUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_tokens
     */
    select?: users_tokensSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users_tokens
     */
    omit?: users_tokensOmit<ExtArgs> | null
    /**
     * The data used to update users_tokens.
     */
    data: XOR<users_tokensUpdateManyMutationInput, users_tokensUncheckedUpdateManyInput>
    /**
     * Filter which users_tokens to update
     */
    where?: users_tokensWhereInput
  }

  /**
   * users_tokens upsert
   */
  export type users_tokensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_tokens
     */
    select?: users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_tokens
     */
    omit?: users_tokensOmit<ExtArgs> | null
    /**
     * The filter to search for the users_tokens to update in case it exists.
     */
    where: users_tokensWhereUniqueInput
    /**
     * In case the users_tokens found by the `where` argument doesn't exist, create a new users_tokens with this data.
     */
    create: XOR<users_tokensCreateInput, users_tokensUncheckedCreateInput>
    /**
     * In case the users_tokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<users_tokensUpdateInput, users_tokensUncheckedUpdateInput>
  }

  /**
   * users_tokens delete
   */
  export type users_tokensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_tokens
     */
    select?: users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_tokens
     */
    omit?: users_tokensOmit<ExtArgs> | null
    /**
     * Filter which users_tokens to delete.
     */
    where: users_tokensWhereUniqueInput
  }

  /**
   * users_tokens deleteMany
   */
  export type users_tokensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users_tokens to delete
     */
    where?: users_tokensWhereInput
  }

  /**
   * users_tokens without action
   */
  export type users_tokensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_tokens
     */
    select?: users_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_tokens
     */
    omit?: users_tokensOmit<ExtArgs> | null
  }


  /**
   * Model wallets
   */

  export type AggregateWallets = {
    _count: WalletsCountAggregateOutputType | null
    _avg: WalletsAvgAggregateOutputType | null
    _sum: WalletsSumAggregateOutputType | null
    _min: WalletsMinAggregateOutputType | null
    _max: WalletsMaxAggregateOutputType | null
  }

  export type WalletsAvgAggregateOutputType = {
    id: number | null
    state: number | null
    black_time: number | null
  }

  export type WalletsSumAggregateOutputType = {
    id: bigint | null
    state: number | null
    black_time: number | null
  }

  export type WalletsMinAggregateOutputType = {
    id: bigint | null
    address: string | null
    state: number | null
    created_at: Date | null
    type: string | null
    black_time: number | null
    updated_at: Date | null
  }

  export type WalletsMaxAggregateOutputType = {
    id: bigint | null
    address: string | null
    state: number | null
    created_at: Date | null
    type: string | null
    black_time: number | null
    updated_at: Date | null
  }

  export type WalletsCountAggregateOutputType = {
    id: number
    address: number
    state: number
    created_at: number
    type: number
    black_time: number
    updated_at: number
    _all: number
  }


  export type WalletsAvgAggregateInputType = {
    id?: true
    state?: true
    black_time?: true
  }

  export type WalletsSumAggregateInputType = {
    id?: true
    state?: true
    black_time?: true
  }

  export type WalletsMinAggregateInputType = {
    id?: true
    address?: true
    state?: true
    created_at?: true
    type?: true
    black_time?: true
    updated_at?: true
  }

  export type WalletsMaxAggregateInputType = {
    id?: true
    address?: true
    state?: true
    created_at?: true
    type?: true
    black_time?: true
    updated_at?: true
  }

  export type WalletsCountAggregateInputType = {
    id?: true
    address?: true
    state?: true
    created_at?: true
    type?: true
    black_time?: true
    updated_at?: true
    _all?: true
  }

  export type WalletsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which wallets to aggregate.
     */
    where?: walletsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets to fetch.
     */
    orderBy?: walletsOrderByWithRelationInput | walletsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: walletsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned wallets
    **/
    _count?: true | WalletsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletsMaxAggregateInputType
  }

  export type GetWalletsAggregateType<T extends WalletsAggregateArgs> = {
        [P in keyof T & keyof AggregateWallets]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallets[P]>
      : GetScalarType<T[P], AggregateWallets[P]>
  }




  export type walletsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: walletsWhereInput
    orderBy?: walletsOrderByWithAggregationInput | walletsOrderByWithAggregationInput[]
    by: WalletsScalarFieldEnum[] | WalletsScalarFieldEnum
    having?: walletsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletsCountAggregateInputType | true
    _avg?: WalletsAvgAggregateInputType
    _sum?: WalletsSumAggregateInputType
    _min?: WalletsMinAggregateInputType
    _max?: WalletsMaxAggregateInputType
  }

  export type WalletsGroupByOutputType = {
    id: bigint
    address: string
    state: number
    created_at: Date
    type: string
    black_time: number
    updated_at: Date
    _count: WalletsCountAggregateOutputType | null
    _avg: WalletsAvgAggregateOutputType | null
    _sum: WalletsSumAggregateOutputType | null
    _min: WalletsMinAggregateOutputType | null
    _max: WalletsMaxAggregateOutputType | null
  }

  type GetWalletsGroupByPayload<T extends walletsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WalletsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletsGroupByOutputType[P]>
            : GetScalarType<T[P], WalletsGroupByOutputType[P]>
        }
      >
    >


  export type walletsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    state?: boolean
    created_at?: boolean
    type?: boolean
    black_time?: boolean
    updated_at?: boolean
    wallets_users?: boolean | wallets$wallets_usersArgs<ExtArgs>
    _count?: boolean | WalletsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallets"]>

  export type walletsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    state?: boolean
    created_at?: boolean
    type?: boolean
    black_time?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["wallets"]>

  export type walletsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    state?: boolean
    created_at?: boolean
    type?: boolean
    black_time?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["wallets"]>

  export type walletsSelectScalar = {
    id?: boolean
    address?: boolean
    state?: boolean
    created_at?: boolean
    type?: boolean
    black_time?: boolean
    updated_at?: boolean
  }

  export type walletsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "address" | "state" | "created_at" | "type" | "black_time" | "updated_at", ExtArgs["result"]["wallets"]>
  export type walletsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallets_users?: boolean | wallets$wallets_usersArgs<ExtArgs>
    _count?: boolean | WalletsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type walletsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type walletsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $walletsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "wallets"
    objects: {
      wallets_users: Prisma.$wallets_usersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      address: string
      state: number
      created_at: Date
      type: string
      black_time: number
      updated_at: Date
    }, ExtArgs["result"]["wallets"]>
    composites: {}
  }

  type walletsGetPayload<S extends boolean | null | undefined | walletsDefaultArgs> = $Result.GetResult<Prisma.$walletsPayload, S>

  type walletsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<walletsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WalletsCountAggregateInputType | true
    }

  export interface walletsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['wallets'], meta: { name: 'wallets' } }
    /**
     * Find zero or one Wallets that matches the filter.
     * @param {walletsFindUniqueArgs} args - Arguments to find a Wallets
     * @example
     * // Get one Wallets
     * const wallets = await prisma.wallets.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends walletsFindUniqueArgs>(args: SelectSubset<T, walletsFindUniqueArgs<ExtArgs>>): Prisma__walletsClient<$Result.GetResult<Prisma.$walletsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Wallets that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {walletsFindUniqueOrThrowArgs} args - Arguments to find a Wallets
     * @example
     * // Get one Wallets
     * const wallets = await prisma.wallets.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends walletsFindUniqueOrThrowArgs>(args: SelectSubset<T, walletsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__walletsClient<$Result.GetResult<Prisma.$walletsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Wallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletsFindFirstArgs} args - Arguments to find a Wallets
     * @example
     * // Get one Wallets
     * const wallets = await prisma.wallets.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends walletsFindFirstArgs>(args?: SelectSubset<T, walletsFindFirstArgs<ExtArgs>>): Prisma__walletsClient<$Result.GetResult<Prisma.$walletsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Wallets that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletsFindFirstOrThrowArgs} args - Arguments to find a Wallets
     * @example
     * // Get one Wallets
     * const wallets = await prisma.wallets.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends walletsFindFirstOrThrowArgs>(args?: SelectSubset<T, walletsFindFirstOrThrowArgs<ExtArgs>>): Prisma__walletsClient<$Result.GetResult<Prisma.$walletsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Wallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallets
     * const wallets = await prisma.wallets.findMany()
     * 
     * // Get first 10 Wallets
     * const wallets = await prisma.wallets.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletsWithIdOnly = await prisma.wallets.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends walletsFindManyArgs>(args?: SelectSubset<T, walletsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$walletsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Wallets.
     * @param {walletsCreateArgs} args - Arguments to create a Wallets.
     * @example
     * // Create one Wallets
     * const Wallets = await prisma.wallets.create({
     *   data: {
     *     // ... data to create a Wallets
     *   }
     * })
     * 
     */
    create<T extends walletsCreateArgs>(args: SelectSubset<T, walletsCreateArgs<ExtArgs>>): Prisma__walletsClient<$Result.GetResult<Prisma.$walletsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Wallets.
     * @param {walletsCreateManyArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallets = await prisma.wallets.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends walletsCreateManyArgs>(args?: SelectSubset<T, walletsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wallets and returns the data saved in the database.
     * @param {walletsCreateManyAndReturnArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallets = await prisma.wallets.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wallets and only return the `id`
     * const walletsWithIdOnly = await prisma.wallets.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends walletsCreateManyAndReturnArgs>(args?: SelectSubset<T, walletsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$walletsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Wallets.
     * @param {walletsDeleteArgs} args - Arguments to delete one Wallets.
     * @example
     * // Delete one Wallets
     * const Wallets = await prisma.wallets.delete({
     *   where: {
     *     // ... filter to delete one Wallets
     *   }
     * })
     * 
     */
    delete<T extends walletsDeleteArgs>(args: SelectSubset<T, walletsDeleteArgs<ExtArgs>>): Prisma__walletsClient<$Result.GetResult<Prisma.$walletsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Wallets.
     * @param {walletsUpdateArgs} args - Arguments to update one Wallets.
     * @example
     * // Update one Wallets
     * const wallets = await prisma.wallets.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends walletsUpdateArgs>(args: SelectSubset<T, walletsUpdateArgs<ExtArgs>>): Prisma__walletsClient<$Result.GetResult<Prisma.$walletsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Wallets.
     * @param {walletsDeleteManyArgs} args - Arguments to filter Wallets to delete.
     * @example
     * // Delete a few Wallets
     * const { count } = await prisma.wallets.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends walletsDeleteManyArgs>(args?: SelectSubset<T, walletsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallets
     * const wallets = await prisma.wallets.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends walletsUpdateManyArgs>(args: SelectSubset<T, walletsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets and returns the data updated in the database.
     * @param {walletsUpdateManyAndReturnArgs} args - Arguments to update many Wallets.
     * @example
     * // Update many Wallets
     * const wallets = await prisma.wallets.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Wallets and only return the `id`
     * const walletsWithIdOnly = await prisma.wallets.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends walletsUpdateManyAndReturnArgs>(args: SelectSubset<T, walletsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$walletsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Wallets.
     * @param {walletsUpsertArgs} args - Arguments to update or create a Wallets.
     * @example
     * // Update or create a Wallets
     * const wallets = await prisma.wallets.upsert({
     *   create: {
     *     // ... data to create a Wallets
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallets we want to update
     *   }
     * })
     */
    upsert<T extends walletsUpsertArgs>(args: SelectSubset<T, walletsUpsertArgs<ExtArgs>>): Prisma__walletsClient<$Result.GetResult<Prisma.$walletsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletsCountArgs} args - Arguments to filter Wallets to count.
     * @example
     * // Count the number of Wallets
     * const count = await prisma.wallets.count({
     *   where: {
     *     // ... the filter for the Wallets we want to count
     *   }
     * })
    **/
    count<T extends walletsCountArgs>(
      args?: Subset<T, walletsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletsAggregateArgs>(args: Subset<T, WalletsAggregateArgs>): Prisma.PrismaPromise<GetWalletsAggregateType<T>>

    /**
     * Group by Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {walletsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends walletsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: walletsGroupByArgs['orderBy'] }
        : { orderBy?: walletsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, walletsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the wallets model
   */
  readonly fields: walletsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for wallets.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__walletsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wallets_users<T extends wallets$wallets_usersArgs<ExtArgs> = {}>(args?: Subset<T, wallets$wallets_usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wallets_usersPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the wallets model
   */ 
  interface walletsFieldRefs {
    readonly id: FieldRef<"wallets", 'BigInt'>
    readonly address: FieldRef<"wallets", 'String'>
    readonly state: FieldRef<"wallets", 'Int'>
    readonly created_at: FieldRef<"wallets", 'DateTime'>
    readonly type: FieldRef<"wallets", 'String'>
    readonly black_time: FieldRef<"wallets", 'Int'>
    readonly updated_at: FieldRef<"wallets", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * wallets findUnique
   */
  export type walletsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets
     */
    select?: walletsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets
     */
    omit?: walletsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletsInclude<ExtArgs> | null
    /**
     * Filter, which wallets to fetch.
     */
    where: walletsWhereUniqueInput
  }

  /**
   * wallets findUniqueOrThrow
   */
  export type walletsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets
     */
    select?: walletsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets
     */
    omit?: walletsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletsInclude<ExtArgs> | null
    /**
     * Filter, which wallets to fetch.
     */
    where: walletsWhereUniqueInput
  }

  /**
   * wallets findFirst
   */
  export type walletsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets
     */
    select?: walletsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets
     */
    omit?: walletsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletsInclude<ExtArgs> | null
    /**
     * Filter, which wallets to fetch.
     */
    where?: walletsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets to fetch.
     */
    orderBy?: walletsOrderByWithRelationInput | walletsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wallets.
     */
    cursor?: walletsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wallets.
     */
    distinct?: WalletsScalarFieldEnum | WalletsScalarFieldEnum[]
  }

  /**
   * wallets findFirstOrThrow
   */
  export type walletsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets
     */
    select?: walletsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets
     */
    omit?: walletsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletsInclude<ExtArgs> | null
    /**
     * Filter, which wallets to fetch.
     */
    where?: walletsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets to fetch.
     */
    orderBy?: walletsOrderByWithRelationInput | walletsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wallets.
     */
    cursor?: walletsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wallets.
     */
    distinct?: WalletsScalarFieldEnum | WalletsScalarFieldEnum[]
  }

  /**
   * wallets findMany
   */
  export type walletsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets
     */
    select?: walletsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets
     */
    omit?: walletsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletsInclude<ExtArgs> | null
    /**
     * Filter, which wallets to fetch.
     */
    where?: walletsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets to fetch.
     */
    orderBy?: walletsOrderByWithRelationInput | walletsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing wallets.
     */
    cursor?: walletsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets.
     */
    skip?: number
    distinct?: WalletsScalarFieldEnum | WalletsScalarFieldEnum[]
  }

  /**
   * wallets create
   */
  export type walletsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets
     */
    select?: walletsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets
     */
    omit?: walletsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletsInclude<ExtArgs> | null
    /**
     * The data needed to create a wallets.
     */
    data: XOR<walletsCreateInput, walletsUncheckedCreateInput>
  }

  /**
   * wallets createMany
   */
  export type walletsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many wallets.
     */
    data: walletsCreateManyInput | walletsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * wallets createManyAndReturn
   */
  export type walletsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets
     */
    select?: walletsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the wallets
     */
    omit?: walletsOmit<ExtArgs> | null
    /**
     * The data used to create many wallets.
     */
    data: walletsCreateManyInput | walletsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * wallets update
   */
  export type walletsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets
     */
    select?: walletsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets
     */
    omit?: walletsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletsInclude<ExtArgs> | null
    /**
     * The data needed to update a wallets.
     */
    data: XOR<walletsUpdateInput, walletsUncheckedUpdateInput>
    /**
     * Choose, which wallets to update.
     */
    where: walletsWhereUniqueInput
  }

  /**
   * wallets updateMany
   */
  export type walletsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update wallets.
     */
    data: XOR<walletsUpdateManyMutationInput, walletsUncheckedUpdateManyInput>
    /**
     * Filter which wallets to update
     */
    where?: walletsWhereInput
  }

  /**
   * wallets updateManyAndReturn
   */
  export type walletsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets
     */
    select?: walletsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the wallets
     */
    omit?: walletsOmit<ExtArgs> | null
    /**
     * The data used to update wallets.
     */
    data: XOR<walletsUpdateManyMutationInput, walletsUncheckedUpdateManyInput>
    /**
     * Filter which wallets to update
     */
    where?: walletsWhereInput
  }

  /**
   * wallets upsert
   */
  export type walletsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets
     */
    select?: walletsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets
     */
    omit?: walletsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletsInclude<ExtArgs> | null
    /**
     * The filter to search for the wallets to update in case it exists.
     */
    where: walletsWhereUniqueInput
    /**
     * In case the wallets found by the `where` argument doesn't exist, create a new wallets with this data.
     */
    create: XOR<walletsCreateInput, walletsUncheckedCreateInput>
    /**
     * In case the wallets was found with the provided `where` argument, update it with this data.
     */
    update: XOR<walletsUpdateInput, walletsUncheckedUpdateInput>
  }

  /**
   * wallets delete
   */
  export type walletsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets
     */
    select?: walletsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets
     */
    omit?: walletsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletsInclude<ExtArgs> | null
    /**
     * Filter which wallets to delete.
     */
    where: walletsWhereUniqueInput
  }

  /**
   * wallets deleteMany
   */
  export type walletsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which wallets to delete
     */
    where?: walletsWhereInput
  }

  /**
   * wallets.wallets_users
   */
  export type wallets$wallets_usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersInclude<ExtArgs> | null
    where?: wallets_usersWhereInput
    orderBy?: wallets_usersOrderByWithRelationInput | wallets_usersOrderByWithRelationInput[]
    cursor?: wallets_usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Wallets_usersScalarFieldEnum | Wallets_usersScalarFieldEnum[]
  }

  /**
   * wallets without action
   */
  export type walletsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets
     */
    select?: walletsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets
     */
    omit?: walletsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: walletsInclude<ExtArgs> | null
  }


  /**
   * Model wallets_transactions
   */

  export type AggregateWallets_transactions = {
    _count: Wallets_transactionsCountAggregateOutputType | null
    _avg: Wallets_transactionsAvgAggregateOutputType | null
    _sum: Wallets_transactionsSumAggregateOutputType | null
    _min: Wallets_transactionsMinAggregateOutputType | null
    _max: Wallets_transactionsMaxAggregateOutputType | null
  }

  export type Wallets_transactionsAvgAggregateOutputType = {
    id: number | null
  }

  export type Wallets_transactionsSumAggregateOutputType = {
    id: bigint | null
  }

  export type Wallets_transactionsMinAggregateOutputType = {
    id: bigint | null
    signature: string | null
    address: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Wallets_transactionsMaxAggregateOutputType = {
    id: bigint | null
    signature: string | null
    address: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Wallets_transactionsCountAggregateOutputType = {
    id: number
    signature: number
    address: number
    created_at: number
    accounts: number
    updated_at: number
    _all: number
  }


  export type Wallets_transactionsAvgAggregateInputType = {
    id?: true
  }

  export type Wallets_transactionsSumAggregateInputType = {
    id?: true
  }

  export type Wallets_transactionsMinAggregateInputType = {
    id?: true
    signature?: true
    address?: true
    created_at?: true
    updated_at?: true
  }

  export type Wallets_transactionsMaxAggregateInputType = {
    id?: true
    signature?: true
    address?: true
    created_at?: true
    updated_at?: true
  }

  export type Wallets_transactionsCountAggregateInputType = {
    id?: true
    signature?: true
    address?: true
    created_at?: true
    accounts?: true
    updated_at?: true
    _all?: true
  }

  export type Wallets_transactionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which wallets_transactions to aggregate.
     */
    where?: wallets_transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets_transactions to fetch.
     */
    orderBy?: wallets_transactionsOrderByWithRelationInput | wallets_transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: wallets_transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets_transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets_transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned wallets_transactions
    **/
    _count?: true | Wallets_transactionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Wallets_transactionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Wallets_transactionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Wallets_transactionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Wallets_transactionsMaxAggregateInputType
  }

  export type GetWallets_transactionsAggregateType<T extends Wallets_transactionsAggregateArgs> = {
        [P in keyof T & keyof AggregateWallets_transactions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallets_transactions[P]>
      : GetScalarType<T[P], AggregateWallets_transactions[P]>
  }




  export type wallets_transactionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: wallets_transactionsWhereInput
    orderBy?: wallets_transactionsOrderByWithAggregationInput | wallets_transactionsOrderByWithAggregationInput[]
    by: Wallets_transactionsScalarFieldEnum[] | Wallets_transactionsScalarFieldEnum
    having?: wallets_transactionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Wallets_transactionsCountAggregateInputType | true
    _avg?: Wallets_transactionsAvgAggregateInputType
    _sum?: Wallets_transactionsSumAggregateInputType
    _min?: Wallets_transactionsMinAggregateInputType
    _max?: Wallets_transactionsMaxAggregateInputType
  }

  export type Wallets_transactionsGroupByOutputType = {
    id: bigint
    signature: string
    address: string
    created_at: Date
    accounts: string[]
    updated_at: Date
    _count: Wallets_transactionsCountAggregateOutputType | null
    _avg: Wallets_transactionsAvgAggregateOutputType | null
    _sum: Wallets_transactionsSumAggregateOutputType | null
    _min: Wallets_transactionsMinAggregateOutputType | null
    _max: Wallets_transactionsMaxAggregateOutputType | null
  }

  type GetWallets_transactionsGroupByPayload<T extends wallets_transactionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Wallets_transactionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Wallets_transactionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Wallets_transactionsGroupByOutputType[P]>
            : GetScalarType<T[P], Wallets_transactionsGroupByOutputType[P]>
        }
      >
    >


  export type wallets_transactionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signature?: boolean
    address?: boolean
    created_at?: boolean
    accounts?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["wallets_transactions"]>

  export type wallets_transactionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signature?: boolean
    address?: boolean
    created_at?: boolean
    accounts?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["wallets_transactions"]>

  export type wallets_transactionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    signature?: boolean
    address?: boolean
    created_at?: boolean
    accounts?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["wallets_transactions"]>

  export type wallets_transactionsSelectScalar = {
    id?: boolean
    signature?: boolean
    address?: boolean
    created_at?: boolean
    accounts?: boolean
    updated_at?: boolean
  }

  export type wallets_transactionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "signature" | "address" | "created_at" | "accounts" | "updated_at", ExtArgs["result"]["wallets_transactions"]>

  export type $wallets_transactionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "wallets_transactions"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      signature: string
      address: string
      created_at: Date
      accounts: string[]
      updated_at: Date
    }, ExtArgs["result"]["wallets_transactions"]>
    composites: {}
  }

  type wallets_transactionsGetPayload<S extends boolean | null | undefined | wallets_transactionsDefaultArgs> = $Result.GetResult<Prisma.$wallets_transactionsPayload, S>

  type wallets_transactionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<wallets_transactionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Wallets_transactionsCountAggregateInputType | true
    }

  export interface wallets_transactionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['wallets_transactions'], meta: { name: 'wallets_transactions' } }
    /**
     * Find zero or one Wallets_transactions that matches the filter.
     * @param {wallets_transactionsFindUniqueArgs} args - Arguments to find a Wallets_transactions
     * @example
     * // Get one Wallets_transactions
     * const wallets_transactions = await prisma.wallets_transactions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends wallets_transactionsFindUniqueArgs>(args: SelectSubset<T, wallets_transactionsFindUniqueArgs<ExtArgs>>): Prisma__wallets_transactionsClient<$Result.GetResult<Prisma.$wallets_transactionsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Wallets_transactions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {wallets_transactionsFindUniqueOrThrowArgs} args - Arguments to find a Wallets_transactions
     * @example
     * // Get one Wallets_transactions
     * const wallets_transactions = await prisma.wallets_transactions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends wallets_transactionsFindUniqueOrThrowArgs>(args: SelectSubset<T, wallets_transactionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__wallets_transactionsClient<$Result.GetResult<Prisma.$wallets_transactionsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Wallets_transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallets_transactionsFindFirstArgs} args - Arguments to find a Wallets_transactions
     * @example
     * // Get one Wallets_transactions
     * const wallets_transactions = await prisma.wallets_transactions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends wallets_transactionsFindFirstArgs>(args?: SelectSubset<T, wallets_transactionsFindFirstArgs<ExtArgs>>): Prisma__wallets_transactionsClient<$Result.GetResult<Prisma.$wallets_transactionsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Wallets_transactions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallets_transactionsFindFirstOrThrowArgs} args - Arguments to find a Wallets_transactions
     * @example
     * // Get one Wallets_transactions
     * const wallets_transactions = await prisma.wallets_transactions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends wallets_transactionsFindFirstOrThrowArgs>(args?: SelectSubset<T, wallets_transactionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__wallets_transactionsClient<$Result.GetResult<Prisma.$wallets_transactionsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Wallets_transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallets_transactionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallets_transactions
     * const wallets_transactions = await prisma.wallets_transactions.findMany()
     * 
     * // Get first 10 Wallets_transactions
     * const wallets_transactions = await prisma.wallets_transactions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wallets_transactionsWithIdOnly = await prisma.wallets_transactions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends wallets_transactionsFindManyArgs>(args?: SelectSubset<T, wallets_transactionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wallets_transactionsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Wallets_transactions.
     * @param {wallets_transactionsCreateArgs} args - Arguments to create a Wallets_transactions.
     * @example
     * // Create one Wallets_transactions
     * const Wallets_transactions = await prisma.wallets_transactions.create({
     *   data: {
     *     // ... data to create a Wallets_transactions
     *   }
     * })
     * 
     */
    create<T extends wallets_transactionsCreateArgs>(args: SelectSubset<T, wallets_transactionsCreateArgs<ExtArgs>>): Prisma__wallets_transactionsClient<$Result.GetResult<Prisma.$wallets_transactionsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Wallets_transactions.
     * @param {wallets_transactionsCreateManyArgs} args - Arguments to create many Wallets_transactions.
     * @example
     * // Create many Wallets_transactions
     * const wallets_transactions = await prisma.wallets_transactions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends wallets_transactionsCreateManyArgs>(args?: SelectSubset<T, wallets_transactionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wallets_transactions and returns the data saved in the database.
     * @param {wallets_transactionsCreateManyAndReturnArgs} args - Arguments to create many Wallets_transactions.
     * @example
     * // Create many Wallets_transactions
     * const wallets_transactions = await prisma.wallets_transactions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wallets_transactions and only return the `id`
     * const wallets_transactionsWithIdOnly = await prisma.wallets_transactions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends wallets_transactionsCreateManyAndReturnArgs>(args?: SelectSubset<T, wallets_transactionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wallets_transactionsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Wallets_transactions.
     * @param {wallets_transactionsDeleteArgs} args - Arguments to delete one Wallets_transactions.
     * @example
     * // Delete one Wallets_transactions
     * const Wallets_transactions = await prisma.wallets_transactions.delete({
     *   where: {
     *     // ... filter to delete one Wallets_transactions
     *   }
     * })
     * 
     */
    delete<T extends wallets_transactionsDeleteArgs>(args: SelectSubset<T, wallets_transactionsDeleteArgs<ExtArgs>>): Prisma__wallets_transactionsClient<$Result.GetResult<Prisma.$wallets_transactionsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Wallets_transactions.
     * @param {wallets_transactionsUpdateArgs} args - Arguments to update one Wallets_transactions.
     * @example
     * // Update one Wallets_transactions
     * const wallets_transactions = await prisma.wallets_transactions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends wallets_transactionsUpdateArgs>(args: SelectSubset<T, wallets_transactionsUpdateArgs<ExtArgs>>): Prisma__wallets_transactionsClient<$Result.GetResult<Prisma.$wallets_transactionsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Wallets_transactions.
     * @param {wallets_transactionsDeleteManyArgs} args - Arguments to filter Wallets_transactions to delete.
     * @example
     * // Delete a few Wallets_transactions
     * const { count } = await prisma.wallets_transactions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends wallets_transactionsDeleteManyArgs>(args?: SelectSubset<T, wallets_transactionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets_transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallets_transactionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallets_transactions
     * const wallets_transactions = await prisma.wallets_transactions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends wallets_transactionsUpdateManyArgs>(args: SelectSubset<T, wallets_transactionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets_transactions and returns the data updated in the database.
     * @param {wallets_transactionsUpdateManyAndReturnArgs} args - Arguments to update many Wallets_transactions.
     * @example
     * // Update many Wallets_transactions
     * const wallets_transactions = await prisma.wallets_transactions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Wallets_transactions and only return the `id`
     * const wallets_transactionsWithIdOnly = await prisma.wallets_transactions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends wallets_transactionsUpdateManyAndReturnArgs>(args: SelectSubset<T, wallets_transactionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wallets_transactionsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Wallets_transactions.
     * @param {wallets_transactionsUpsertArgs} args - Arguments to update or create a Wallets_transactions.
     * @example
     * // Update or create a Wallets_transactions
     * const wallets_transactions = await prisma.wallets_transactions.upsert({
     *   create: {
     *     // ... data to create a Wallets_transactions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallets_transactions we want to update
     *   }
     * })
     */
    upsert<T extends wallets_transactionsUpsertArgs>(args: SelectSubset<T, wallets_transactionsUpsertArgs<ExtArgs>>): Prisma__wallets_transactionsClient<$Result.GetResult<Prisma.$wallets_transactionsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Wallets_transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallets_transactionsCountArgs} args - Arguments to filter Wallets_transactions to count.
     * @example
     * // Count the number of Wallets_transactions
     * const count = await prisma.wallets_transactions.count({
     *   where: {
     *     // ... the filter for the Wallets_transactions we want to count
     *   }
     * })
    **/
    count<T extends wallets_transactionsCountArgs>(
      args?: Subset<T, wallets_transactionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Wallets_transactionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallets_transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Wallets_transactionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Wallets_transactionsAggregateArgs>(args: Subset<T, Wallets_transactionsAggregateArgs>): Prisma.PrismaPromise<GetWallets_transactionsAggregateType<T>>

    /**
     * Group by Wallets_transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallets_transactionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends wallets_transactionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: wallets_transactionsGroupByArgs['orderBy'] }
        : { orderBy?: wallets_transactionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, wallets_transactionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWallets_transactionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the wallets_transactions model
   */
  readonly fields: wallets_transactionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for wallets_transactions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__wallets_transactionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the wallets_transactions model
   */ 
  interface wallets_transactionsFieldRefs {
    readonly id: FieldRef<"wallets_transactions", 'BigInt'>
    readonly signature: FieldRef<"wallets_transactions", 'String'>
    readonly address: FieldRef<"wallets_transactions", 'String'>
    readonly created_at: FieldRef<"wallets_transactions", 'DateTime'>
    readonly accounts: FieldRef<"wallets_transactions", 'String[]'>
    readonly updated_at: FieldRef<"wallets_transactions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * wallets_transactions findUnique
   */
  export type wallets_transactionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_transactions
     */
    select?: wallets_transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_transactions
     */
    omit?: wallets_transactionsOmit<ExtArgs> | null
    /**
     * Filter, which wallets_transactions to fetch.
     */
    where: wallets_transactionsWhereUniqueInput
  }

  /**
   * wallets_transactions findUniqueOrThrow
   */
  export type wallets_transactionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_transactions
     */
    select?: wallets_transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_transactions
     */
    omit?: wallets_transactionsOmit<ExtArgs> | null
    /**
     * Filter, which wallets_transactions to fetch.
     */
    where: wallets_transactionsWhereUniqueInput
  }

  /**
   * wallets_transactions findFirst
   */
  export type wallets_transactionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_transactions
     */
    select?: wallets_transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_transactions
     */
    omit?: wallets_transactionsOmit<ExtArgs> | null
    /**
     * Filter, which wallets_transactions to fetch.
     */
    where?: wallets_transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets_transactions to fetch.
     */
    orderBy?: wallets_transactionsOrderByWithRelationInput | wallets_transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wallets_transactions.
     */
    cursor?: wallets_transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets_transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets_transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wallets_transactions.
     */
    distinct?: Wallets_transactionsScalarFieldEnum | Wallets_transactionsScalarFieldEnum[]
  }

  /**
   * wallets_transactions findFirstOrThrow
   */
  export type wallets_transactionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_transactions
     */
    select?: wallets_transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_transactions
     */
    omit?: wallets_transactionsOmit<ExtArgs> | null
    /**
     * Filter, which wallets_transactions to fetch.
     */
    where?: wallets_transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets_transactions to fetch.
     */
    orderBy?: wallets_transactionsOrderByWithRelationInput | wallets_transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wallets_transactions.
     */
    cursor?: wallets_transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets_transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets_transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wallets_transactions.
     */
    distinct?: Wallets_transactionsScalarFieldEnum | Wallets_transactionsScalarFieldEnum[]
  }

  /**
   * wallets_transactions findMany
   */
  export type wallets_transactionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_transactions
     */
    select?: wallets_transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_transactions
     */
    omit?: wallets_transactionsOmit<ExtArgs> | null
    /**
     * Filter, which wallets_transactions to fetch.
     */
    where?: wallets_transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets_transactions to fetch.
     */
    orderBy?: wallets_transactionsOrderByWithRelationInput | wallets_transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing wallets_transactions.
     */
    cursor?: wallets_transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets_transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets_transactions.
     */
    skip?: number
    distinct?: Wallets_transactionsScalarFieldEnum | Wallets_transactionsScalarFieldEnum[]
  }

  /**
   * wallets_transactions create
   */
  export type wallets_transactionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_transactions
     */
    select?: wallets_transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_transactions
     */
    omit?: wallets_transactionsOmit<ExtArgs> | null
    /**
     * The data needed to create a wallets_transactions.
     */
    data: XOR<wallets_transactionsCreateInput, wallets_transactionsUncheckedCreateInput>
  }

  /**
   * wallets_transactions createMany
   */
  export type wallets_transactionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many wallets_transactions.
     */
    data: wallets_transactionsCreateManyInput | wallets_transactionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * wallets_transactions createManyAndReturn
   */
  export type wallets_transactionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_transactions
     */
    select?: wallets_transactionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_transactions
     */
    omit?: wallets_transactionsOmit<ExtArgs> | null
    /**
     * The data used to create many wallets_transactions.
     */
    data: wallets_transactionsCreateManyInput | wallets_transactionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * wallets_transactions update
   */
  export type wallets_transactionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_transactions
     */
    select?: wallets_transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_transactions
     */
    omit?: wallets_transactionsOmit<ExtArgs> | null
    /**
     * The data needed to update a wallets_transactions.
     */
    data: XOR<wallets_transactionsUpdateInput, wallets_transactionsUncheckedUpdateInput>
    /**
     * Choose, which wallets_transactions to update.
     */
    where: wallets_transactionsWhereUniqueInput
  }

  /**
   * wallets_transactions updateMany
   */
  export type wallets_transactionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update wallets_transactions.
     */
    data: XOR<wallets_transactionsUpdateManyMutationInput, wallets_transactionsUncheckedUpdateManyInput>
    /**
     * Filter which wallets_transactions to update
     */
    where?: wallets_transactionsWhereInput
  }

  /**
   * wallets_transactions updateManyAndReturn
   */
  export type wallets_transactionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_transactions
     */
    select?: wallets_transactionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_transactions
     */
    omit?: wallets_transactionsOmit<ExtArgs> | null
    /**
     * The data used to update wallets_transactions.
     */
    data: XOR<wallets_transactionsUpdateManyMutationInput, wallets_transactionsUncheckedUpdateManyInput>
    /**
     * Filter which wallets_transactions to update
     */
    where?: wallets_transactionsWhereInput
  }

  /**
   * wallets_transactions upsert
   */
  export type wallets_transactionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_transactions
     */
    select?: wallets_transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_transactions
     */
    omit?: wallets_transactionsOmit<ExtArgs> | null
    /**
     * The filter to search for the wallets_transactions to update in case it exists.
     */
    where: wallets_transactionsWhereUniqueInput
    /**
     * In case the wallets_transactions found by the `where` argument doesn't exist, create a new wallets_transactions with this data.
     */
    create: XOR<wallets_transactionsCreateInput, wallets_transactionsUncheckedCreateInput>
    /**
     * In case the wallets_transactions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<wallets_transactionsUpdateInput, wallets_transactionsUncheckedUpdateInput>
  }

  /**
   * wallets_transactions delete
   */
  export type wallets_transactionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_transactions
     */
    select?: wallets_transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_transactions
     */
    omit?: wallets_transactionsOmit<ExtArgs> | null
    /**
     * Filter which wallets_transactions to delete.
     */
    where: wallets_transactionsWhereUniqueInput
  }

  /**
   * wallets_transactions deleteMany
   */
  export type wallets_transactionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which wallets_transactions to delete
     */
    where?: wallets_transactionsWhereInput
  }

  /**
   * wallets_transactions without action
   */
  export type wallets_transactionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_transactions
     */
    select?: wallets_transactionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_transactions
     */
    omit?: wallets_transactionsOmit<ExtArgs> | null
  }


  /**
   * Model wallets_users
   */

  export type AggregateWallets_users = {
    _count: Wallets_usersCountAggregateOutputType | null
    _avg: Wallets_usersAvgAggregateOutputType | null
    _sum: Wallets_usersSumAggregateOutputType | null
    _min: Wallets_usersMinAggregateOutputType | null
    _max: Wallets_usersMaxAggregateOutputType | null
  }

  export type Wallets_usersAvgAggregateOutputType = {
    id: number | null
    gangs_id: number | null
  }

  export type Wallets_usersSumAggregateOutputType = {
    id: bigint | null
    gangs_id: number | null
  }

  export type Wallets_usersMinAggregateOutputType = {
    id: bigint | null
    wallet_address: string | null
    user_address: string | null
    created_at: Date | null
    name: string | null
    gangs_id: number | null
    user_did: string | null
    updated_at: Date | null
  }

  export type Wallets_usersMaxAggregateOutputType = {
    id: bigint | null
    wallet_address: string | null
    user_address: string | null
    created_at: Date | null
    name: string | null
    gangs_id: number | null
    user_did: string | null
    updated_at: Date | null
  }

  export type Wallets_usersCountAggregateOutputType = {
    id: number
    wallet_address: number
    user_address: number
    created_at: number
    name: number
    tag: number
    gangs_id: number
    user_did: number
    updated_at: number
    _all: number
  }


  export type Wallets_usersAvgAggregateInputType = {
    id?: true
    gangs_id?: true
  }

  export type Wallets_usersSumAggregateInputType = {
    id?: true
    gangs_id?: true
  }

  export type Wallets_usersMinAggregateInputType = {
    id?: true
    wallet_address?: true
    user_address?: true
    created_at?: true
    name?: true
    gangs_id?: true
    user_did?: true
    updated_at?: true
  }

  export type Wallets_usersMaxAggregateInputType = {
    id?: true
    wallet_address?: true
    user_address?: true
    created_at?: true
    name?: true
    gangs_id?: true
    user_did?: true
    updated_at?: true
  }

  export type Wallets_usersCountAggregateInputType = {
    id?: true
    wallet_address?: true
    user_address?: true
    created_at?: true
    name?: true
    tag?: true
    gangs_id?: true
    user_did?: true
    updated_at?: true
    _all?: true
  }

  export type Wallets_usersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which wallets_users to aggregate.
     */
    where?: wallets_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets_users to fetch.
     */
    orderBy?: wallets_usersOrderByWithRelationInput | wallets_usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: wallets_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned wallets_users
    **/
    _count?: true | Wallets_usersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Wallets_usersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Wallets_usersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Wallets_usersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Wallets_usersMaxAggregateInputType
  }

  export type GetWallets_usersAggregateType<T extends Wallets_usersAggregateArgs> = {
        [P in keyof T & keyof AggregateWallets_users]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallets_users[P]>
      : GetScalarType<T[P], AggregateWallets_users[P]>
  }




  export type wallets_usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: wallets_usersWhereInput
    orderBy?: wallets_usersOrderByWithAggregationInput | wallets_usersOrderByWithAggregationInput[]
    by: Wallets_usersScalarFieldEnum[] | Wallets_usersScalarFieldEnum
    having?: wallets_usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Wallets_usersCountAggregateInputType | true
    _avg?: Wallets_usersAvgAggregateInputType
    _sum?: Wallets_usersSumAggregateInputType
    _min?: Wallets_usersMinAggregateInputType
    _max?: Wallets_usersMaxAggregateInputType
  }

  export type Wallets_usersGroupByOutputType = {
    id: bigint
    wallet_address: string
    user_address: string
    created_at: Date
    name: string
    tag: JsonValue
    gangs_id: number | null
    user_did: string
    updated_at: Date
    _count: Wallets_usersCountAggregateOutputType | null
    _avg: Wallets_usersAvgAggregateOutputType | null
    _sum: Wallets_usersSumAggregateOutputType | null
    _min: Wallets_usersMinAggregateOutputType | null
    _max: Wallets_usersMaxAggregateOutputType | null
  }

  type GetWallets_usersGroupByPayload<T extends wallets_usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Wallets_usersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Wallets_usersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Wallets_usersGroupByOutputType[P]>
            : GetScalarType<T[P], Wallets_usersGroupByOutputType[P]>
        }
      >
    >


  export type wallets_usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wallet_address?: boolean
    user_address?: boolean
    created_at?: boolean
    name?: boolean
    tag?: boolean
    gangs_id?: boolean
    user_did?: boolean
    updated_at?: boolean
    gangs?: boolean | wallets_users$gangsArgs<ExtArgs>
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
    wallets?: boolean | walletsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallets_users"]>

  export type wallets_usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wallet_address?: boolean
    user_address?: boolean
    created_at?: boolean
    name?: boolean
    tag?: boolean
    gangs_id?: boolean
    user_did?: boolean
    updated_at?: boolean
    gangs?: boolean | wallets_users$gangsArgs<ExtArgs>
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
    wallets?: boolean | walletsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallets_users"]>

  export type wallets_usersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    wallet_address?: boolean
    user_address?: boolean
    created_at?: boolean
    name?: boolean
    tag?: boolean
    gangs_id?: boolean
    user_did?: boolean
    updated_at?: boolean
    gangs?: boolean | wallets_users$gangsArgs<ExtArgs>
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
    wallets?: boolean | walletsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallets_users"]>

  export type wallets_usersSelectScalar = {
    id?: boolean
    wallet_address?: boolean
    user_address?: boolean
    created_at?: boolean
    name?: boolean
    tag?: boolean
    gangs_id?: boolean
    user_did?: boolean
    updated_at?: boolean
  }

  export type wallets_usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "wallet_address" | "user_address" | "created_at" | "name" | "tag" | "gangs_id" | "user_did" | "updated_at", ExtArgs["result"]["wallets_users"]>
  export type wallets_usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gangs?: boolean | wallets_users$gangsArgs<ExtArgs>
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
    wallets?: boolean | walletsDefaultArgs<ExtArgs>
  }
  export type wallets_usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gangs?: boolean | wallets_users$gangsArgs<ExtArgs>
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
    wallets?: boolean | walletsDefaultArgs<ExtArgs>
  }
  export type wallets_usersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    gangs?: boolean | wallets_users$gangsArgs<ExtArgs>
    privy_user?: boolean | privy_userDefaultArgs<ExtArgs>
    wallets?: boolean | walletsDefaultArgs<ExtArgs>
  }

  export type $wallets_usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "wallets_users"
    objects: {
      gangs: Prisma.$gangsPayload<ExtArgs> | null
      privy_user: Prisma.$privy_userPayload<ExtArgs>
      wallets: Prisma.$walletsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      wallet_address: string
      user_address: string
      created_at: Date
      name: string
      tag: Prisma.JsonValue
      gangs_id: number | null
      user_did: string
      updated_at: Date
    }, ExtArgs["result"]["wallets_users"]>
    composites: {}
  }

  type wallets_usersGetPayload<S extends boolean | null | undefined | wallets_usersDefaultArgs> = $Result.GetResult<Prisma.$wallets_usersPayload, S>

  type wallets_usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<wallets_usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Wallets_usersCountAggregateInputType | true
    }

  export interface wallets_usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['wallets_users'], meta: { name: 'wallets_users' } }
    /**
     * Find zero or one Wallets_users that matches the filter.
     * @param {wallets_usersFindUniqueArgs} args - Arguments to find a Wallets_users
     * @example
     * // Get one Wallets_users
     * const wallets_users = await prisma.wallets_users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends wallets_usersFindUniqueArgs>(args: SelectSubset<T, wallets_usersFindUniqueArgs<ExtArgs>>): Prisma__wallets_usersClient<$Result.GetResult<Prisma.$wallets_usersPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Wallets_users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {wallets_usersFindUniqueOrThrowArgs} args - Arguments to find a Wallets_users
     * @example
     * // Get one Wallets_users
     * const wallets_users = await prisma.wallets_users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends wallets_usersFindUniqueOrThrowArgs>(args: SelectSubset<T, wallets_usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__wallets_usersClient<$Result.GetResult<Prisma.$wallets_usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Wallets_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallets_usersFindFirstArgs} args - Arguments to find a Wallets_users
     * @example
     * // Get one Wallets_users
     * const wallets_users = await prisma.wallets_users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends wallets_usersFindFirstArgs>(args?: SelectSubset<T, wallets_usersFindFirstArgs<ExtArgs>>): Prisma__wallets_usersClient<$Result.GetResult<Prisma.$wallets_usersPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Wallets_users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallets_usersFindFirstOrThrowArgs} args - Arguments to find a Wallets_users
     * @example
     * // Get one Wallets_users
     * const wallets_users = await prisma.wallets_users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends wallets_usersFindFirstOrThrowArgs>(args?: SelectSubset<T, wallets_usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__wallets_usersClient<$Result.GetResult<Prisma.$wallets_usersPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Wallets_users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallets_usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallets_users
     * const wallets_users = await prisma.wallets_users.findMany()
     * 
     * // Get first 10 Wallets_users
     * const wallets_users = await prisma.wallets_users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wallets_usersWithIdOnly = await prisma.wallets_users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends wallets_usersFindManyArgs>(args?: SelectSubset<T, wallets_usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wallets_usersPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Wallets_users.
     * @param {wallets_usersCreateArgs} args - Arguments to create a Wallets_users.
     * @example
     * // Create one Wallets_users
     * const Wallets_users = await prisma.wallets_users.create({
     *   data: {
     *     // ... data to create a Wallets_users
     *   }
     * })
     * 
     */
    create<T extends wallets_usersCreateArgs>(args: SelectSubset<T, wallets_usersCreateArgs<ExtArgs>>): Prisma__wallets_usersClient<$Result.GetResult<Prisma.$wallets_usersPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Wallets_users.
     * @param {wallets_usersCreateManyArgs} args - Arguments to create many Wallets_users.
     * @example
     * // Create many Wallets_users
     * const wallets_users = await prisma.wallets_users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends wallets_usersCreateManyArgs>(args?: SelectSubset<T, wallets_usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wallets_users and returns the data saved in the database.
     * @param {wallets_usersCreateManyAndReturnArgs} args - Arguments to create many Wallets_users.
     * @example
     * // Create many Wallets_users
     * const wallets_users = await prisma.wallets_users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wallets_users and only return the `id`
     * const wallets_usersWithIdOnly = await prisma.wallets_users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends wallets_usersCreateManyAndReturnArgs>(args?: SelectSubset<T, wallets_usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wallets_usersPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Wallets_users.
     * @param {wallets_usersDeleteArgs} args - Arguments to delete one Wallets_users.
     * @example
     * // Delete one Wallets_users
     * const Wallets_users = await prisma.wallets_users.delete({
     *   where: {
     *     // ... filter to delete one Wallets_users
     *   }
     * })
     * 
     */
    delete<T extends wallets_usersDeleteArgs>(args: SelectSubset<T, wallets_usersDeleteArgs<ExtArgs>>): Prisma__wallets_usersClient<$Result.GetResult<Prisma.$wallets_usersPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Wallets_users.
     * @param {wallets_usersUpdateArgs} args - Arguments to update one Wallets_users.
     * @example
     * // Update one Wallets_users
     * const wallets_users = await prisma.wallets_users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends wallets_usersUpdateArgs>(args: SelectSubset<T, wallets_usersUpdateArgs<ExtArgs>>): Prisma__wallets_usersClient<$Result.GetResult<Prisma.$wallets_usersPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Wallets_users.
     * @param {wallets_usersDeleteManyArgs} args - Arguments to filter Wallets_users to delete.
     * @example
     * // Delete a few Wallets_users
     * const { count } = await prisma.wallets_users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends wallets_usersDeleteManyArgs>(args?: SelectSubset<T, wallets_usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallets_usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallets_users
     * const wallets_users = await prisma.wallets_users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends wallets_usersUpdateManyArgs>(args: SelectSubset<T, wallets_usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets_users and returns the data updated in the database.
     * @param {wallets_usersUpdateManyAndReturnArgs} args - Arguments to update many Wallets_users.
     * @example
     * // Update many Wallets_users
     * const wallets_users = await prisma.wallets_users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Wallets_users and only return the `id`
     * const wallets_usersWithIdOnly = await prisma.wallets_users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends wallets_usersUpdateManyAndReturnArgs>(args: SelectSubset<T, wallets_usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wallets_usersPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Wallets_users.
     * @param {wallets_usersUpsertArgs} args - Arguments to update or create a Wallets_users.
     * @example
     * // Update or create a Wallets_users
     * const wallets_users = await prisma.wallets_users.upsert({
     *   create: {
     *     // ... data to create a Wallets_users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallets_users we want to update
     *   }
     * })
     */
    upsert<T extends wallets_usersUpsertArgs>(args: SelectSubset<T, wallets_usersUpsertArgs<ExtArgs>>): Prisma__wallets_usersClient<$Result.GetResult<Prisma.$wallets_usersPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Wallets_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallets_usersCountArgs} args - Arguments to filter Wallets_users to count.
     * @example
     * // Count the number of Wallets_users
     * const count = await prisma.wallets_users.count({
     *   where: {
     *     // ... the filter for the Wallets_users we want to count
     *   }
     * })
    **/
    count<T extends wallets_usersCountArgs>(
      args?: Subset<T, wallets_usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Wallets_usersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallets_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Wallets_usersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Wallets_usersAggregateArgs>(args: Subset<T, Wallets_usersAggregateArgs>): Prisma.PrismaPromise<GetWallets_usersAggregateType<T>>

    /**
     * Group by Wallets_users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallets_usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends wallets_usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: wallets_usersGroupByArgs['orderBy'] }
        : { orderBy?: wallets_usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, wallets_usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWallets_usersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the wallets_users model
   */
  readonly fields: wallets_usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for wallets_users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__wallets_usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    gangs<T extends wallets_users$gangsArgs<ExtArgs> = {}>(args?: Subset<T, wallets_users$gangsArgs<ExtArgs>>): Prisma__gangsClient<$Result.GetResult<Prisma.$gangsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    privy_user<T extends privy_userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, privy_userDefaultArgs<ExtArgs>>): Prisma__privy_userClient<$Result.GetResult<Prisma.$privy_userPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    wallets<T extends walletsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, walletsDefaultArgs<ExtArgs>>): Prisma__walletsClient<$Result.GetResult<Prisma.$walletsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the wallets_users model
   */ 
  interface wallets_usersFieldRefs {
    readonly id: FieldRef<"wallets_users", 'BigInt'>
    readonly wallet_address: FieldRef<"wallets_users", 'String'>
    readonly user_address: FieldRef<"wallets_users", 'String'>
    readonly created_at: FieldRef<"wallets_users", 'DateTime'>
    readonly name: FieldRef<"wallets_users", 'String'>
    readonly tag: FieldRef<"wallets_users", 'Json'>
    readonly gangs_id: FieldRef<"wallets_users", 'Int'>
    readonly user_did: FieldRef<"wallets_users", 'String'>
    readonly updated_at: FieldRef<"wallets_users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * wallets_users findUnique
   */
  export type wallets_usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersInclude<ExtArgs> | null
    /**
     * Filter, which wallets_users to fetch.
     */
    where: wallets_usersWhereUniqueInput
  }

  /**
   * wallets_users findUniqueOrThrow
   */
  export type wallets_usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersInclude<ExtArgs> | null
    /**
     * Filter, which wallets_users to fetch.
     */
    where: wallets_usersWhereUniqueInput
  }

  /**
   * wallets_users findFirst
   */
  export type wallets_usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersInclude<ExtArgs> | null
    /**
     * Filter, which wallets_users to fetch.
     */
    where?: wallets_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets_users to fetch.
     */
    orderBy?: wallets_usersOrderByWithRelationInput | wallets_usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wallets_users.
     */
    cursor?: wallets_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wallets_users.
     */
    distinct?: Wallets_usersScalarFieldEnum | Wallets_usersScalarFieldEnum[]
  }

  /**
   * wallets_users findFirstOrThrow
   */
  export type wallets_usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersInclude<ExtArgs> | null
    /**
     * Filter, which wallets_users to fetch.
     */
    where?: wallets_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets_users to fetch.
     */
    orderBy?: wallets_usersOrderByWithRelationInput | wallets_usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wallets_users.
     */
    cursor?: wallets_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets_users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wallets_users.
     */
    distinct?: Wallets_usersScalarFieldEnum | Wallets_usersScalarFieldEnum[]
  }

  /**
   * wallets_users findMany
   */
  export type wallets_usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersInclude<ExtArgs> | null
    /**
     * Filter, which wallets_users to fetch.
     */
    where?: wallets_usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallets_users to fetch.
     */
    orderBy?: wallets_usersOrderByWithRelationInput | wallets_usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing wallets_users.
     */
    cursor?: wallets_usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallets_users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallets_users.
     */
    skip?: number
    distinct?: Wallets_usersScalarFieldEnum | Wallets_usersScalarFieldEnum[]
  }

  /**
   * wallets_users create
   */
  export type wallets_usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersInclude<ExtArgs> | null
    /**
     * The data needed to create a wallets_users.
     */
    data: XOR<wallets_usersCreateInput, wallets_usersUncheckedCreateInput>
  }

  /**
   * wallets_users createMany
   */
  export type wallets_usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many wallets_users.
     */
    data: wallets_usersCreateManyInput | wallets_usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * wallets_users createManyAndReturn
   */
  export type wallets_usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * The data used to create many wallets_users.
     */
    data: wallets_usersCreateManyInput | wallets_usersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * wallets_users update
   */
  export type wallets_usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersInclude<ExtArgs> | null
    /**
     * The data needed to update a wallets_users.
     */
    data: XOR<wallets_usersUpdateInput, wallets_usersUncheckedUpdateInput>
    /**
     * Choose, which wallets_users to update.
     */
    where: wallets_usersWhereUniqueInput
  }

  /**
   * wallets_users updateMany
   */
  export type wallets_usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update wallets_users.
     */
    data: XOR<wallets_usersUpdateManyMutationInput, wallets_usersUncheckedUpdateManyInput>
    /**
     * Filter which wallets_users to update
     */
    where?: wallets_usersWhereInput
  }

  /**
   * wallets_users updateManyAndReturn
   */
  export type wallets_usersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * The data used to update wallets_users.
     */
    data: XOR<wallets_usersUpdateManyMutationInput, wallets_usersUncheckedUpdateManyInput>
    /**
     * Filter which wallets_users to update
     */
    where?: wallets_usersWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * wallets_users upsert
   */
  export type wallets_usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersInclude<ExtArgs> | null
    /**
     * The filter to search for the wallets_users to update in case it exists.
     */
    where: wallets_usersWhereUniqueInput
    /**
     * In case the wallets_users found by the `where` argument doesn't exist, create a new wallets_users with this data.
     */
    create: XOR<wallets_usersCreateInput, wallets_usersUncheckedCreateInput>
    /**
     * In case the wallets_users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<wallets_usersUpdateInput, wallets_usersUncheckedUpdateInput>
  }

  /**
   * wallets_users delete
   */
  export type wallets_usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersInclude<ExtArgs> | null
    /**
     * Filter which wallets_users to delete.
     */
    where: wallets_usersWhereUniqueInput
  }

  /**
   * wallets_users deleteMany
   */
  export type wallets_usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which wallets_users to delete
     */
    where?: wallets_usersWhereInput
  }

  /**
   * wallets_users.gangs
   */
  export type wallets_users$gangsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gangs
     */
    select?: gangsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the gangs
     */
    omit?: gangsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gangsInclude<ExtArgs> | null
    where?: gangsWhereInput
  }

  /**
   * wallets_users without action
   */
  export type wallets_usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallets_users
     */
    select?: wallets_usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallets_users
     */
    omit?: wallets_usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: wallets_usersInclude<ExtArgs> | null
  }


  /**
   * Model alert_messages
   */

  export type AggregateAlert_messages = {
    _count: Alert_messagesCountAggregateOutputType | null
    _avg: Alert_messagesAvgAggregateOutputType | null
    _sum: Alert_messagesSumAggregateOutputType | null
    _min: Alert_messagesMinAggregateOutputType | null
    _max: Alert_messagesMaxAggregateOutputType | null
  }

  export type Alert_messagesAvgAggregateOutputType = {
    id: number | null
  }

  export type Alert_messagesSumAggregateOutputType = {
    id: number | null
  }

  export type Alert_messagesMinAggregateOutputType = {
    id: number | null
    user_did: string | null
    created_at: Date | null
    network: string | null
  }

  export type Alert_messagesMaxAggregateOutputType = {
    id: number | null
    user_did: string | null
    created_at: Date | null
    network: string | null
  }

  export type Alert_messagesCountAggregateOutputType = {
    id: number
    user_did: number
    message: number
    wallets: number
    created_at: number
    network: number
    _all: number
  }


  export type Alert_messagesAvgAggregateInputType = {
    id?: true
  }

  export type Alert_messagesSumAggregateInputType = {
    id?: true
  }

  export type Alert_messagesMinAggregateInputType = {
    id?: true
    user_did?: true
    created_at?: true
    network?: true
  }

  export type Alert_messagesMaxAggregateInputType = {
    id?: true
    user_did?: true
    created_at?: true
    network?: true
  }

  export type Alert_messagesCountAggregateInputType = {
    id?: true
    user_did?: true
    message?: true
    wallets?: true
    created_at?: true
    network?: true
    _all?: true
  }

  export type Alert_messagesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which alert_messages to aggregate.
     */
    where?: alert_messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alert_messages to fetch.
     */
    orderBy?: alert_messagesOrderByWithRelationInput | alert_messagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: alert_messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alert_messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alert_messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned alert_messages
    **/
    _count?: true | Alert_messagesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Alert_messagesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Alert_messagesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Alert_messagesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Alert_messagesMaxAggregateInputType
  }

  export type GetAlert_messagesAggregateType<T extends Alert_messagesAggregateArgs> = {
        [P in keyof T & keyof AggregateAlert_messages]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlert_messages[P]>
      : GetScalarType<T[P], AggregateAlert_messages[P]>
  }




  export type alert_messagesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: alert_messagesWhereInput
    orderBy?: alert_messagesOrderByWithAggregationInput | alert_messagesOrderByWithAggregationInput[]
    by: Alert_messagesScalarFieldEnum[] | Alert_messagesScalarFieldEnum
    having?: alert_messagesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Alert_messagesCountAggregateInputType | true
    _avg?: Alert_messagesAvgAggregateInputType
    _sum?: Alert_messagesSumAggregateInputType
    _min?: Alert_messagesMinAggregateInputType
    _max?: Alert_messagesMaxAggregateInputType
  }

  export type Alert_messagesGroupByOutputType = {
    id: number
    user_did: string
    message: JsonValue
    wallets: JsonValue
    created_at: Date
    network: string
    _count: Alert_messagesCountAggregateOutputType | null
    _avg: Alert_messagesAvgAggregateOutputType | null
    _sum: Alert_messagesSumAggregateOutputType | null
    _min: Alert_messagesMinAggregateOutputType | null
    _max: Alert_messagesMaxAggregateOutputType | null
  }

  type GetAlert_messagesGroupByPayload<T extends alert_messagesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Alert_messagesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Alert_messagesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Alert_messagesGroupByOutputType[P]>
            : GetScalarType<T[P], Alert_messagesGroupByOutputType[P]>
        }
      >
    >


  export type alert_messagesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_did?: boolean
    message?: boolean
    wallets?: boolean
    created_at?: boolean
    network?: boolean
  }, ExtArgs["result"]["alert_messages"]>

  export type alert_messagesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_did?: boolean
    message?: boolean
    wallets?: boolean
    created_at?: boolean
    network?: boolean
  }, ExtArgs["result"]["alert_messages"]>

  export type alert_messagesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_did?: boolean
    message?: boolean
    wallets?: boolean
    created_at?: boolean
    network?: boolean
  }, ExtArgs["result"]["alert_messages"]>

  export type alert_messagesSelectScalar = {
    id?: boolean
    user_did?: boolean
    message?: boolean
    wallets?: boolean
    created_at?: boolean
    network?: boolean
  }

  export type alert_messagesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_did" | "message" | "wallets" | "created_at" | "network", ExtArgs["result"]["alert_messages"]>

  export type $alert_messagesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "alert_messages"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_did: string
      message: Prisma.JsonValue
      wallets: Prisma.JsonValue
      created_at: Date
      network: string
    }, ExtArgs["result"]["alert_messages"]>
    composites: {}
  }

  type alert_messagesGetPayload<S extends boolean | null | undefined | alert_messagesDefaultArgs> = $Result.GetResult<Prisma.$alert_messagesPayload, S>

  type alert_messagesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<alert_messagesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Alert_messagesCountAggregateInputType | true
    }

  export interface alert_messagesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['alert_messages'], meta: { name: 'alert_messages' } }
    /**
     * Find zero or one Alert_messages that matches the filter.
     * @param {alert_messagesFindUniqueArgs} args - Arguments to find a Alert_messages
     * @example
     * // Get one Alert_messages
     * const alert_messages = await prisma.alert_messages.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends alert_messagesFindUniqueArgs>(args: SelectSubset<T, alert_messagesFindUniqueArgs<ExtArgs>>): Prisma__alert_messagesClient<$Result.GetResult<Prisma.$alert_messagesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Alert_messages that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {alert_messagesFindUniqueOrThrowArgs} args - Arguments to find a Alert_messages
     * @example
     * // Get one Alert_messages
     * const alert_messages = await prisma.alert_messages.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends alert_messagesFindUniqueOrThrowArgs>(args: SelectSubset<T, alert_messagesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__alert_messagesClient<$Result.GetResult<Prisma.$alert_messagesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Alert_messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alert_messagesFindFirstArgs} args - Arguments to find a Alert_messages
     * @example
     * // Get one Alert_messages
     * const alert_messages = await prisma.alert_messages.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends alert_messagesFindFirstArgs>(args?: SelectSubset<T, alert_messagesFindFirstArgs<ExtArgs>>): Prisma__alert_messagesClient<$Result.GetResult<Prisma.$alert_messagesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Alert_messages that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alert_messagesFindFirstOrThrowArgs} args - Arguments to find a Alert_messages
     * @example
     * // Get one Alert_messages
     * const alert_messages = await prisma.alert_messages.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends alert_messagesFindFirstOrThrowArgs>(args?: SelectSubset<T, alert_messagesFindFirstOrThrowArgs<ExtArgs>>): Prisma__alert_messagesClient<$Result.GetResult<Prisma.$alert_messagesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Alert_messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alert_messagesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alert_messages
     * const alert_messages = await prisma.alert_messages.findMany()
     * 
     * // Get first 10 Alert_messages
     * const alert_messages = await prisma.alert_messages.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alert_messagesWithIdOnly = await prisma.alert_messages.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends alert_messagesFindManyArgs>(args?: SelectSubset<T, alert_messagesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$alert_messagesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Alert_messages.
     * @param {alert_messagesCreateArgs} args - Arguments to create a Alert_messages.
     * @example
     * // Create one Alert_messages
     * const Alert_messages = await prisma.alert_messages.create({
     *   data: {
     *     // ... data to create a Alert_messages
     *   }
     * })
     * 
     */
    create<T extends alert_messagesCreateArgs>(args: SelectSubset<T, alert_messagesCreateArgs<ExtArgs>>): Prisma__alert_messagesClient<$Result.GetResult<Prisma.$alert_messagesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Alert_messages.
     * @param {alert_messagesCreateManyArgs} args - Arguments to create many Alert_messages.
     * @example
     * // Create many Alert_messages
     * const alert_messages = await prisma.alert_messages.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends alert_messagesCreateManyArgs>(args?: SelectSubset<T, alert_messagesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alert_messages and returns the data saved in the database.
     * @param {alert_messagesCreateManyAndReturnArgs} args - Arguments to create many Alert_messages.
     * @example
     * // Create many Alert_messages
     * const alert_messages = await prisma.alert_messages.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alert_messages and only return the `id`
     * const alert_messagesWithIdOnly = await prisma.alert_messages.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends alert_messagesCreateManyAndReturnArgs>(args?: SelectSubset<T, alert_messagesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$alert_messagesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Alert_messages.
     * @param {alert_messagesDeleteArgs} args - Arguments to delete one Alert_messages.
     * @example
     * // Delete one Alert_messages
     * const Alert_messages = await prisma.alert_messages.delete({
     *   where: {
     *     // ... filter to delete one Alert_messages
     *   }
     * })
     * 
     */
    delete<T extends alert_messagesDeleteArgs>(args: SelectSubset<T, alert_messagesDeleteArgs<ExtArgs>>): Prisma__alert_messagesClient<$Result.GetResult<Prisma.$alert_messagesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Alert_messages.
     * @param {alert_messagesUpdateArgs} args - Arguments to update one Alert_messages.
     * @example
     * // Update one Alert_messages
     * const alert_messages = await prisma.alert_messages.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends alert_messagesUpdateArgs>(args: SelectSubset<T, alert_messagesUpdateArgs<ExtArgs>>): Prisma__alert_messagesClient<$Result.GetResult<Prisma.$alert_messagesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Alert_messages.
     * @param {alert_messagesDeleteManyArgs} args - Arguments to filter Alert_messages to delete.
     * @example
     * // Delete a few Alert_messages
     * const { count } = await prisma.alert_messages.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends alert_messagesDeleteManyArgs>(args?: SelectSubset<T, alert_messagesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alert_messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alert_messagesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alert_messages
     * const alert_messages = await prisma.alert_messages.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends alert_messagesUpdateManyArgs>(args: SelectSubset<T, alert_messagesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alert_messages and returns the data updated in the database.
     * @param {alert_messagesUpdateManyAndReturnArgs} args - Arguments to update many Alert_messages.
     * @example
     * // Update many Alert_messages
     * const alert_messages = await prisma.alert_messages.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Alert_messages and only return the `id`
     * const alert_messagesWithIdOnly = await prisma.alert_messages.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends alert_messagesUpdateManyAndReturnArgs>(args: SelectSubset<T, alert_messagesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$alert_messagesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Alert_messages.
     * @param {alert_messagesUpsertArgs} args - Arguments to update or create a Alert_messages.
     * @example
     * // Update or create a Alert_messages
     * const alert_messages = await prisma.alert_messages.upsert({
     *   create: {
     *     // ... data to create a Alert_messages
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alert_messages we want to update
     *   }
     * })
     */
    upsert<T extends alert_messagesUpsertArgs>(args: SelectSubset<T, alert_messagesUpsertArgs<ExtArgs>>): Prisma__alert_messagesClient<$Result.GetResult<Prisma.$alert_messagesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Alert_messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alert_messagesCountArgs} args - Arguments to filter Alert_messages to count.
     * @example
     * // Count the number of Alert_messages
     * const count = await prisma.alert_messages.count({
     *   where: {
     *     // ... the filter for the Alert_messages we want to count
     *   }
     * })
    **/
    count<T extends alert_messagesCountArgs>(
      args?: Subset<T, alert_messagesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Alert_messagesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alert_messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Alert_messagesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Alert_messagesAggregateArgs>(args: Subset<T, Alert_messagesAggregateArgs>): Prisma.PrismaPromise<GetAlert_messagesAggregateType<T>>

    /**
     * Group by Alert_messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {alert_messagesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends alert_messagesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: alert_messagesGroupByArgs['orderBy'] }
        : { orderBy?: alert_messagesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, alert_messagesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlert_messagesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the alert_messages model
   */
  readonly fields: alert_messagesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for alert_messages.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__alert_messagesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the alert_messages model
   */ 
  interface alert_messagesFieldRefs {
    readonly id: FieldRef<"alert_messages", 'Int'>
    readonly user_did: FieldRef<"alert_messages", 'String'>
    readonly message: FieldRef<"alert_messages", 'Json'>
    readonly wallets: FieldRef<"alert_messages", 'Json'>
    readonly created_at: FieldRef<"alert_messages", 'DateTime'>
    readonly network: FieldRef<"alert_messages", 'String'>
  }
    

  // Custom InputTypes
  /**
   * alert_messages findUnique
   */
  export type alert_messagesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alert_messages
     */
    select?: alert_messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alert_messages
     */
    omit?: alert_messagesOmit<ExtArgs> | null
    /**
     * Filter, which alert_messages to fetch.
     */
    where: alert_messagesWhereUniqueInput
  }

  /**
   * alert_messages findUniqueOrThrow
   */
  export type alert_messagesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alert_messages
     */
    select?: alert_messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alert_messages
     */
    omit?: alert_messagesOmit<ExtArgs> | null
    /**
     * Filter, which alert_messages to fetch.
     */
    where: alert_messagesWhereUniqueInput
  }

  /**
   * alert_messages findFirst
   */
  export type alert_messagesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alert_messages
     */
    select?: alert_messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alert_messages
     */
    omit?: alert_messagesOmit<ExtArgs> | null
    /**
     * Filter, which alert_messages to fetch.
     */
    where?: alert_messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alert_messages to fetch.
     */
    orderBy?: alert_messagesOrderByWithRelationInput | alert_messagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for alert_messages.
     */
    cursor?: alert_messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alert_messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alert_messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of alert_messages.
     */
    distinct?: Alert_messagesScalarFieldEnum | Alert_messagesScalarFieldEnum[]
  }

  /**
   * alert_messages findFirstOrThrow
   */
  export type alert_messagesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alert_messages
     */
    select?: alert_messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alert_messages
     */
    omit?: alert_messagesOmit<ExtArgs> | null
    /**
     * Filter, which alert_messages to fetch.
     */
    where?: alert_messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alert_messages to fetch.
     */
    orderBy?: alert_messagesOrderByWithRelationInput | alert_messagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for alert_messages.
     */
    cursor?: alert_messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alert_messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alert_messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of alert_messages.
     */
    distinct?: Alert_messagesScalarFieldEnum | Alert_messagesScalarFieldEnum[]
  }

  /**
   * alert_messages findMany
   */
  export type alert_messagesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alert_messages
     */
    select?: alert_messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alert_messages
     */
    omit?: alert_messagesOmit<ExtArgs> | null
    /**
     * Filter, which alert_messages to fetch.
     */
    where?: alert_messagesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of alert_messages to fetch.
     */
    orderBy?: alert_messagesOrderByWithRelationInput | alert_messagesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing alert_messages.
     */
    cursor?: alert_messagesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` alert_messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` alert_messages.
     */
    skip?: number
    distinct?: Alert_messagesScalarFieldEnum | Alert_messagesScalarFieldEnum[]
  }

  /**
   * alert_messages create
   */
  export type alert_messagesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alert_messages
     */
    select?: alert_messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alert_messages
     */
    omit?: alert_messagesOmit<ExtArgs> | null
    /**
     * The data needed to create a alert_messages.
     */
    data: XOR<alert_messagesCreateInput, alert_messagesUncheckedCreateInput>
  }

  /**
   * alert_messages createMany
   */
  export type alert_messagesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many alert_messages.
     */
    data: alert_messagesCreateManyInput | alert_messagesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * alert_messages createManyAndReturn
   */
  export type alert_messagesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alert_messages
     */
    select?: alert_messagesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the alert_messages
     */
    omit?: alert_messagesOmit<ExtArgs> | null
    /**
     * The data used to create many alert_messages.
     */
    data: alert_messagesCreateManyInput | alert_messagesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * alert_messages update
   */
  export type alert_messagesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alert_messages
     */
    select?: alert_messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alert_messages
     */
    omit?: alert_messagesOmit<ExtArgs> | null
    /**
     * The data needed to update a alert_messages.
     */
    data: XOR<alert_messagesUpdateInput, alert_messagesUncheckedUpdateInput>
    /**
     * Choose, which alert_messages to update.
     */
    where: alert_messagesWhereUniqueInput
  }

  /**
   * alert_messages updateMany
   */
  export type alert_messagesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update alert_messages.
     */
    data: XOR<alert_messagesUpdateManyMutationInput, alert_messagesUncheckedUpdateManyInput>
    /**
     * Filter which alert_messages to update
     */
    where?: alert_messagesWhereInput
  }

  /**
   * alert_messages updateManyAndReturn
   */
  export type alert_messagesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alert_messages
     */
    select?: alert_messagesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the alert_messages
     */
    omit?: alert_messagesOmit<ExtArgs> | null
    /**
     * The data used to update alert_messages.
     */
    data: XOR<alert_messagesUpdateManyMutationInput, alert_messagesUncheckedUpdateManyInput>
    /**
     * Filter which alert_messages to update
     */
    where?: alert_messagesWhereInput
  }

  /**
   * alert_messages upsert
   */
  export type alert_messagesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alert_messages
     */
    select?: alert_messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alert_messages
     */
    omit?: alert_messagesOmit<ExtArgs> | null
    /**
     * The filter to search for the alert_messages to update in case it exists.
     */
    where: alert_messagesWhereUniqueInput
    /**
     * In case the alert_messages found by the `where` argument doesn't exist, create a new alert_messages with this data.
     */
    create: XOR<alert_messagesCreateInput, alert_messagesUncheckedCreateInput>
    /**
     * In case the alert_messages was found with the provided `where` argument, update it with this data.
     */
    update: XOR<alert_messagesUpdateInput, alert_messagesUncheckedUpdateInput>
  }

  /**
   * alert_messages delete
   */
  export type alert_messagesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alert_messages
     */
    select?: alert_messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alert_messages
     */
    omit?: alert_messagesOmit<ExtArgs> | null
    /**
     * Filter which alert_messages to delete.
     */
    where: alert_messagesWhereUniqueInput
  }

  /**
   * alert_messages deleteMany
   */
  export type alert_messagesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which alert_messages to delete
     */
    where?: alert_messagesWhereInput
  }

  /**
   * alert_messages without action
   */
  export type alert_messagesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the alert_messages
     */
    select?: alert_messagesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the alert_messages
     */
    omit?: alert_messagesOmit<ExtArgs> | null
  }


  /**
   * Model fomo_alert
   */

  export type AggregateFomo_alert = {
    _count: Fomo_alertCountAggregateOutputType | null
    _avg: Fomo_alertAvgAggregateOutputType | null
    _sum: Fomo_alertSumAggregateOutputType | null
    _min: Fomo_alertMinAggregateOutputType | null
    _max: Fomo_alertMaxAggregateOutputType | null
  }

  export type Fomo_alertAvgAggregateOutputType = {
    id: number | null
  }

  export type Fomo_alertSumAggregateOutputType = {
    id: number | null
  }

  export type Fomo_alertMinAggregateOutputType = {
    id: number | null
    user_did: string | null
    token_address: string | null
    created_at: Date | null
    updated_at: Date | null
    network: string | null
  }

  export type Fomo_alertMaxAggregateOutputType = {
    id: number | null
    user_did: string | null
    token_address: string | null
    created_at: Date | null
    updated_at: Date | null
    network: string | null
  }

  export type Fomo_alertCountAggregateOutputType = {
    id: number
    user_did: number
    token_address: number
    wallets: number
    created_at: number
    updated_at: number
    network: number
    _all: number
  }


  export type Fomo_alertAvgAggregateInputType = {
    id?: true
  }

  export type Fomo_alertSumAggregateInputType = {
    id?: true
  }

  export type Fomo_alertMinAggregateInputType = {
    id?: true
    user_did?: true
    token_address?: true
    created_at?: true
    updated_at?: true
    network?: true
  }

  export type Fomo_alertMaxAggregateInputType = {
    id?: true
    user_did?: true
    token_address?: true
    created_at?: true
    updated_at?: true
    network?: true
  }

  export type Fomo_alertCountAggregateInputType = {
    id?: true
    user_did?: true
    token_address?: true
    wallets?: true
    created_at?: true
    updated_at?: true
    network?: true
    _all?: true
  }

  export type Fomo_alertAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which fomo_alert to aggregate.
     */
    where?: fomo_alertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fomo_alerts to fetch.
     */
    orderBy?: fomo_alertOrderByWithRelationInput | fomo_alertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: fomo_alertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fomo_alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fomo_alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned fomo_alerts
    **/
    _count?: true | Fomo_alertCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Fomo_alertAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Fomo_alertSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Fomo_alertMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Fomo_alertMaxAggregateInputType
  }

  export type GetFomo_alertAggregateType<T extends Fomo_alertAggregateArgs> = {
        [P in keyof T & keyof AggregateFomo_alert]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFomo_alert[P]>
      : GetScalarType<T[P], AggregateFomo_alert[P]>
  }




  export type fomo_alertGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: fomo_alertWhereInput
    orderBy?: fomo_alertOrderByWithAggregationInput | fomo_alertOrderByWithAggregationInput[]
    by: Fomo_alertScalarFieldEnum[] | Fomo_alertScalarFieldEnum
    having?: fomo_alertScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Fomo_alertCountAggregateInputType | true
    _avg?: Fomo_alertAvgAggregateInputType
    _sum?: Fomo_alertSumAggregateInputType
    _min?: Fomo_alertMinAggregateInputType
    _max?: Fomo_alertMaxAggregateInputType
  }

  export type Fomo_alertGroupByOutputType = {
    id: number
    user_did: string
    token_address: string
    wallets: JsonValue
    created_at: Date
    updated_at: Date
    network: string
    _count: Fomo_alertCountAggregateOutputType | null
    _avg: Fomo_alertAvgAggregateOutputType | null
    _sum: Fomo_alertSumAggregateOutputType | null
    _min: Fomo_alertMinAggregateOutputType | null
    _max: Fomo_alertMaxAggregateOutputType | null
  }

  type GetFomo_alertGroupByPayload<T extends fomo_alertGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Fomo_alertGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Fomo_alertGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Fomo_alertGroupByOutputType[P]>
            : GetScalarType<T[P], Fomo_alertGroupByOutputType[P]>
        }
      >
    >


  export type fomo_alertSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_did?: boolean
    token_address?: boolean
    wallets?: boolean
    created_at?: boolean
    updated_at?: boolean
    network?: boolean
  }, ExtArgs["result"]["fomo_alert"]>

  export type fomo_alertSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_did?: boolean
    token_address?: boolean
    wallets?: boolean
    created_at?: boolean
    updated_at?: boolean
    network?: boolean
  }, ExtArgs["result"]["fomo_alert"]>

  export type fomo_alertSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_did?: boolean
    token_address?: boolean
    wallets?: boolean
    created_at?: boolean
    updated_at?: boolean
    network?: boolean
  }, ExtArgs["result"]["fomo_alert"]>

  export type fomo_alertSelectScalar = {
    id?: boolean
    user_did?: boolean
    token_address?: boolean
    wallets?: boolean
    created_at?: boolean
    updated_at?: boolean
    network?: boolean
  }

  export type fomo_alertOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_did" | "token_address" | "wallets" | "created_at" | "updated_at" | "network", ExtArgs["result"]["fomo_alert"]>

  export type $fomo_alertPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "fomo_alert"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_did: string
      token_address: string
      wallets: Prisma.JsonValue
      created_at: Date
      updated_at: Date
      network: string
    }, ExtArgs["result"]["fomo_alert"]>
    composites: {}
  }

  type fomo_alertGetPayload<S extends boolean | null | undefined | fomo_alertDefaultArgs> = $Result.GetResult<Prisma.$fomo_alertPayload, S>

  type fomo_alertCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<fomo_alertFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Fomo_alertCountAggregateInputType | true
    }

  export interface fomo_alertDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['fomo_alert'], meta: { name: 'fomo_alert' } }
    /**
     * Find zero or one Fomo_alert that matches the filter.
     * @param {fomo_alertFindUniqueArgs} args - Arguments to find a Fomo_alert
     * @example
     * // Get one Fomo_alert
     * const fomo_alert = await prisma.fomo_alert.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends fomo_alertFindUniqueArgs>(args: SelectSubset<T, fomo_alertFindUniqueArgs<ExtArgs>>): Prisma__fomo_alertClient<$Result.GetResult<Prisma.$fomo_alertPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Fomo_alert that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {fomo_alertFindUniqueOrThrowArgs} args - Arguments to find a Fomo_alert
     * @example
     * // Get one Fomo_alert
     * const fomo_alert = await prisma.fomo_alert.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends fomo_alertFindUniqueOrThrowArgs>(args: SelectSubset<T, fomo_alertFindUniqueOrThrowArgs<ExtArgs>>): Prisma__fomo_alertClient<$Result.GetResult<Prisma.$fomo_alertPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Fomo_alert that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fomo_alertFindFirstArgs} args - Arguments to find a Fomo_alert
     * @example
     * // Get one Fomo_alert
     * const fomo_alert = await prisma.fomo_alert.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends fomo_alertFindFirstArgs>(args?: SelectSubset<T, fomo_alertFindFirstArgs<ExtArgs>>): Prisma__fomo_alertClient<$Result.GetResult<Prisma.$fomo_alertPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Fomo_alert that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fomo_alertFindFirstOrThrowArgs} args - Arguments to find a Fomo_alert
     * @example
     * // Get one Fomo_alert
     * const fomo_alert = await prisma.fomo_alert.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends fomo_alertFindFirstOrThrowArgs>(args?: SelectSubset<T, fomo_alertFindFirstOrThrowArgs<ExtArgs>>): Prisma__fomo_alertClient<$Result.GetResult<Prisma.$fomo_alertPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Fomo_alerts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fomo_alertFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Fomo_alerts
     * const fomo_alerts = await prisma.fomo_alert.findMany()
     * 
     * // Get first 10 Fomo_alerts
     * const fomo_alerts = await prisma.fomo_alert.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fomo_alertWithIdOnly = await prisma.fomo_alert.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends fomo_alertFindManyArgs>(args?: SelectSubset<T, fomo_alertFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$fomo_alertPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Fomo_alert.
     * @param {fomo_alertCreateArgs} args - Arguments to create a Fomo_alert.
     * @example
     * // Create one Fomo_alert
     * const Fomo_alert = await prisma.fomo_alert.create({
     *   data: {
     *     // ... data to create a Fomo_alert
     *   }
     * })
     * 
     */
    create<T extends fomo_alertCreateArgs>(args: SelectSubset<T, fomo_alertCreateArgs<ExtArgs>>): Prisma__fomo_alertClient<$Result.GetResult<Prisma.$fomo_alertPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Fomo_alerts.
     * @param {fomo_alertCreateManyArgs} args - Arguments to create many Fomo_alerts.
     * @example
     * // Create many Fomo_alerts
     * const fomo_alert = await prisma.fomo_alert.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends fomo_alertCreateManyArgs>(args?: SelectSubset<T, fomo_alertCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Fomo_alerts and returns the data saved in the database.
     * @param {fomo_alertCreateManyAndReturnArgs} args - Arguments to create many Fomo_alerts.
     * @example
     * // Create many Fomo_alerts
     * const fomo_alert = await prisma.fomo_alert.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Fomo_alerts and only return the `id`
     * const fomo_alertWithIdOnly = await prisma.fomo_alert.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends fomo_alertCreateManyAndReturnArgs>(args?: SelectSubset<T, fomo_alertCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$fomo_alertPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Fomo_alert.
     * @param {fomo_alertDeleteArgs} args - Arguments to delete one Fomo_alert.
     * @example
     * // Delete one Fomo_alert
     * const Fomo_alert = await prisma.fomo_alert.delete({
     *   where: {
     *     // ... filter to delete one Fomo_alert
     *   }
     * })
     * 
     */
    delete<T extends fomo_alertDeleteArgs>(args: SelectSubset<T, fomo_alertDeleteArgs<ExtArgs>>): Prisma__fomo_alertClient<$Result.GetResult<Prisma.$fomo_alertPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Fomo_alert.
     * @param {fomo_alertUpdateArgs} args - Arguments to update one Fomo_alert.
     * @example
     * // Update one Fomo_alert
     * const fomo_alert = await prisma.fomo_alert.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends fomo_alertUpdateArgs>(args: SelectSubset<T, fomo_alertUpdateArgs<ExtArgs>>): Prisma__fomo_alertClient<$Result.GetResult<Prisma.$fomo_alertPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Fomo_alerts.
     * @param {fomo_alertDeleteManyArgs} args - Arguments to filter Fomo_alerts to delete.
     * @example
     * // Delete a few Fomo_alerts
     * const { count } = await prisma.fomo_alert.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends fomo_alertDeleteManyArgs>(args?: SelectSubset<T, fomo_alertDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fomo_alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fomo_alertUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Fomo_alerts
     * const fomo_alert = await prisma.fomo_alert.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends fomo_alertUpdateManyArgs>(args: SelectSubset<T, fomo_alertUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Fomo_alerts and returns the data updated in the database.
     * @param {fomo_alertUpdateManyAndReturnArgs} args - Arguments to update many Fomo_alerts.
     * @example
     * // Update many Fomo_alerts
     * const fomo_alert = await prisma.fomo_alert.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Fomo_alerts and only return the `id`
     * const fomo_alertWithIdOnly = await prisma.fomo_alert.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends fomo_alertUpdateManyAndReturnArgs>(args: SelectSubset<T, fomo_alertUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$fomo_alertPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Fomo_alert.
     * @param {fomo_alertUpsertArgs} args - Arguments to update or create a Fomo_alert.
     * @example
     * // Update or create a Fomo_alert
     * const fomo_alert = await prisma.fomo_alert.upsert({
     *   create: {
     *     // ... data to create a Fomo_alert
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Fomo_alert we want to update
     *   }
     * })
     */
    upsert<T extends fomo_alertUpsertArgs>(args: SelectSubset<T, fomo_alertUpsertArgs<ExtArgs>>): Prisma__fomo_alertClient<$Result.GetResult<Prisma.$fomo_alertPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Fomo_alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fomo_alertCountArgs} args - Arguments to filter Fomo_alerts to count.
     * @example
     * // Count the number of Fomo_alerts
     * const count = await prisma.fomo_alert.count({
     *   where: {
     *     // ... the filter for the Fomo_alerts we want to count
     *   }
     * })
    **/
    count<T extends fomo_alertCountArgs>(
      args?: Subset<T, fomo_alertCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Fomo_alertCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Fomo_alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Fomo_alertAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Fomo_alertAggregateArgs>(args: Subset<T, Fomo_alertAggregateArgs>): Prisma.PrismaPromise<GetFomo_alertAggregateType<T>>

    /**
     * Group by Fomo_alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {fomo_alertGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends fomo_alertGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: fomo_alertGroupByArgs['orderBy'] }
        : { orderBy?: fomo_alertGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, fomo_alertGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFomo_alertGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the fomo_alert model
   */
  readonly fields: fomo_alertFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for fomo_alert.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__fomo_alertClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the fomo_alert model
   */ 
  interface fomo_alertFieldRefs {
    readonly id: FieldRef<"fomo_alert", 'Int'>
    readonly user_did: FieldRef<"fomo_alert", 'String'>
    readonly token_address: FieldRef<"fomo_alert", 'String'>
    readonly wallets: FieldRef<"fomo_alert", 'Json'>
    readonly created_at: FieldRef<"fomo_alert", 'DateTime'>
    readonly updated_at: FieldRef<"fomo_alert", 'DateTime'>
    readonly network: FieldRef<"fomo_alert", 'String'>
  }
    

  // Custom InputTypes
  /**
   * fomo_alert findUnique
   */
  export type fomo_alertFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fomo_alert
     */
    select?: fomo_alertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fomo_alert
     */
    omit?: fomo_alertOmit<ExtArgs> | null
    /**
     * Filter, which fomo_alert to fetch.
     */
    where: fomo_alertWhereUniqueInput
  }

  /**
   * fomo_alert findUniqueOrThrow
   */
  export type fomo_alertFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fomo_alert
     */
    select?: fomo_alertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fomo_alert
     */
    omit?: fomo_alertOmit<ExtArgs> | null
    /**
     * Filter, which fomo_alert to fetch.
     */
    where: fomo_alertWhereUniqueInput
  }

  /**
   * fomo_alert findFirst
   */
  export type fomo_alertFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fomo_alert
     */
    select?: fomo_alertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fomo_alert
     */
    omit?: fomo_alertOmit<ExtArgs> | null
    /**
     * Filter, which fomo_alert to fetch.
     */
    where?: fomo_alertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fomo_alerts to fetch.
     */
    orderBy?: fomo_alertOrderByWithRelationInput | fomo_alertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fomo_alerts.
     */
    cursor?: fomo_alertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fomo_alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fomo_alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fomo_alerts.
     */
    distinct?: Fomo_alertScalarFieldEnum | Fomo_alertScalarFieldEnum[]
  }

  /**
   * fomo_alert findFirstOrThrow
   */
  export type fomo_alertFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fomo_alert
     */
    select?: fomo_alertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fomo_alert
     */
    omit?: fomo_alertOmit<ExtArgs> | null
    /**
     * Filter, which fomo_alert to fetch.
     */
    where?: fomo_alertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fomo_alerts to fetch.
     */
    orderBy?: fomo_alertOrderByWithRelationInput | fomo_alertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for fomo_alerts.
     */
    cursor?: fomo_alertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fomo_alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fomo_alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of fomo_alerts.
     */
    distinct?: Fomo_alertScalarFieldEnum | Fomo_alertScalarFieldEnum[]
  }

  /**
   * fomo_alert findMany
   */
  export type fomo_alertFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fomo_alert
     */
    select?: fomo_alertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fomo_alert
     */
    omit?: fomo_alertOmit<ExtArgs> | null
    /**
     * Filter, which fomo_alerts to fetch.
     */
    where?: fomo_alertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of fomo_alerts to fetch.
     */
    orderBy?: fomo_alertOrderByWithRelationInput | fomo_alertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing fomo_alerts.
     */
    cursor?: fomo_alertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` fomo_alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` fomo_alerts.
     */
    skip?: number
    distinct?: Fomo_alertScalarFieldEnum | Fomo_alertScalarFieldEnum[]
  }

  /**
   * fomo_alert create
   */
  export type fomo_alertCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fomo_alert
     */
    select?: fomo_alertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fomo_alert
     */
    omit?: fomo_alertOmit<ExtArgs> | null
    /**
     * The data needed to create a fomo_alert.
     */
    data: XOR<fomo_alertCreateInput, fomo_alertUncheckedCreateInput>
  }

  /**
   * fomo_alert createMany
   */
  export type fomo_alertCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many fomo_alerts.
     */
    data: fomo_alertCreateManyInput | fomo_alertCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * fomo_alert createManyAndReturn
   */
  export type fomo_alertCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fomo_alert
     */
    select?: fomo_alertSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the fomo_alert
     */
    omit?: fomo_alertOmit<ExtArgs> | null
    /**
     * The data used to create many fomo_alerts.
     */
    data: fomo_alertCreateManyInput | fomo_alertCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * fomo_alert update
   */
  export type fomo_alertUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fomo_alert
     */
    select?: fomo_alertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fomo_alert
     */
    omit?: fomo_alertOmit<ExtArgs> | null
    /**
     * The data needed to update a fomo_alert.
     */
    data: XOR<fomo_alertUpdateInput, fomo_alertUncheckedUpdateInput>
    /**
     * Choose, which fomo_alert to update.
     */
    where: fomo_alertWhereUniqueInput
  }

  /**
   * fomo_alert updateMany
   */
  export type fomo_alertUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update fomo_alerts.
     */
    data: XOR<fomo_alertUpdateManyMutationInput, fomo_alertUncheckedUpdateManyInput>
    /**
     * Filter which fomo_alerts to update
     */
    where?: fomo_alertWhereInput
  }

  /**
   * fomo_alert updateManyAndReturn
   */
  export type fomo_alertUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fomo_alert
     */
    select?: fomo_alertSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the fomo_alert
     */
    omit?: fomo_alertOmit<ExtArgs> | null
    /**
     * The data used to update fomo_alerts.
     */
    data: XOR<fomo_alertUpdateManyMutationInput, fomo_alertUncheckedUpdateManyInput>
    /**
     * Filter which fomo_alerts to update
     */
    where?: fomo_alertWhereInput
  }

  /**
   * fomo_alert upsert
   */
  export type fomo_alertUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fomo_alert
     */
    select?: fomo_alertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fomo_alert
     */
    omit?: fomo_alertOmit<ExtArgs> | null
    /**
     * The filter to search for the fomo_alert to update in case it exists.
     */
    where: fomo_alertWhereUniqueInput
    /**
     * In case the fomo_alert found by the `where` argument doesn't exist, create a new fomo_alert with this data.
     */
    create: XOR<fomo_alertCreateInput, fomo_alertUncheckedCreateInput>
    /**
     * In case the fomo_alert was found with the provided `where` argument, update it with this data.
     */
    update: XOR<fomo_alertUpdateInput, fomo_alertUncheckedUpdateInput>
  }

  /**
   * fomo_alert delete
   */
  export type fomo_alertDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fomo_alert
     */
    select?: fomo_alertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fomo_alert
     */
    omit?: fomo_alertOmit<ExtArgs> | null
    /**
     * Filter which fomo_alert to delete.
     */
    where: fomo_alertWhereUniqueInput
  }

  /**
   * fomo_alert deleteMany
   */
  export type fomo_alertDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which fomo_alerts to delete
     */
    where?: fomo_alertWhereInput
  }

  /**
   * fomo_alert without action
   */
  export type fomo_alertDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the fomo_alert
     */
    select?: fomo_alertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the fomo_alert
     */
    omit?: fomo_alertOmit<ExtArgs> | null
  }


  /**
   * Model wallet_alias
   */

  export type AggregateWallet_alias = {
    _count: Wallet_aliasCountAggregateOutputType | null
    _avg: Wallet_aliasAvgAggregateOutputType | null
    _sum: Wallet_aliasSumAggregateOutputType | null
    _min: Wallet_aliasMinAggregateOutputType | null
    _max: Wallet_aliasMaxAggregateOutputType | null
  }

  export type Wallet_aliasAvgAggregateOutputType = {
    id: number | null
  }

  export type Wallet_aliasSumAggregateOutputType = {
    id: number | null
  }

  export type Wallet_aliasMinAggregateOutputType = {
    id: number | null
    did: string | null
    wallet_address: string | null
    name: string | null
  }

  export type Wallet_aliasMaxAggregateOutputType = {
    id: number | null
    did: string | null
    wallet_address: string | null
    name: string | null
  }

  export type Wallet_aliasCountAggregateOutputType = {
    id: number
    did: number
    wallet_address: number
    name: number
    _all: number
  }


  export type Wallet_aliasAvgAggregateInputType = {
    id?: true
  }

  export type Wallet_aliasSumAggregateInputType = {
    id?: true
  }

  export type Wallet_aliasMinAggregateInputType = {
    id?: true
    did?: true
    wallet_address?: true
    name?: true
  }

  export type Wallet_aliasMaxAggregateInputType = {
    id?: true
    did?: true
    wallet_address?: true
    name?: true
  }

  export type Wallet_aliasCountAggregateInputType = {
    id?: true
    did?: true
    wallet_address?: true
    name?: true
    _all?: true
  }

  export type Wallet_aliasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which wallet_alias to aggregate.
     */
    where?: wallet_aliasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallet_aliases to fetch.
     */
    orderBy?: wallet_aliasOrderByWithRelationInput | wallet_aliasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: wallet_aliasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallet_aliases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallet_aliases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned wallet_aliases
    **/
    _count?: true | Wallet_aliasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Wallet_aliasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Wallet_aliasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Wallet_aliasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Wallet_aliasMaxAggregateInputType
  }

  export type GetWallet_aliasAggregateType<T extends Wallet_aliasAggregateArgs> = {
        [P in keyof T & keyof AggregateWallet_alias]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallet_alias[P]>
      : GetScalarType<T[P], AggregateWallet_alias[P]>
  }




  export type wallet_aliasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: wallet_aliasWhereInput
    orderBy?: wallet_aliasOrderByWithAggregationInput | wallet_aliasOrderByWithAggregationInput[]
    by: Wallet_aliasScalarFieldEnum[] | Wallet_aliasScalarFieldEnum
    having?: wallet_aliasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Wallet_aliasCountAggregateInputType | true
    _avg?: Wallet_aliasAvgAggregateInputType
    _sum?: Wallet_aliasSumAggregateInputType
    _min?: Wallet_aliasMinAggregateInputType
    _max?: Wallet_aliasMaxAggregateInputType
  }

  export type Wallet_aliasGroupByOutputType = {
    id: number
    did: string
    wallet_address: string
    name: string
    _count: Wallet_aliasCountAggregateOutputType | null
    _avg: Wallet_aliasAvgAggregateOutputType | null
    _sum: Wallet_aliasSumAggregateOutputType | null
    _min: Wallet_aliasMinAggregateOutputType | null
    _max: Wallet_aliasMaxAggregateOutputType | null
  }

  type GetWallet_aliasGroupByPayload<T extends wallet_aliasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Wallet_aliasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Wallet_aliasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Wallet_aliasGroupByOutputType[P]>
            : GetScalarType<T[P], Wallet_aliasGroupByOutputType[P]>
        }
      >
    >


  export type wallet_aliasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    did?: boolean
    wallet_address?: boolean
    name?: boolean
  }, ExtArgs["result"]["wallet_alias"]>

  export type wallet_aliasSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    did?: boolean
    wallet_address?: boolean
    name?: boolean
  }, ExtArgs["result"]["wallet_alias"]>

  export type wallet_aliasSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    did?: boolean
    wallet_address?: boolean
    name?: boolean
  }, ExtArgs["result"]["wallet_alias"]>

  export type wallet_aliasSelectScalar = {
    id?: boolean
    did?: boolean
    wallet_address?: boolean
    name?: boolean
  }

  export type wallet_aliasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "did" | "wallet_address" | "name", ExtArgs["result"]["wallet_alias"]>

  export type $wallet_aliasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "wallet_alias"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      did: string
      wallet_address: string
      name: string
    }, ExtArgs["result"]["wallet_alias"]>
    composites: {}
  }

  type wallet_aliasGetPayload<S extends boolean | null | undefined | wallet_aliasDefaultArgs> = $Result.GetResult<Prisma.$wallet_aliasPayload, S>

  type wallet_aliasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<wallet_aliasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Wallet_aliasCountAggregateInputType | true
    }

  export interface wallet_aliasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['wallet_alias'], meta: { name: 'wallet_alias' } }
    /**
     * Find zero or one Wallet_alias that matches the filter.
     * @param {wallet_aliasFindUniqueArgs} args - Arguments to find a Wallet_alias
     * @example
     * // Get one Wallet_alias
     * const wallet_alias = await prisma.wallet_alias.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends wallet_aliasFindUniqueArgs>(args: SelectSubset<T, wallet_aliasFindUniqueArgs<ExtArgs>>): Prisma__wallet_aliasClient<$Result.GetResult<Prisma.$wallet_aliasPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Wallet_alias that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {wallet_aliasFindUniqueOrThrowArgs} args - Arguments to find a Wallet_alias
     * @example
     * // Get one Wallet_alias
     * const wallet_alias = await prisma.wallet_alias.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends wallet_aliasFindUniqueOrThrowArgs>(args: SelectSubset<T, wallet_aliasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__wallet_aliasClient<$Result.GetResult<Prisma.$wallet_aliasPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Wallet_alias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallet_aliasFindFirstArgs} args - Arguments to find a Wallet_alias
     * @example
     * // Get one Wallet_alias
     * const wallet_alias = await prisma.wallet_alias.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends wallet_aliasFindFirstArgs>(args?: SelectSubset<T, wallet_aliasFindFirstArgs<ExtArgs>>): Prisma__wallet_aliasClient<$Result.GetResult<Prisma.$wallet_aliasPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Wallet_alias that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallet_aliasFindFirstOrThrowArgs} args - Arguments to find a Wallet_alias
     * @example
     * // Get one Wallet_alias
     * const wallet_alias = await prisma.wallet_alias.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends wallet_aliasFindFirstOrThrowArgs>(args?: SelectSubset<T, wallet_aliasFindFirstOrThrowArgs<ExtArgs>>): Prisma__wallet_aliasClient<$Result.GetResult<Prisma.$wallet_aliasPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Wallet_aliases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallet_aliasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallet_aliases
     * const wallet_aliases = await prisma.wallet_alias.findMany()
     * 
     * // Get first 10 Wallet_aliases
     * const wallet_aliases = await prisma.wallet_alias.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wallet_aliasWithIdOnly = await prisma.wallet_alias.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends wallet_aliasFindManyArgs>(args?: SelectSubset<T, wallet_aliasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wallet_aliasPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Wallet_alias.
     * @param {wallet_aliasCreateArgs} args - Arguments to create a Wallet_alias.
     * @example
     * // Create one Wallet_alias
     * const Wallet_alias = await prisma.wallet_alias.create({
     *   data: {
     *     // ... data to create a Wallet_alias
     *   }
     * })
     * 
     */
    create<T extends wallet_aliasCreateArgs>(args: SelectSubset<T, wallet_aliasCreateArgs<ExtArgs>>): Prisma__wallet_aliasClient<$Result.GetResult<Prisma.$wallet_aliasPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Wallet_aliases.
     * @param {wallet_aliasCreateManyArgs} args - Arguments to create many Wallet_aliases.
     * @example
     * // Create many Wallet_aliases
     * const wallet_alias = await prisma.wallet_alias.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends wallet_aliasCreateManyArgs>(args?: SelectSubset<T, wallet_aliasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wallet_aliases and returns the data saved in the database.
     * @param {wallet_aliasCreateManyAndReturnArgs} args - Arguments to create many Wallet_aliases.
     * @example
     * // Create many Wallet_aliases
     * const wallet_alias = await prisma.wallet_alias.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wallet_aliases and only return the `id`
     * const wallet_aliasWithIdOnly = await prisma.wallet_alias.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends wallet_aliasCreateManyAndReturnArgs>(args?: SelectSubset<T, wallet_aliasCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wallet_aliasPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Wallet_alias.
     * @param {wallet_aliasDeleteArgs} args - Arguments to delete one Wallet_alias.
     * @example
     * // Delete one Wallet_alias
     * const Wallet_alias = await prisma.wallet_alias.delete({
     *   where: {
     *     // ... filter to delete one Wallet_alias
     *   }
     * })
     * 
     */
    delete<T extends wallet_aliasDeleteArgs>(args: SelectSubset<T, wallet_aliasDeleteArgs<ExtArgs>>): Prisma__wallet_aliasClient<$Result.GetResult<Prisma.$wallet_aliasPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Wallet_alias.
     * @param {wallet_aliasUpdateArgs} args - Arguments to update one Wallet_alias.
     * @example
     * // Update one Wallet_alias
     * const wallet_alias = await prisma.wallet_alias.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends wallet_aliasUpdateArgs>(args: SelectSubset<T, wallet_aliasUpdateArgs<ExtArgs>>): Prisma__wallet_aliasClient<$Result.GetResult<Prisma.$wallet_aliasPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Wallet_aliases.
     * @param {wallet_aliasDeleteManyArgs} args - Arguments to filter Wallet_aliases to delete.
     * @example
     * // Delete a few Wallet_aliases
     * const { count } = await prisma.wallet_alias.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends wallet_aliasDeleteManyArgs>(args?: SelectSubset<T, wallet_aliasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallet_aliases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallet_aliasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallet_aliases
     * const wallet_alias = await prisma.wallet_alias.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends wallet_aliasUpdateManyArgs>(args: SelectSubset<T, wallet_aliasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallet_aliases and returns the data updated in the database.
     * @param {wallet_aliasUpdateManyAndReturnArgs} args - Arguments to update many Wallet_aliases.
     * @example
     * // Update many Wallet_aliases
     * const wallet_alias = await prisma.wallet_alias.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Wallet_aliases and only return the `id`
     * const wallet_aliasWithIdOnly = await prisma.wallet_alias.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends wallet_aliasUpdateManyAndReturnArgs>(args: SelectSubset<T, wallet_aliasUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$wallet_aliasPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Wallet_alias.
     * @param {wallet_aliasUpsertArgs} args - Arguments to update or create a Wallet_alias.
     * @example
     * // Update or create a Wallet_alias
     * const wallet_alias = await prisma.wallet_alias.upsert({
     *   create: {
     *     // ... data to create a Wallet_alias
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallet_alias we want to update
     *   }
     * })
     */
    upsert<T extends wallet_aliasUpsertArgs>(args: SelectSubset<T, wallet_aliasUpsertArgs<ExtArgs>>): Prisma__wallet_aliasClient<$Result.GetResult<Prisma.$wallet_aliasPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Wallet_aliases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallet_aliasCountArgs} args - Arguments to filter Wallet_aliases to count.
     * @example
     * // Count the number of Wallet_aliases
     * const count = await prisma.wallet_alias.count({
     *   where: {
     *     // ... the filter for the Wallet_aliases we want to count
     *   }
     * })
    **/
    count<T extends wallet_aliasCountArgs>(
      args?: Subset<T, wallet_aliasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Wallet_aliasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallet_alias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Wallet_aliasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Wallet_aliasAggregateArgs>(args: Subset<T, Wallet_aliasAggregateArgs>): Prisma.PrismaPromise<GetWallet_aliasAggregateType<T>>

    /**
     * Group by Wallet_alias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {wallet_aliasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends wallet_aliasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: wallet_aliasGroupByArgs['orderBy'] }
        : { orderBy?: wallet_aliasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, wallet_aliasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWallet_aliasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the wallet_alias model
   */
  readonly fields: wallet_aliasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for wallet_alias.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__wallet_aliasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the wallet_alias model
   */ 
  interface wallet_aliasFieldRefs {
    readonly id: FieldRef<"wallet_alias", 'Int'>
    readonly did: FieldRef<"wallet_alias", 'String'>
    readonly wallet_address: FieldRef<"wallet_alias", 'String'>
    readonly name: FieldRef<"wallet_alias", 'String'>
  }
    

  // Custom InputTypes
  /**
   * wallet_alias findUnique
   */
  export type wallet_aliasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet_alias
     */
    select?: wallet_aliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet_alias
     */
    omit?: wallet_aliasOmit<ExtArgs> | null
    /**
     * Filter, which wallet_alias to fetch.
     */
    where: wallet_aliasWhereUniqueInput
  }

  /**
   * wallet_alias findUniqueOrThrow
   */
  export type wallet_aliasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet_alias
     */
    select?: wallet_aliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet_alias
     */
    omit?: wallet_aliasOmit<ExtArgs> | null
    /**
     * Filter, which wallet_alias to fetch.
     */
    where: wallet_aliasWhereUniqueInput
  }

  /**
   * wallet_alias findFirst
   */
  export type wallet_aliasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet_alias
     */
    select?: wallet_aliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet_alias
     */
    omit?: wallet_aliasOmit<ExtArgs> | null
    /**
     * Filter, which wallet_alias to fetch.
     */
    where?: wallet_aliasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallet_aliases to fetch.
     */
    orderBy?: wallet_aliasOrderByWithRelationInput | wallet_aliasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wallet_aliases.
     */
    cursor?: wallet_aliasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallet_aliases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallet_aliases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wallet_aliases.
     */
    distinct?: Wallet_aliasScalarFieldEnum | Wallet_aliasScalarFieldEnum[]
  }

  /**
   * wallet_alias findFirstOrThrow
   */
  export type wallet_aliasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet_alias
     */
    select?: wallet_aliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet_alias
     */
    omit?: wallet_aliasOmit<ExtArgs> | null
    /**
     * Filter, which wallet_alias to fetch.
     */
    where?: wallet_aliasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallet_aliases to fetch.
     */
    orderBy?: wallet_aliasOrderByWithRelationInput | wallet_aliasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for wallet_aliases.
     */
    cursor?: wallet_aliasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallet_aliases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallet_aliases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of wallet_aliases.
     */
    distinct?: Wallet_aliasScalarFieldEnum | Wallet_aliasScalarFieldEnum[]
  }

  /**
   * wallet_alias findMany
   */
  export type wallet_aliasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet_alias
     */
    select?: wallet_aliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet_alias
     */
    omit?: wallet_aliasOmit<ExtArgs> | null
    /**
     * Filter, which wallet_aliases to fetch.
     */
    where?: wallet_aliasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of wallet_aliases to fetch.
     */
    orderBy?: wallet_aliasOrderByWithRelationInput | wallet_aliasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing wallet_aliases.
     */
    cursor?: wallet_aliasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` wallet_aliases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` wallet_aliases.
     */
    skip?: number
    distinct?: Wallet_aliasScalarFieldEnum | Wallet_aliasScalarFieldEnum[]
  }

  /**
   * wallet_alias create
   */
  export type wallet_aliasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet_alias
     */
    select?: wallet_aliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet_alias
     */
    omit?: wallet_aliasOmit<ExtArgs> | null
    /**
     * The data needed to create a wallet_alias.
     */
    data: XOR<wallet_aliasCreateInput, wallet_aliasUncheckedCreateInput>
  }

  /**
   * wallet_alias createMany
   */
  export type wallet_aliasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many wallet_aliases.
     */
    data: wallet_aliasCreateManyInput | wallet_aliasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * wallet_alias createManyAndReturn
   */
  export type wallet_aliasCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet_alias
     */
    select?: wallet_aliasSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the wallet_alias
     */
    omit?: wallet_aliasOmit<ExtArgs> | null
    /**
     * The data used to create many wallet_aliases.
     */
    data: wallet_aliasCreateManyInput | wallet_aliasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * wallet_alias update
   */
  export type wallet_aliasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet_alias
     */
    select?: wallet_aliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet_alias
     */
    omit?: wallet_aliasOmit<ExtArgs> | null
    /**
     * The data needed to update a wallet_alias.
     */
    data: XOR<wallet_aliasUpdateInput, wallet_aliasUncheckedUpdateInput>
    /**
     * Choose, which wallet_alias to update.
     */
    where: wallet_aliasWhereUniqueInput
  }

  /**
   * wallet_alias updateMany
   */
  export type wallet_aliasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update wallet_aliases.
     */
    data: XOR<wallet_aliasUpdateManyMutationInput, wallet_aliasUncheckedUpdateManyInput>
    /**
     * Filter which wallet_aliases to update
     */
    where?: wallet_aliasWhereInput
  }

  /**
   * wallet_alias updateManyAndReturn
   */
  export type wallet_aliasUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet_alias
     */
    select?: wallet_aliasSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the wallet_alias
     */
    omit?: wallet_aliasOmit<ExtArgs> | null
    /**
     * The data used to update wallet_aliases.
     */
    data: XOR<wallet_aliasUpdateManyMutationInput, wallet_aliasUncheckedUpdateManyInput>
    /**
     * Filter which wallet_aliases to update
     */
    where?: wallet_aliasWhereInput
  }

  /**
   * wallet_alias upsert
   */
  export type wallet_aliasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet_alias
     */
    select?: wallet_aliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet_alias
     */
    omit?: wallet_aliasOmit<ExtArgs> | null
    /**
     * The filter to search for the wallet_alias to update in case it exists.
     */
    where: wallet_aliasWhereUniqueInput
    /**
     * In case the wallet_alias found by the `where` argument doesn't exist, create a new wallet_alias with this data.
     */
    create: XOR<wallet_aliasCreateInput, wallet_aliasUncheckedCreateInput>
    /**
     * In case the wallet_alias was found with the provided `where` argument, update it with this data.
     */
    update: XOR<wallet_aliasUpdateInput, wallet_aliasUncheckedUpdateInput>
  }

  /**
   * wallet_alias delete
   */
  export type wallet_aliasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet_alias
     */
    select?: wallet_aliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet_alias
     */
    omit?: wallet_aliasOmit<ExtArgs> | null
    /**
     * Filter which wallet_alias to delete.
     */
    where: wallet_aliasWhereUniqueInput
  }

  /**
   * wallet_alias deleteMany
   */
  export type wallet_aliasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which wallet_aliases to delete
     */
    where?: wallet_aliasWhereInput
  }

  /**
   * wallet_alias without action
   */
  export type wallet_aliasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the wallet_alias
     */
    select?: wallet_aliasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the wallet_alias
     */
    omit?: wallet_aliasOmit<ExtArgs> | null
  }


  /**
   * Model cabal_tokens
   */

  export type AggregateCabal_tokens = {
    _count: Cabal_tokensCountAggregateOutputType | null
    _avg: Cabal_tokensAvgAggregateOutputType | null
    _sum: Cabal_tokensSumAggregateOutputType | null
    _min: Cabal_tokensMinAggregateOutputType | null
    _max: Cabal_tokensMaxAggregateOutputType | null
  }

  export type Cabal_tokensAvgAggregateOutputType = {
    id: number | null
    decimals: number | null
  }

  export type Cabal_tokensSumAggregateOutputType = {
    id: number | null
    decimals: number | null
  }

  export type Cabal_tokensMinAggregateOutputType = {
    id: number | null
    did: string | null
    symbol: string | null
    name: string | null
    url: string | null
    decimals: number | null
    network: string | null
    token_address: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Cabal_tokensMaxAggregateOutputType = {
    id: number | null
    did: string | null
    symbol: string | null
    name: string | null
    url: string | null
    decimals: number | null
    network: string | null
    token_address: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Cabal_tokensCountAggregateOutputType = {
    id: number
    did: number
    symbol: number
    name: number
    url: number
    decimals: number
    network: number
    token_address: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Cabal_tokensAvgAggregateInputType = {
    id?: true
    decimals?: true
  }

  export type Cabal_tokensSumAggregateInputType = {
    id?: true
    decimals?: true
  }

  export type Cabal_tokensMinAggregateInputType = {
    id?: true
    did?: true
    symbol?: true
    name?: true
    url?: true
    decimals?: true
    network?: true
    token_address?: true
    created_at?: true
    updated_at?: true
  }

  export type Cabal_tokensMaxAggregateInputType = {
    id?: true
    did?: true
    symbol?: true
    name?: true
    url?: true
    decimals?: true
    network?: true
    token_address?: true
    created_at?: true
    updated_at?: true
  }

  export type Cabal_tokensCountAggregateInputType = {
    id?: true
    did?: true
    symbol?: true
    name?: true
    url?: true
    decimals?: true
    network?: true
    token_address?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Cabal_tokensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cabal_tokens to aggregate.
     */
    where?: cabal_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cabal_tokens to fetch.
     */
    orderBy?: cabal_tokensOrderByWithRelationInput | cabal_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cabal_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cabal_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cabal_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cabal_tokens
    **/
    _count?: true | Cabal_tokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cabal_tokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cabal_tokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cabal_tokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cabal_tokensMaxAggregateInputType
  }

  export type GetCabal_tokensAggregateType<T extends Cabal_tokensAggregateArgs> = {
        [P in keyof T & keyof AggregateCabal_tokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCabal_tokens[P]>
      : GetScalarType<T[P], AggregateCabal_tokens[P]>
  }




  export type cabal_tokensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cabal_tokensWhereInput
    orderBy?: cabal_tokensOrderByWithAggregationInput | cabal_tokensOrderByWithAggregationInput[]
    by: Cabal_tokensScalarFieldEnum[] | Cabal_tokensScalarFieldEnum
    having?: cabal_tokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cabal_tokensCountAggregateInputType | true
    _avg?: Cabal_tokensAvgAggregateInputType
    _sum?: Cabal_tokensSumAggregateInputType
    _min?: Cabal_tokensMinAggregateInputType
    _max?: Cabal_tokensMaxAggregateInputType
  }

  export type Cabal_tokensGroupByOutputType = {
    id: number
    did: string
    symbol: string | null
    name: string | null
    url: string | null
    decimals: number
    network: string
    token_address: string
    created_at: Date
    updated_at: Date
    _count: Cabal_tokensCountAggregateOutputType | null
    _avg: Cabal_tokensAvgAggregateOutputType | null
    _sum: Cabal_tokensSumAggregateOutputType | null
    _min: Cabal_tokensMinAggregateOutputType | null
    _max: Cabal_tokensMaxAggregateOutputType | null
  }

  type GetCabal_tokensGroupByPayload<T extends cabal_tokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cabal_tokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cabal_tokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cabal_tokensGroupByOutputType[P]>
            : GetScalarType<T[P], Cabal_tokensGroupByOutputType[P]>
        }
      >
    >


  export type cabal_tokensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    did?: boolean
    symbol?: boolean
    name?: boolean
    url?: boolean
    decimals?: boolean
    network?: boolean
    token_address?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["cabal_tokens"]>

  export type cabal_tokensSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    did?: boolean
    symbol?: boolean
    name?: boolean
    url?: boolean
    decimals?: boolean
    network?: boolean
    token_address?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["cabal_tokens"]>

  export type cabal_tokensSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    did?: boolean
    symbol?: boolean
    name?: boolean
    url?: boolean
    decimals?: boolean
    network?: boolean
    token_address?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["cabal_tokens"]>

  export type cabal_tokensSelectScalar = {
    id?: boolean
    did?: boolean
    symbol?: boolean
    name?: boolean
    url?: boolean
    decimals?: boolean
    network?: boolean
    token_address?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type cabal_tokensOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "did" | "symbol" | "name" | "url" | "decimals" | "network" | "token_address" | "created_at" | "updated_at", ExtArgs["result"]["cabal_tokens"]>

  export type $cabal_tokensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cabal_tokens"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      did: string
      symbol: string | null
      name: string | null
      url: string | null
      decimals: number
      network: string
      token_address: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["cabal_tokens"]>
    composites: {}
  }

  type cabal_tokensGetPayload<S extends boolean | null | undefined | cabal_tokensDefaultArgs> = $Result.GetResult<Prisma.$cabal_tokensPayload, S>

  type cabal_tokensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<cabal_tokensFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Cabal_tokensCountAggregateInputType | true
    }

  export interface cabal_tokensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cabal_tokens'], meta: { name: 'cabal_tokens' } }
    /**
     * Find zero or one Cabal_tokens that matches the filter.
     * @param {cabal_tokensFindUniqueArgs} args - Arguments to find a Cabal_tokens
     * @example
     * // Get one Cabal_tokens
     * const cabal_tokens = await prisma.cabal_tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends cabal_tokensFindUniqueArgs>(args: SelectSubset<T, cabal_tokensFindUniqueArgs<ExtArgs>>): Prisma__cabal_tokensClient<$Result.GetResult<Prisma.$cabal_tokensPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Cabal_tokens that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {cabal_tokensFindUniqueOrThrowArgs} args - Arguments to find a Cabal_tokens
     * @example
     * // Get one Cabal_tokens
     * const cabal_tokens = await prisma.cabal_tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends cabal_tokensFindUniqueOrThrowArgs>(args: SelectSubset<T, cabal_tokensFindUniqueOrThrowArgs<ExtArgs>>): Prisma__cabal_tokensClient<$Result.GetResult<Prisma.$cabal_tokensPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Cabal_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cabal_tokensFindFirstArgs} args - Arguments to find a Cabal_tokens
     * @example
     * // Get one Cabal_tokens
     * const cabal_tokens = await prisma.cabal_tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends cabal_tokensFindFirstArgs>(args?: SelectSubset<T, cabal_tokensFindFirstArgs<ExtArgs>>): Prisma__cabal_tokensClient<$Result.GetResult<Prisma.$cabal_tokensPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Cabal_tokens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cabal_tokensFindFirstOrThrowArgs} args - Arguments to find a Cabal_tokens
     * @example
     * // Get one Cabal_tokens
     * const cabal_tokens = await prisma.cabal_tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends cabal_tokensFindFirstOrThrowArgs>(args?: SelectSubset<T, cabal_tokensFindFirstOrThrowArgs<ExtArgs>>): Prisma__cabal_tokensClient<$Result.GetResult<Prisma.$cabal_tokensPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Cabal_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cabal_tokensFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cabal_tokens
     * const cabal_tokens = await prisma.cabal_tokens.findMany()
     * 
     * // Get first 10 Cabal_tokens
     * const cabal_tokens = await prisma.cabal_tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cabal_tokensWithIdOnly = await prisma.cabal_tokens.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends cabal_tokensFindManyArgs>(args?: SelectSubset<T, cabal_tokensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cabal_tokensPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Cabal_tokens.
     * @param {cabal_tokensCreateArgs} args - Arguments to create a Cabal_tokens.
     * @example
     * // Create one Cabal_tokens
     * const Cabal_tokens = await prisma.cabal_tokens.create({
     *   data: {
     *     // ... data to create a Cabal_tokens
     *   }
     * })
     * 
     */
    create<T extends cabal_tokensCreateArgs>(args: SelectSubset<T, cabal_tokensCreateArgs<ExtArgs>>): Prisma__cabal_tokensClient<$Result.GetResult<Prisma.$cabal_tokensPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Cabal_tokens.
     * @param {cabal_tokensCreateManyArgs} args - Arguments to create many Cabal_tokens.
     * @example
     * // Create many Cabal_tokens
     * const cabal_tokens = await prisma.cabal_tokens.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends cabal_tokensCreateManyArgs>(args?: SelectSubset<T, cabal_tokensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cabal_tokens and returns the data saved in the database.
     * @param {cabal_tokensCreateManyAndReturnArgs} args - Arguments to create many Cabal_tokens.
     * @example
     * // Create many Cabal_tokens
     * const cabal_tokens = await prisma.cabal_tokens.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cabal_tokens and only return the `id`
     * const cabal_tokensWithIdOnly = await prisma.cabal_tokens.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends cabal_tokensCreateManyAndReturnArgs>(args?: SelectSubset<T, cabal_tokensCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cabal_tokensPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Cabal_tokens.
     * @param {cabal_tokensDeleteArgs} args - Arguments to delete one Cabal_tokens.
     * @example
     * // Delete one Cabal_tokens
     * const Cabal_tokens = await prisma.cabal_tokens.delete({
     *   where: {
     *     // ... filter to delete one Cabal_tokens
     *   }
     * })
     * 
     */
    delete<T extends cabal_tokensDeleteArgs>(args: SelectSubset<T, cabal_tokensDeleteArgs<ExtArgs>>): Prisma__cabal_tokensClient<$Result.GetResult<Prisma.$cabal_tokensPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Cabal_tokens.
     * @param {cabal_tokensUpdateArgs} args - Arguments to update one Cabal_tokens.
     * @example
     * // Update one Cabal_tokens
     * const cabal_tokens = await prisma.cabal_tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends cabal_tokensUpdateArgs>(args: SelectSubset<T, cabal_tokensUpdateArgs<ExtArgs>>): Prisma__cabal_tokensClient<$Result.GetResult<Prisma.$cabal_tokensPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Cabal_tokens.
     * @param {cabal_tokensDeleteManyArgs} args - Arguments to filter Cabal_tokens to delete.
     * @example
     * // Delete a few Cabal_tokens
     * const { count } = await prisma.cabal_tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends cabal_tokensDeleteManyArgs>(args?: SelectSubset<T, cabal_tokensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cabal_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cabal_tokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cabal_tokens
     * const cabal_tokens = await prisma.cabal_tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends cabal_tokensUpdateManyArgs>(args: SelectSubset<T, cabal_tokensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cabal_tokens and returns the data updated in the database.
     * @param {cabal_tokensUpdateManyAndReturnArgs} args - Arguments to update many Cabal_tokens.
     * @example
     * // Update many Cabal_tokens
     * const cabal_tokens = await prisma.cabal_tokens.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cabal_tokens and only return the `id`
     * const cabal_tokensWithIdOnly = await prisma.cabal_tokens.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends cabal_tokensUpdateManyAndReturnArgs>(args: SelectSubset<T, cabal_tokensUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cabal_tokensPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Cabal_tokens.
     * @param {cabal_tokensUpsertArgs} args - Arguments to update or create a Cabal_tokens.
     * @example
     * // Update or create a Cabal_tokens
     * const cabal_tokens = await prisma.cabal_tokens.upsert({
     *   create: {
     *     // ... data to create a Cabal_tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cabal_tokens we want to update
     *   }
     * })
     */
    upsert<T extends cabal_tokensUpsertArgs>(args: SelectSubset<T, cabal_tokensUpsertArgs<ExtArgs>>): Prisma__cabal_tokensClient<$Result.GetResult<Prisma.$cabal_tokensPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Cabal_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cabal_tokensCountArgs} args - Arguments to filter Cabal_tokens to count.
     * @example
     * // Count the number of Cabal_tokens
     * const count = await prisma.cabal_tokens.count({
     *   where: {
     *     // ... the filter for the Cabal_tokens we want to count
     *   }
     * })
    **/
    count<T extends cabal_tokensCountArgs>(
      args?: Subset<T, cabal_tokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cabal_tokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cabal_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cabal_tokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cabal_tokensAggregateArgs>(args: Subset<T, Cabal_tokensAggregateArgs>): Prisma.PrismaPromise<GetCabal_tokensAggregateType<T>>

    /**
     * Group by Cabal_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cabal_tokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cabal_tokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cabal_tokensGroupByArgs['orderBy'] }
        : { orderBy?: cabal_tokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cabal_tokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCabal_tokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cabal_tokens model
   */
  readonly fields: cabal_tokensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cabal_tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cabal_tokensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cabal_tokens model
   */ 
  interface cabal_tokensFieldRefs {
    readonly id: FieldRef<"cabal_tokens", 'Int'>
    readonly did: FieldRef<"cabal_tokens", 'String'>
    readonly symbol: FieldRef<"cabal_tokens", 'String'>
    readonly name: FieldRef<"cabal_tokens", 'String'>
    readonly url: FieldRef<"cabal_tokens", 'String'>
    readonly decimals: FieldRef<"cabal_tokens", 'Int'>
    readonly network: FieldRef<"cabal_tokens", 'String'>
    readonly token_address: FieldRef<"cabal_tokens", 'String'>
    readonly created_at: FieldRef<"cabal_tokens", 'DateTime'>
    readonly updated_at: FieldRef<"cabal_tokens", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * cabal_tokens findUnique
   */
  export type cabal_tokensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cabal_tokens
     */
    select?: cabal_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cabal_tokens
     */
    omit?: cabal_tokensOmit<ExtArgs> | null
    /**
     * Filter, which cabal_tokens to fetch.
     */
    where: cabal_tokensWhereUniqueInput
  }

  /**
   * cabal_tokens findUniqueOrThrow
   */
  export type cabal_tokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cabal_tokens
     */
    select?: cabal_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cabal_tokens
     */
    omit?: cabal_tokensOmit<ExtArgs> | null
    /**
     * Filter, which cabal_tokens to fetch.
     */
    where: cabal_tokensWhereUniqueInput
  }

  /**
   * cabal_tokens findFirst
   */
  export type cabal_tokensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cabal_tokens
     */
    select?: cabal_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cabal_tokens
     */
    omit?: cabal_tokensOmit<ExtArgs> | null
    /**
     * Filter, which cabal_tokens to fetch.
     */
    where?: cabal_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cabal_tokens to fetch.
     */
    orderBy?: cabal_tokensOrderByWithRelationInput | cabal_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cabal_tokens.
     */
    cursor?: cabal_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cabal_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cabal_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cabal_tokens.
     */
    distinct?: Cabal_tokensScalarFieldEnum | Cabal_tokensScalarFieldEnum[]
  }

  /**
   * cabal_tokens findFirstOrThrow
   */
  export type cabal_tokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cabal_tokens
     */
    select?: cabal_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cabal_tokens
     */
    omit?: cabal_tokensOmit<ExtArgs> | null
    /**
     * Filter, which cabal_tokens to fetch.
     */
    where?: cabal_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cabal_tokens to fetch.
     */
    orderBy?: cabal_tokensOrderByWithRelationInput | cabal_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cabal_tokens.
     */
    cursor?: cabal_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cabal_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cabal_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cabal_tokens.
     */
    distinct?: Cabal_tokensScalarFieldEnum | Cabal_tokensScalarFieldEnum[]
  }

  /**
   * cabal_tokens findMany
   */
  export type cabal_tokensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cabal_tokens
     */
    select?: cabal_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cabal_tokens
     */
    omit?: cabal_tokensOmit<ExtArgs> | null
    /**
     * Filter, which cabal_tokens to fetch.
     */
    where?: cabal_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cabal_tokens to fetch.
     */
    orderBy?: cabal_tokensOrderByWithRelationInput | cabal_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cabal_tokens.
     */
    cursor?: cabal_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cabal_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cabal_tokens.
     */
    skip?: number
    distinct?: Cabal_tokensScalarFieldEnum | Cabal_tokensScalarFieldEnum[]
  }

  /**
   * cabal_tokens create
   */
  export type cabal_tokensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cabal_tokens
     */
    select?: cabal_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cabal_tokens
     */
    omit?: cabal_tokensOmit<ExtArgs> | null
    /**
     * The data needed to create a cabal_tokens.
     */
    data: XOR<cabal_tokensCreateInput, cabal_tokensUncheckedCreateInput>
  }

  /**
   * cabal_tokens createMany
   */
  export type cabal_tokensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cabal_tokens.
     */
    data: cabal_tokensCreateManyInput | cabal_tokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cabal_tokens createManyAndReturn
   */
  export type cabal_tokensCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cabal_tokens
     */
    select?: cabal_tokensSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the cabal_tokens
     */
    omit?: cabal_tokensOmit<ExtArgs> | null
    /**
     * The data used to create many cabal_tokens.
     */
    data: cabal_tokensCreateManyInput | cabal_tokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cabal_tokens update
   */
  export type cabal_tokensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cabal_tokens
     */
    select?: cabal_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cabal_tokens
     */
    omit?: cabal_tokensOmit<ExtArgs> | null
    /**
     * The data needed to update a cabal_tokens.
     */
    data: XOR<cabal_tokensUpdateInput, cabal_tokensUncheckedUpdateInput>
    /**
     * Choose, which cabal_tokens to update.
     */
    where: cabal_tokensWhereUniqueInput
  }

  /**
   * cabal_tokens updateMany
   */
  export type cabal_tokensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cabal_tokens.
     */
    data: XOR<cabal_tokensUpdateManyMutationInput, cabal_tokensUncheckedUpdateManyInput>
    /**
     * Filter which cabal_tokens to update
     */
    where?: cabal_tokensWhereInput
  }

  /**
   * cabal_tokens updateManyAndReturn
   */
  export type cabal_tokensUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cabal_tokens
     */
    select?: cabal_tokensSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the cabal_tokens
     */
    omit?: cabal_tokensOmit<ExtArgs> | null
    /**
     * The data used to update cabal_tokens.
     */
    data: XOR<cabal_tokensUpdateManyMutationInput, cabal_tokensUncheckedUpdateManyInput>
    /**
     * Filter which cabal_tokens to update
     */
    where?: cabal_tokensWhereInput
  }

  /**
   * cabal_tokens upsert
   */
  export type cabal_tokensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cabal_tokens
     */
    select?: cabal_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cabal_tokens
     */
    omit?: cabal_tokensOmit<ExtArgs> | null
    /**
     * The filter to search for the cabal_tokens to update in case it exists.
     */
    where: cabal_tokensWhereUniqueInput
    /**
     * In case the cabal_tokens found by the `where` argument doesn't exist, create a new cabal_tokens with this data.
     */
    create: XOR<cabal_tokensCreateInput, cabal_tokensUncheckedCreateInput>
    /**
     * In case the cabal_tokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cabal_tokensUpdateInput, cabal_tokensUncheckedUpdateInput>
  }

  /**
   * cabal_tokens delete
   */
  export type cabal_tokensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cabal_tokens
     */
    select?: cabal_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cabal_tokens
     */
    omit?: cabal_tokensOmit<ExtArgs> | null
    /**
     * Filter which cabal_tokens to delete.
     */
    where: cabal_tokensWhereUniqueInput
  }

  /**
   * cabal_tokens deleteMany
   */
  export type cabal_tokensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cabal_tokens to delete
     */
    where?: cabal_tokensWhereInput
  }

  /**
   * cabal_tokens without action
   */
  export type cabal_tokensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cabal_tokens
     */
    select?: cabal_tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cabal_tokens
     */
    omit?: cabal_tokensOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FavoriteScalarFieldEnum: {
    id: 'id',
    favorite_address: 'favorite_address',
    state: 'state',
    privy_address: 'privy_address',
    user_did: 'user_did',
    updated_at: 'updated_at'
  };

  export type FavoriteScalarFieldEnum = (typeof FavoriteScalarFieldEnum)[keyof typeof FavoriteScalarFieldEnum]


  export const GangsScalarFieldEnum: {
    id: 'id',
    user_address: 'user_address',
    name: 'name',
    created_at: 'created_at',
    admins: 'admins',
    members: 'members',
    type: 'type',
    user_did: 'user_did',
    is_published: 'is_published',
    published_time: 'published_time',
    description: 'description',
    updated_at: 'updated_at'
  };

  export type GangsScalarFieldEnum = (typeof GangsScalarFieldEnum)[keyof typeof GangsScalarFieldEnum]


  export const Latest_sync_transScalarFieldEnum: {
    id: 'id',
    signature: 'signature',
    address: 'address',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Latest_sync_transScalarFieldEnum = (typeof Latest_sync_transScalarFieldEnum)[keyof typeof Latest_sync_transScalarFieldEnum]


  export const PassScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    updated_at: 'updated_at'
  };

  export type PassScalarFieldEnum = (typeof PassScalarFieldEnum)[keyof typeof PassScalarFieldEnum]


  export const Privy_userScalarFieldEnum: {
    id: 'id',
    address: 'address',
    txs_switch: 'txs_switch',
    dis_switch: 'dis_switch',
    multiple_switch: 'multiple_switch',
    tts_switch: 'tts_switch',
    range_times: 'range_times',
    created_at: 'created_at',
    gangs_collect: 'gangs_collect',
    auto_buy_setting: 'auto_buy_setting',
    swap_setting: 'swap_setting',
    tg_bot: 'tg_bot',
    did: 'did',
    black_time: 'black_time',
    updated_at: 'updated_at',
    fomo_setting: 'fomo_setting'
  };

  export type Privy_userScalarFieldEnum = (typeof Privy_userScalarFieldEnum)[keyof typeof Privy_userScalarFieldEnum]


  export const Privy_users_tokensScalarFieldEnum: {
    id: 'id',
    walletAddress: 'walletAddress',
    tokenAddress: 'tokenAddress',
    balance: 'balance',
    total_amount: 'total_amount',
    token_address: 'token_address',
    wallet_address: 'wallet_address',
    updated_at: 'updated_at'
  };

  export type Privy_users_tokensScalarFieldEnum = (typeof Privy_users_tokensScalarFieldEnum)[keyof typeof Privy_users_tokensScalarFieldEnum]


  export const Problem_transScalarFieldEnum: {
    id: 'id',
    signature: 'signature',
    state: 'state',
    source: 'source',
    result: 'result',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Problem_transScalarFieldEnum = (typeof Problem_transScalarFieldEnum)[keyof typeof Problem_transScalarFieldEnum]


  export const Sol_priceScalarFieldEnum: {
    id: 'id',
    price: 'price',
    time: 'time',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Sol_priceScalarFieldEnum = (typeof Sol_priceScalarFieldEnum)[keyof typeof Sol_priceScalarFieldEnum]


  export const Sorted_tagsScalarFieldEnum: {
    id: 'id',
    tag: 'tag',
    amount: 'amount',
    created_at: 'created_at',
    wallet: 'wallet',
    updated_at: 'updated_at'
  };

  export type Sorted_tagsScalarFieldEnum = (typeof Sorted_tagsScalarFieldEnum)[keyof typeof Sorted_tagsScalarFieldEnum]


  export const SwapScalarFieldEnum: {
    id: 'id',
    wallet: 'wallet',
    token: 'token',
    actions: 'actions',
    created_at: 'created_at',
    signature: 'signature',
    sol_price: 'sol_price',
    state: 'state',
    swap_type: 'swap_type',
    slippage: 'slippage',
    fee: 'fee',
    blocktime: 'blocktime',
    from_address: 'from_address',
    network: 'network',
    swap: 'swap',
    to_address: 'to_address',
    fdv: 'fdv',
    updated_at: 'updated_at'
  };

  export type SwapScalarFieldEnum = (typeof SwapScalarFieldEnum)[keyof typeof SwapScalarFieldEnum]


  export const TokensScalarFieldEnum: {
    id: 'id',
    symbol: 'symbol',
    address: 'address',
    name: 'name',
    uri: 'uri',
    decimals: 'decimals',
    metadata: 'metadata',
    async: 'async',
    followers: 'followers',
    twitter_handle: 'twitter_handle',
    twitter_name: 'twitter_name',
    created_at: 'created_at',
    supply: 'supply',
    network: 'network',
    token_created_time: 'token_created_time',
    updated_at: 'updated_at'
  };

  export type TokensScalarFieldEnum = (typeof TokensScalarFieldEnum)[keyof typeof TokensScalarFieldEnum]


  export const TransactionsScalarFieldEnum: {
    id: 'id',
    signature: 'signature',
    address: 'address',
    blocktime: 'blocktime',
    created_at: 'created_at',
    actions: 'actions',
    block: 'block',
    sol_price: 'sol_price',
    swap_actions: 'swap_actions',
    swap_type: 'swap_type',
    token: 'token',
    from_address: 'from_address',
    network: 'network',
    state: 'state',
    swap: 'swap',
    to_address: 'to_address',
    fdv: 'fdv',
    updated_at: 'updated_at'
  };

  export type TransactionsScalarFieldEnum = (typeof TransactionsScalarFieldEnum)[keyof typeof TransactionsScalarFieldEnum]


  export const TtsScalarFieldEnum: {
    id: 'id',
    tts_address: 'tts_address',
    state: 'state',
    privy_address: 'privy_address',
    user_did: 'user_did',
    updated_at: 'updated_at'
  };

  export type TtsScalarFieldEnum = (typeof TtsScalarFieldEnum)[keyof typeof TtsScalarFieldEnum]


  export const User_watching_tokensScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    token_address: 'token_address',
    state: 'state',
    privy_address: 'privy_address',
    user_did: 'user_did',
    updated_at: 'updated_at'
  };

  export type User_watching_tokensScalarFieldEnum = (typeof User_watching_tokensScalarFieldEnum)[keyof typeof User_watching_tokensScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    address: 'address',
    state: 'state',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const Users_tokensScalarFieldEnum: {
    id: 'id',
    walletAddress: 'walletAddress',
    tokenAddress: 'tokenAddress',
    balance: 'balance',
    total_amount: 'total_amount',
    token_address: 'token_address',
    wallet_address: 'wallet_address',
    updated_at: 'updated_at'
  };

  export type Users_tokensScalarFieldEnum = (typeof Users_tokensScalarFieldEnum)[keyof typeof Users_tokensScalarFieldEnum]


  export const WalletsScalarFieldEnum: {
    id: 'id',
    address: 'address',
    state: 'state',
    created_at: 'created_at',
    type: 'type',
    black_time: 'black_time',
    updated_at: 'updated_at'
  };

  export type WalletsScalarFieldEnum = (typeof WalletsScalarFieldEnum)[keyof typeof WalletsScalarFieldEnum]


  export const Wallets_transactionsScalarFieldEnum: {
    id: 'id',
    signature: 'signature',
    address: 'address',
    created_at: 'created_at',
    accounts: 'accounts',
    updated_at: 'updated_at'
  };

  export type Wallets_transactionsScalarFieldEnum = (typeof Wallets_transactionsScalarFieldEnum)[keyof typeof Wallets_transactionsScalarFieldEnum]


  export const Wallets_usersScalarFieldEnum: {
    id: 'id',
    wallet_address: 'wallet_address',
    user_address: 'user_address',
    created_at: 'created_at',
    name: 'name',
    tag: 'tag',
    gangs_id: 'gangs_id',
    user_did: 'user_did',
    updated_at: 'updated_at'
  };

  export type Wallets_usersScalarFieldEnum = (typeof Wallets_usersScalarFieldEnum)[keyof typeof Wallets_usersScalarFieldEnum]


  export const Alert_messagesScalarFieldEnum: {
    id: 'id',
    user_did: 'user_did',
    message: 'message',
    wallets: 'wallets',
    created_at: 'created_at',
    network: 'network'
  };

  export type Alert_messagesScalarFieldEnum = (typeof Alert_messagesScalarFieldEnum)[keyof typeof Alert_messagesScalarFieldEnum]


  export const Fomo_alertScalarFieldEnum: {
    id: 'id',
    user_did: 'user_did',
    token_address: 'token_address',
    wallets: 'wallets',
    created_at: 'created_at',
    updated_at: 'updated_at',
    network: 'network'
  };

  export type Fomo_alertScalarFieldEnum = (typeof Fomo_alertScalarFieldEnum)[keyof typeof Fomo_alertScalarFieldEnum]


  export const Wallet_aliasScalarFieldEnum: {
    id: 'id',
    did: 'did',
    wallet_address: 'wallet_address',
    name: 'name'
  };

  export type Wallet_aliasScalarFieldEnum = (typeof Wallet_aliasScalarFieldEnum)[keyof typeof Wallet_aliasScalarFieldEnum]


  export const Cabal_tokensScalarFieldEnum: {
    id: 'id',
    did: 'did',
    symbol: 'symbol',
    name: 'name',
    url: 'url',
    decimals: 'decimals',
    network: 'network',
    token_address: 'token_address',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Cabal_tokensScalarFieldEnum = (typeof Cabal_tokensScalarFieldEnum)[keyof typeof Cabal_tokensScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    
  /**
   * Deep Input Types
   */


  export type favoriteWhereInput = {
    AND?: favoriteWhereInput | favoriteWhereInput[]
    OR?: favoriteWhereInput[]
    NOT?: favoriteWhereInput | favoriteWhereInput[]
    id?: IntFilter<"favorite"> | number
    favorite_address?: StringFilter<"favorite"> | string
    state?: IntFilter<"favorite"> | number
    privy_address?: StringFilter<"favorite"> | string
    user_did?: StringFilter<"favorite"> | string
    updated_at?: DateTimeFilter<"favorite"> | Date | string
    privy_user?: XOR<Privy_userScalarRelationFilter, privy_userWhereInput>
  }

  export type favoriteOrderByWithRelationInput = {
    id?: SortOrder
    favorite_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
    privy_user?: privy_userOrderByWithRelationInput
  }

  export type favoriteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_did_favorite_address?: favoriteUser_didFavorite_addressCompoundUniqueInput
    AND?: favoriteWhereInput | favoriteWhereInput[]
    OR?: favoriteWhereInput[]
    NOT?: favoriteWhereInput | favoriteWhereInput[]
    favorite_address?: StringFilter<"favorite"> | string
    state?: IntFilter<"favorite"> | number
    privy_address?: StringFilter<"favorite"> | string
    user_did?: StringFilter<"favorite"> | string
    updated_at?: DateTimeFilter<"favorite"> | Date | string
    privy_user?: XOR<Privy_userScalarRelationFilter, privy_userWhereInput>
  }, "id" | "id" | "user_did_favorite_address">

  export type favoriteOrderByWithAggregationInput = {
    id?: SortOrder
    favorite_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
    _count?: favoriteCountOrderByAggregateInput
    _avg?: favoriteAvgOrderByAggregateInput
    _max?: favoriteMaxOrderByAggregateInput
    _min?: favoriteMinOrderByAggregateInput
    _sum?: favoriteSumOrderByAggregateInput
  }

  export type favoriteScalarWhereWithAggregatesInput = {
    AND?: favoriteScalarWhereWithAggregatesInput | favoriteScalarWhereWithAggregatesInput[]
    OR?: favoriteScalarWhereWithAggregatesInput[]
    NOT?: favoriteScalarWhereWithAggregatesInput | favoriteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"favorite"> | number
    favorite_address?: StringWithAggregatesFilter<"favorite"> | string
    state?: IntWithAggregatesFilter<"favorite"> | number
    privy_address?: StringWithAggregatesFilter<"favorite"> | string
    user_did?: StringWithAggregatesFilter<"favorite"> | string
    updated_at?: DateTimeWithAggregatesFilter<"favorite"> | Date | string
  }

  export type gangsWhereInput = {
    AND?: gangsWhereInput | gangsWhereInput[]
    OR?: gangsWhereInput[]
    NOT?: gangsWhereInput | gangsWhereInput[]
    id?: IntFilter<"gangs"> | number
    user_address?: StringFilter<"gangs"> | string
    name?: StringFilter<"gangs"> | string
    created_at?: DateTimeFilter<"gangs"> | Date | string
    admins?: JsonFilter<"gangs">
    members?: JsonFilter<"gangs">
    type?: IntFilter<"gangs"> | number
    user_did?: StringFilter<"gangs"> | string
    is_published?: BoolFilter<"gangs"> | boolean
    published_time?: IntFilter<"gangs"> | number
    description?: StringFilter<"gangs"> | string
    updated_at?: DateTimeFilter<"gangs"> | Date | string
    privy_user?: XOR<Privy_userScalarRelationFilter, privy_userWhereInput>
    wallets_users?: Wallets_usersListRelationFilter
  }

  export type gangsOrderByWithRelationInput = {
    id?: SortOrder
    user_address?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    admins?: SortOrder
    members?: SortOrder
    type?: SortOrder
    user_did?: SortOrder
    is_published?: SortOrder
    published_time?: SortOrder
    description?: SortOrder
    updated_at?: SortOrder
    privy_user?: privy_userOrderByWithRelationInput
    wallets_users?: wallets_usersOrderByRelationAggregateInput
  }

  export type gangsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name_user_did?: gangsNameUser_didCompoundUniqueInput
    AND?: gangsWhereInput | gangsWhereInput[]
    OR?: gangsWhereInput[]
    NOT?: gangsWhereInput | gangsWhereInput[]
    user_address?: StringFilter<"gangs"> | string
    name?: StringFilter<"gangs"> | string
    created_at?: DateTimeFilter<"gangs"> | Date | string
    admins?: JsonFilter<"gangs">
    members?: JsonFilter<"gangs">
    type?: IntFilter<"gangs"> | number
    user_did?: StringFilter<"gangs"> | string
    is_published?: BoolFilter<"gangs"> | boolean
    published_time?: IntFilter<"gangs"> | number
    description?: StringFilter<"gangs"> | string
    updated_at?: DateTimeFilter<"gangs"> | Date | string
    privy_user?: XOR<Privy_userScalarRelationFilter, privy_userWhereInput>
    wallets_users?: Wallets_usersListRelationFilter
  }, "id" | "id" | "name_user_did">

  export type gangsOrderByWithAggregationInput = {
    id?: SortOrder
    user_address?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    admins?: SortOrder
    members?: SortOrder
    type?: SortOrder
    user_did?: SortOrder
    is_published?: SortOrder
    published_time?: SortOrder
    description?: SortOrder
    updated_at?: SortOrder
    _count?: gangsCountOrderByAggregateInput
    _avg?: gangsAvgOrderByAggregateInput
    _max?: gangsMaxOrderByAggregateInput
    _min?: gangsMinOrderByAggregateInput
    _sum?: gangsSumOrderByAggregateInput
  }

  export type gangsScalarWhereWithAggregatesInput = {
    AND?: gangsScalarWhereWithAggregatesInput | gangsScalarWhereWithAggregatesInput[]
    OR?: gangsScalarWhereWithAggregatesInput[]
    NOT?: gangsScalarWhereWithAggregatesInput | gangsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"gangs"> | number
    user_address?: StringWithAggregatesFilter<"gangs"> | string
    name?: StringWithAggregatesFilter<"gangs"> | string
    created_at?: DateTimeWithAggregatesFilter<"gangs"> | Date | string
    admins?: JsonWithAggregatesFilter<"gangs">
    members?: JsonWithAggregatesFilter<"gangs">
    type?: IntWithAggregatesFilter<"gangs"> | number
    user_did?: StringWithAggregatesFilter<"gangs"> | string
    is_published?: BoolWithAggregatesFilter<"gangs"> | boolean
    published_time?: IntWithAggregatesFilter<"gangs"> | number
    description?: StringWithAggregatesFilter<"gangs"> | string
    updated_at?: DateTimeWithAggregatesFilter<"gangs"> | Date | string
  }

  export type latest_sync_transWhereInput = {
    AND?: latest_sync_transWhereInput | latest_sync_transWhereInput[]
    OR?: latest_sync_transWhereInput[]
    NOT?: latest_sync_transWhereInput | latest_sync_transWhereInput[]
    id?: BigIntFilter<"latest_sync_trans"> | bigint | number
    signature?: StringFilter<"latest_sync_trans"> | string
    address?: StringFilter<"latest_sync_trans"> | string
    created_at?: DateTimeFilter<"latest_sync_trans"> | Date | string
    updated_at?: DateTimeFilter<"latest_sync_trans"> | Date | string
  }

  export type latest_sync_transOrderByWithRelationInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type latest_sync_transWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    signature?: string
    AND?: latest_sync_transWhereInput | latest_sync_transWhereInput[]
    OR?: latest_sync_transWhereInput[]
    NOT?: latest_sync_transWhereInput | latest_sync_transWhereInput[]
    address?: StringFilter<"latest_sync_trans"> | string
    created_at?: DateTimeFilter<"latest_sync_trans"> | Date | string
    updated_at?: DateTimeFilter<"latest_sync_trans"> | Date | string
  }, "id" | "signature">

  export type latest_sync_transOrderByWithAggregationInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: latest_sync_transCountOrderByAggregateInput
    _avg?: latest_sync_transAvgOrderByAggregateInput
    _max?: latest_sync_transMaxOrderByAggregateInput
    _min?: latest_sync_transMinOrderByAggregateInput
    _sum?: latest_sync_transSumOrderByAggregateInput
  }

  export type latest_sync_transScalarWhereWithAggregatesInput = {
    AND?: latest_sync_transScalarWhereWithAggregatesInput | latest_sync_transScalarWhereWithAggregatesInput[]
    OR?: latest_sync_transScalarWhereWithAggregatesInput[]
    NOT?: latest_sync_transScalarWhereWithAggregatesInput | latest_sync_transScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"latest_sync_trans"> | bigint | number
    signature?: StringWithAggregatesFilter<"latest_sync_trans"> | string
    address?: StringWithAggregatesFilter<"latest_sync_trans"> | string
    created_at?: DateTimeWithAggregatesFilter<"latest_sync_trans"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"latest_sync_trans"> | Date | string
  }

  export type passWhereInput = {
    AND?: passWhereInput | passWhereInput[]
    OR?: passWhereInput[]
    NOT?: passWhereInput | passWhereInput[]
    id?: UuidFilter<"pass"> | string
    username?: StringFilter<"pass"> | string
    password?: StringFilter<"pass"> | string
    updated_at?: DateTimeFilter<"pass"> | Date | string
  }

  export type passOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    updated_at?: SortOrder
  }

  export type passWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: passWhereInput | passWhereInput[]
    OR?: passWhereInput[]
    NOT?: passWhereInput | passWhereInput[]
    password?: StringFilter<"pass"> | string
    updated_at?: DateTimeFilter<"pass"> | Date | string
  }, "id" | "username">

  export type passOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    updated_at?: SortOrder
    _count?: passCountOrderByAggregateInput
    _max?: passMaxOrderByAggregateInput
    _min?: passMinOrderByAggregateInput
  }

  export type passScalarWhereWithAggregatesInput = {
    AND?: passScalarWhereWithAggregatesInput | passScalarWhereWithAggregatesInput[]
    OR?: passScalarWhereWithAggregatesInput[]
    NOT?: passScalarWhereWithAggregatesInput | passScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"pass"> | string
    username?: StringWithAggregatesFilter<"pass"> | string
    password?: StringWithAggregatesFilter<"pass"> | string
    updated_at?: DateTimeWithAggregatesFilter<"pass"> | Date | string
  }

  export type privy_userWhereInput = {
    AND?: privy_userWhereInput | privy_userWhereInput[]
    OR?: privy_userWhereInput[]
    NOT?: privy_userWhereInput | privy_userWhereInput[]
    id?: IntFilter<"privy_user"> | number
    address?: StringFilter<"privy_user"> | string
    txs_switch?: BoolFilter<"privy_user"> | boolean
    dis_switch?: BoolFilter<"privy_user"> | boolean
    multiple_switch?: BoolFilter<"privy_user"> | boolean
    tts_switch?: BoolFilter<"privy_user"> | boolean
    range_times?: StringFilter<"privy_user"> | string
    created_at?: DateTimeFilter<"privy_user"> | Date | string
    gangs_collect?: IntNullableListFilter<"privy_user">
    auto_buy_setting?: JsonNullableFilter<"privy_user">
    swap_setting?: JsonNullableFilter<"privy_user">
    tg_bot?: JsonNullableFilter<"privy_user">
    did?: StringFilter<"privy_user"> | string
    black_time?: IntFilter<"privy_user"> | number
    updated_at?: DateTimeFilter<"privy_user"> | Date | string
    fomo_setting?: JsonNullableFilter<"privy_user">
    favorite?: FavoriteListRelationFilter
    gangs?: GangsListRelationFilter
    tts?: TtsListRelationFilter
    user_watching_tokens?: User_watching_tokensListRelationFilter
    wallets_users?: Wallets_usersListRelationFilter
  }

  export type privy_userOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    txs_switch?: SortOrder
    dis_switch?: SortOrder
    multiple_switch?: SortOrder
    tts_switch?: SortOrder
    range_times?: SortOrder
    created_at?: SortOrder
    gangs_collect?: SortOrder
    auto_buy_setting?: SortOrderInput | SortOrder
    swap_setting?: SortOrderInput | SortOrder
    tg_bot?: SortOrderInput | SortOrder
    did?: SortOrder
    black_time?: SortOrder
    updated_at?: SortOrder
    fomo_setting?: SortOrderInput | SortOrder
    favorite?: favoriteOrderByRelationAggregateInput
    gangs?: gangsOrderByRelationAggregateInput
    tts?: ttsOrderByRelationAggregateInput
    user_watching_tokens?: user_watching_tokensOrderByRelationAggregateInput
    wallets_users?: wallets_usersOrderByRelationAggregateInput
  }

  export type privy_userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    did?: string
    AND?: privy_userWhereInput | privy_userWhereInput[]
    OR?: privy_userWhereInput[]
    NOT?: privy_userWhereInput | privy_userWhereInput[]
    address?: StringFilter<"privy_user"> | string
    txs_switch?: BoolFilter<"privy_user"> | boolean
    dis_switch?: BoolFilter<"privy_user"> | boolean
    multiple_switch?: BoolFilter<"privy_user"> | boolean
    tts_switch?: BoolFilter<"privy_user"> | boolean
    range_times?: StringFilter<"privy_user"> | string
    created_at?: DateTimeFilter<"privy_user"> | Date | string
    gangs_collect?: IntNullableListFilter<"privy_user">
    auto_buy_setting?: JsonNullableFilter<"privy_user">
    swap_setting?: JsonNullableFilter<"privy_user">
    tg_bot?: JsonNullableFilter<"privy_user">
    black_time?: IntFilter<"privy_user"> | number
    updated_at?: DateTimeFilter<"privy_user"> | Date | string
    fomo_setting?: JsonNullableFilter<"privy_user">
    favorite?: FavoriteListRelationFilter
    gangs?: GangsListRelationFilter
    tts?: TtsListRelationFilter
    user_watching_tokens?: User_watching_tokensListRelationFilter
    wallets_users?: Wallets_usersListRelationFilter
  }, "id" | "id" | "did">

  export type privy_userOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    txs_switch?: SortOrder
    dis_switch?: SortOrder
    multiple_switch?: SortOrder
    tts_switch?: SortOrder
    range_times?: SortOrder
    created_at?: SortOrder
    gangs_collect?: SortOrder
    auto_buy_setting?: SortOrderInput | SortOrder
    swap_setting?: SortOrderInput | SortOrder
    tg_bot?: SortOrderInput | SortOrder
    did?: SortOrder
    black_time?: SortOrder
    updated_at?: SortOrder
    fomo_setting?: SortOrderInput | SortOrder
    _count?: privy_userCountOrderByAggregateInput
    _avg?: privy_userAvgOrderByAggregateInput
    _max?: privy_userMaxOrderByAggregateInput
    _min?: privy_userMinOrderByAggregateInput
    _sum?: privy_userSumOrderByAggregateInput
  }

  export type privy_userScalarWhereWithAggregatesInput = {
    AND?: privy_userScalarWhereWithAggregatesInput | privy_userScalarWhereWithAggregatesInput[]
    OR?: privy_userScalarWhereWithAggregatesInput[]
    NOT?: privy_userScalarWhereWithAggregatesInput | privy_userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"privy_user"> | number
    address?: StringWithAggregatesFilter<"privy_user"> | string
    txs_switch?: BoolWithAggregatesFilter<"privy_user"> | boolean
    dis_switch?: BoolWithAggregatesFilter<"privy_user"> | boolean
    multiple_switch?: BoolWithAggregatesFilter<"privy_user"> | boolean
    tts_switch?: BoolWithAggregatesFilter<"privy_user"> | boolean
    range_times?: StringWithAggregatesFilter<"privy_user"> | string
    created_at?: DateTimeWithAggregatesFilter<"privy_user"> | Date | string
    gangs_collect?: IntNullableListFilter<"privy_user">
    auto_buy_setting?: JsonNullableWithAggregatesFilter<"privy_user">
    swap_setting?: JsonNullableWithAggregatesFilter<"privy_user">
    tg_bot?: JsonNullableWithAggregatesFilter<"privy_user">
    did?: StringWithAggregatesFilter<"privy_user"> | string
    black_time?: IntWithAggregatesFilter<"privy_user"> | number
    updated_at?: DateTimeWithAggregatesFilter<"privy_user"> | Date | string
    fomo_setting?: JsonNullableWithAggregatesFilter<"privy_user">
  }

  export type privy_users_tokensWhereInput = {
    AND?: privy_users_tokensWhereInput | privy_users_tokensWhereInput[]
    OR?: privy_users_tokensWhereInput[]
    NOT?: privy_users_tokensWhereInput | privy_users_tokensWhereInput[]
    id?: BigIntFilter<"privy_users_tokens"> | bigint | number
    walletAddress?: StringFilter<"privy_users_tokens"> | string
    tokenAddress?: StringFilter<"privy_users_tokens"> | string
    balance?: BigIntFilter<"privy_users_tokens"> | bigint | number
    total_amount?: BigIntFilter<"privy_users_tokens"> | bigint | number
    token_address?: StringFilter<"privy_users_tokens"> | string
    wallet_address?: StringFilter<"privy_users_tokens"> | string
    updated_at?: DateTimeFilter<"privy_users_tokens"> | Date | string
  }

  export type privy_users_tokensOrderByWithRelationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    tokenAddress?: SortOrder
    balance?: SortOrder
    total_amount?: SortOrder
    token_address?: SortOrder
    wallet_address?: SortOrder
    updated_at?: SortOrder
  }

  export type privy_users_tokensWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    walletAddress_tokenAddress?: privy_users_tokensWalletAddressTokenAddressCompoundUniqueInput
    AND?: privy_users_tokensWhereInput | privy_users_tokensWhereInput[]
    OR?: privy_users_tokensWhereInput[]
    NOT?: privy_users_tokensWhereInput | privy_users_tokensWhereInput[]
    walletAddress?: StringFilter<"privy_users_tokens"> | string
    tokenAddress?: StringFilter<"privy_users_tokens"> | string
    balance?: BigIntFilter<"privy_users_tokens"> | bigint | number
    total_amount?: BigIntFilter<"privy_users_tokens"> | bigint | number
    token_address?: StringFilter<"privy_users_tokens"> | string
    wallet_address?: StringFilter<"privy_users_tokens"> | string
    updated_at?: DateTimeFilter<"privy_users_tokens"> | Date | string
  }, "id" | "walletAddress_tokenAddress">

  export type privy_users_tokensOrderByWithAggregationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    tokenAddress?: SortOrder
    balance?: SortOrder
    total_amount?: SortOrder
    token_address?: SortOrder
    wallet_address?: SortOrder
    updated_at?: SortOrder
    _count?: privy_users_tokensCountOrderByAggregateInput
    _avg?: privy_users_tokensAvgOrderByAggregateInput
    _max?: privy_users_tokensMaxOrderByAggregateInput
    _min?: privy_users_tokensMinOrderByAggregateInput
    _sum?: privy_users_tokensSumOrderByAggregateInput
  }

  export type privy_users_tokensScalarWhereWithAggregatesInput = {
    AND?: privy_users_tokensScalarWhereWithAggregatesInput | privy_users_tokensScalarWhereWithAggregatesInput[]
    OR?: privy_users_tokensScalarWhereWithAggregatesInput[]
    NOT?: privy_users_tokensScalarWhereWithAggregatesInput | privy_users_tokensScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"privy_users_tokens"> | bigint | number
    walletAddress?: StringWithAggregatesFilter<"privy_users_tokens"> | string
    tokenAddress?: StringWithAggregatesFilter<"privy_users_tokens"> | string
    balance?: BigIntWithAggregatesFilter<"privy_users_tokens"> | bigint | number
    total_amount?: BigIntWithAggregatesFilter<"privy_users_tokens"> | bigint | number
    token_address?: StringWithAggregatesFilter<"privy_users_tokens"> | string
    wallet_address?: StringWithAggregatesFilter<"privy_users_tokens"> | string
    updated_at?: DateTimeWithAggregatesFilter<"privy_users_tokens"> | Date | string
  }

  export type problem_transWhereInput = {
    AND?: problem_transWhereInput | problem_transWhereInput[]
    OR?: problem_transWhereInput[]
    NOT?: problem_transWhereInput | problem_transWhereInput[]
    id?: BigIntFilter<"problem_trans"> | bigint | number
    signature?: StringFilter<"problem_trans"> | string
    state?: IntFilter<"problem_trans"> | number
    source?: StringFilter<"problem_trans"> | string
    result?: StringNullableFilter<"problem_trans"> | string | null
    created_at?: DateTimeFilter<"problem_trans"> | Date | string
    updated_at?: DateTimeFilter<"problem_trans"> | Date | string
  }

  export type problem_transOrderByWithRelationInput = {
    id?: SortOrder
    signature?: SortOrder
    state?: SortOrder
    source?: SortOrder
    result?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type problem_transWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    signature?: string
    AND?: problem_transWhereInput | problem_transWhereInput[]
    OR?: problem_transWhereInput[]
    NOT?: problem_transWhereInput | problem_transWhereInput[]
    state?: IntFilter<"problem_trans"> | number
    source?: StringFilter<"problem_trans"> | string
    result?: StringNullableFilter<"problem_trans"> | string | null
    created_at?: DateTimeFilter<"problem_trans"> | Date | string
    updated_at?: DateTimeFilter<"problem_trans"> | Date | string
  }, "id" | "signature">

  export type problem_transOrderByWithAggregationInput = {
    id?: SortOrder
    signature?: SortOrder
    state?: SortOrder
    source?: SortOrder
    result?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: problem_transCountOrderByAggregateInput
    _avg?: problem_transAvgOrderByAggregateInput
    _max?: problem_transMaxOrderByAggregateInput
    _min?: problem_transMinOrderByAggregateInput
    _sum?: problem_transSumOrderByAggregateInput
  }

  export type problem_transScalarWhereWithAggregatesInput = {
    AND?: problem_transScalarWhereWithAggregatesInput | problem_transScalarWhereWithAggregatesInput[]
    OR?: problem_transScalarWhereWithAggregatesInput[]
    NOT?: problem_transScalarWhereWithAggregatesInput | problem_transScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"problem_trans"> | bigint | number
    signature?: StringWithAggregatesFilter<"problem_trans"> | string
    state?: IntWithAggregatesFilter<"problem_trans"> | number
    source?: StringWithAggregatesFilter<"problem_trans"> | string
    result?: StringNullableWithAggregatesFilter<"problem_trans"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"problem_trans"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"problem_trans"> | Date | string
  }

  export type sol_priceWhereInput = {
    AND?: sol_priceWhereInput | sol_priceWhereInput[]
    OR?: sol_priceWhereInput[]
    NOT?: sol_priceWhereInput | sol_priceWhereInput[]
    id?: IntFilter<"sol_price"> | number
    price?: StringFilter<"sol_price"> | string
    time?: IntFilter<"sol_price"> | number
    created_at?: DateTimeFilter<"sol_price"> | Date | string
    updated_at?: DateTimeFilter<"sol_price"> | Date | string
  }

  export type sol_priceOrderByWithRelationInput = {
    id?: SortOrder
    price?: SortOrder
    time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type sol_priceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: sol_priceWhereInput | sol_priceWhereInput[]
    OR?: sol_priceWhereInput[]
    NOT?: sol_priceWhereInput | sol_priceWhereInput[]
    price?: StringFilter<"sol_price"> | string
    time?: IntFilter<"sol_price"> | number
    created_at?: DateTimeFilter<"sol_price"> | Date | string
    updated_at?: DateTimeFilter<"sol_price"> | Date | string
  }, "id" | "id">

  export type sol_priceOrderByWithAggregationInput = {
    id?: SortOrder
    price?: SortOrder
    time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: sol_priceCountOrderByAggregateInput
    _avg?: sol_priceAvgOrderByAggregateInput
    _max?: sol_priceMaxOrderByAggregateInput
    _min?: sol_priceMinOrderByAggregateInput
    _sum?: sol_priceSumOrderByAggregateInput
  }

  export type sol_priceScalarWhereWithAggregatesInput = {
    AND?: sol_priceScalarWhereWithAggregatesInput | sol_priceScalarWhereWithAggregatesInput[]
    OR?: sol_priceScalarWhereWithAggregatesInput[]
    NOT?: sol_priceScalarWhereWithAggregatesInput | sol_priceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"sol_price"> | number
    price?: StringWithAggregatesFilter<"sol_price"> | string
    time?: IntWithAggregatesFilter<"sol_price"> | number
    created_at?: DateTimeWithAggregatesFilter<"sol_price"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"sol_price"> | Date | string
  }

  export type sorted_tagsWhereInput = {
    AND?: sorted_tagsWhereInput | sorted_tagsWhereInput[]
    OR?: sorted_tagsWhereInput[]
    NOT?: sorted_tagsWhereInput | sorted_tagsWhereInput[]
    id?: IntFilter<"sorted_tags"> | number
    tag?: StringFilter<"sorted_tags"> | string
    amount?: IntFilter<"sorted_tags"> | number
    created_at?: DateTimeFilter<"sorted_tags"> | Date | string
    wallet?: StringFilter<"sorted_tags"> | string
    updated_at?: DateTimeFilter<"sorted_tags"> | Date | string
  }

  export type sorted_tagsOrderByWithRelationInput = {
    id?: SortOrder
    tag?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    wallet?: SortOrder
    updated_at?: SortOrder
  }

  export type sorted_tagsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    tag_wallet?: sorted_tagsTagWalletCompoundUniqueInput
    AND?: sorted_tagsWhereInput | sorted_tagsWhereInput[]
    OR?: sorted_tagsWhereInput[]
    NOT?: sorted_tagsWhereInput | sorted_tagsWhereInput[]
    tag?: StringFilter<"sorted_tags"> | string
    amount?: IntFilter<"sorted_tags"> | number
    created_at?: DateTimeFilter<"sorted_tags"> | Date | string
    wallet?: StringFilter<"sorted_tags"> | string
    updated_at?: DateTimeFilter<"sorted_tags"> | Date | string
  }, "id" | "id" | "tag_wallet">

  export type sorted_tagsOrderByWithAggregationInput = {
    id?: SortOrder
    tag?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    wallet?: SortOrder
    updated_at?: SortOrder
    _count?: sorted_tagsCountOrderByAggregateInput
    _avg?: sorted_tagsAvgOrderByAggregateInput
    _max?: sorted_tagsMaxOrderByAggregateInput
    _min?: sorted_tagsMinOrderByAggregateInput
    _sum?: sorted_tagsSumOrderByAggregateInput
  }

  export type sorted_tagsScalarWhereWithAggregatesInput = {
    AND?: sorted_tagsScalarWhereWithAggregatesInput | sorted_tagsScalarWhereWithAggregatesInput[]
    OR?: sorted_tagsScalarWhereWithAggregatesInput[]
    NOT?: sorted_tagsScalarWhereWithAggregatesInput | sorted_tagsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"sorted_tags"> | number
    tag?: StringWithAggregatesFilter<"sorted_tags"> | string
    amount?: IntWithAggregatesFilter<"sorted_tags"> | number
    created_at?: DateTimeWithAggregatesFilter<"sorted_tags"> | Date | string
    wallet?: StringWithAggregatesFilter<"sorted_tags"> | string
    updated_at?: DateTimeWithAggregatesFilter<"sorted_tags"> | Date | string
  }

  export type swapWhereInput = {
    AND?: swapWhereInput | swapWhereInput[]
    OR?: swapWhereInput[]
    NOT?: swapWhereInput | swapWhereInput[]
    id?: IntFilter<"swap"> | number
    wallet?: StringFilter<"swap"> | string
    token?: StringFilter<"swap"> | string
    actions?: JsonNullableFilter<"swap">
    created_at?: DateTimeFilter<"swap"> | Date | string
    signature?: StringFilter<"swap"> | string
    sol_price?: StringFilter<"swap"> | string
    state?: StringFilter<"swap"> | string
    swap_type?: StringFilter<"swap"> | string
    slippage?: FloatFilter<"swap"> | number
    fee?: BigIntFilter<"swap"> | bigint | number
    blocktime?: IntFilter<"swap"> | number
    from_address?: StringNullableFilter<"swap"> | string | null
    network?: StringFilter<"swap"> | string
    swap?: JsonNullableFilter<"swap">
    to_address?: StringNullableFilter<"swap"> | string | null
    fdv?: DecimalFilter<"swap"> | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFilter<"swap"> | Date | string
  }

  export type swapOrderByWithRelationInput = {
    id?: SortOrder
    wallet?: SortOrder
    token?: SortOrder
    actions?: SortOrderInput | SortOrder
    created_at?: SortOrder
    signature?: SortOrder
    sol_price?: SortOrder
    state?: SortOrder
    swap_type?: SortOrder
    slippage?: SortOrder
    fee?: SortOrder
    blocktime?: SortOrder
    from_address?: SortOrderInput | SortOrder
    network?: SortOrder
    swap?: SortOrderInput | SortOrder
    to_address?: SortOrderInput | SortOrder
    fdv?: SortOrder
    updated_at?: SortOrder
  }

  export type swapWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    signature?: string
    AND?: swapWhereInput | swapWhereInput[]
    OR?: swapWhereInput[]
    NOT?: swapWhereInput | swapWhereInput[]
    wallet?: StringFilter<"swap"> | string
    token?: StringFilter<"swap"> | string
    actions?: JsonNullableFilter<"swap">
    created_at?: DateTimeFilter<"swap"> | Date | string
    sol_price?: StringFilter<"swap"> | string
    state?: StringFilter<"swap"> | string
    swap_type?: StringFilter<"swap"> | string
    slippage?: FloatFilter<"swap"> | number
    fee?: BigIntFilter<"swap"> | bigint | number
    blocktime?: IntFilter<"swap"> | number
    from_address?: StringNullableFilter<"swap"> | string | null
    network?: StringFilter<"swap"> | string
    swap?: JsonNullableFilter<"swap">
    to_address?: StringNullableFilter<"swap"> | string | null
    fdv?: DecimalFilter<"swap"> | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFilter<"swap"> | Date | string
  }, "id" | "id" | "signature">

  export type swapOrderByWithAggregationInput = {
    id?: SortOrder
    wallet?: SortOrder
    token?: SortOrder
    actions?: SortOrderInput | SortOrder
    created_at?: SortOrder
    signature?: SortOrder
    sol_price?: SortOrder
    state?: SortOrder
    swap_type?: SortOrder
    slippage?: SortOrder
    fee?: SortOrder
    blocktime?: SortOrder
    from_address?: SortOrderInput | SortOrder
    network?: SortOrder
    swap?: SortOrderInput | SortOrder
    to_address?: SortOrderInput | SortOrder
    fdv?: SortOrder
    updated_at?: SortOrder
    _count?: swapCountOrderByAggregateInput
    _avg?: swapAvgOrderByAggregateInput
    _max?: swapMaxOrderByAggregateInput
    _min?: swapMinOrderByAggregateInput
    _sum?: swapSumOrderByAggregateInput
  }

  export type swapScalarWhereWithAggregatesInput = {
    AND?: swapScalarWhereWithAggregatesInput | swapScalarWhereWithAggregatesInput[]
    OR?: swapScalarWhereWithAggregatesInput[]
    NOT?: swapScalarWhereWithAggregatesInput | swapScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"swap"> | number
    wallet?: StringWithAggregatesFilter<"swap"> | string
    token?: StringWithAggregatesFilter<"swap"> | string
    actions?: JsonNullableWithAggregatesFilter<"swap">
    created_at?: DateTimeWithAggregatesFilter<"swap"> | Date | string
    signature?: StringWithAggregatesFilter<"swap"> | string
    sol_price?: StringWithAggregatesFilter<"swap"> | string
    state?: StringWithAggregatesFilter<"swap"> | string
    swap_type?: StringWithAggregatesFilter<"swap"> | string
    slippage?: FloatWithAggregatesFilter<"swap"> | number
    fee?: BigIntWithAggregatesFilter<"swap"> | bigint | number
    blocktime?: IntWithAggregatesFilter<"swap"> | number
    from_address?: StringNullableWithAggregatesFilter<"swap"> | string | null
    network?: StringWithAggregatesFilter<"swap"> | string
    swap?: JsonNullableWithAggregatesFilter<"swap">
    to_address?: StringNullableWithAggregatesFilter<"swap"> | string | null
    fdv?: DecimalWithAggregatesFilter<"swap"> | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeWithAggregatesFilter<"swap"> | Date | string
  }

  export type tokensWhereInput = {
    AND?: tokensWhereInput | tokensWhereInput[]
    OR?: tokensWhereInput[]
    NOT?: tokensWhereInput | tokensWhereInput[]
    id?: BigIntFilter<"tokens"> | bigint | number
    symbol?: StringFilter<"tokens"> | string
    address?: StringFilter<"tokens"> | string
    name?: StringNullableFilter<"tokens"> | string | null
    uri?: StringNullableFilter<"tokens"> | string | null
    decimals?: IntFilter<"tokens"> | number
    metadata?: JsonNullableFilter<"tokens">
    async?: BoolNullableFilter<"tokens"> | boolean | null
    followers?: IntNullableFilter<"tokens"> | number | null
    twitter_handle?: StringNullableFilter<"tokens"> | string | null
    twitter_name?: StringNullableFilter<"tokens"> | string | null
    created_at?: DateTimeFilter<"tokens"> | Date | string
    supply?: BigIntFilter<"tokens"> | bigint | number
    network?: StringFilter<"tokens"> | string
    token_created_time?: IntFilter<"tokens"> | number
    updated_at?: DateTimeFilter<"tokens"> | Date | string
  }

  export type tokensOrderByWithRelationInput = {
    id?: SortOrder
    symbol?: SortOrder
    address?: SortOrder
    name?: SortOrderInput | SortOrder
    uri?: SortOrderInput | SortOrder
    decimals?: SortOrder
    metadata?: SortOrderInput | SortOrder
    async?: SortOrderInput | SortOrder
    followers?: SortOrderInput | SortOrder
    twitter_handle?: SortOrderInput | SortOrder
    twitter_name?: SortOrderInput | SortOrder
    created_at?: SortOrder
    supply?: SortOrder
    network?: SortOrder
    token_created_time?: SortOrder
    updated_at?: SortOrder
  }

  export type tokensWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    address?: string
    AND?: tokensWhereInput | tokensWhereInput[]
    OR?: tokensWhereInput[]
    NOT?: tokensWhereInput | tokensWhereInput[]
    symbol?: StringFilter<"tokens"> | string
    name?: StringNullableFilter<"tokens"> | string | null
    uri?: StringNullableFilter<"tokens"> | string | null
    decimals?: IntFilter<"tokens"> | number
    metadata?: JsonNullableFilter<"tokens">
    async?: BoolNullableFilter<"tokens"> | boolean | null
    followers?: IntNullableFilter<"tokens"> | number | null
    twitter_handle?: StringNullableFilter<"tokens"> | string | null
    twitter_name?: StringNullableFilter<"tokens"> | string | null
    created_at?: DateTimeFilter<"tokens"> | Date | string
    supply?: BigIntFilter<"tokens"> | bigint | number
    network?: StringFilter<"tokens"> | string
    token_created_time?: IntFilter<"tokens"> | number
    updated_at?: DateTimeFilter<"tokens"> | Date | string
  }, "id" | "address">

  export type tokensOrderByWithAggregationInput = {
    id?: SortOrder
    symbol?: SortOrder
    address?: SortOrder
    name?: SortOrderInput | SortOrder
    uri?: SortOrderInput | SortOrder
    decimals?: SortOrder
    metadata?: SortOrderInput | SortOrder
    async?: SortOrderInput | SortOrder
    followers?: SortOrderInput | SortOrder
    twitter_handle?: SortOrderInput | SortOrder
    twitter_name?: SortOrderInput | SortOrder
    created_at?: SortOrder
    supply?: SortOrder
    network?: SortOrder
    token_created_time?: SortOrder
    updated_at?: SortOrder
    _count?: tokensCountOrderByAggregateInput
    _avg?: tokensAvgOrderByAggregateInput
    _max?: tokensMaxOrderByAggregateInput
    _min?: tokensMinOrderByAggregateInput
    _sum?: tokensSumOrderByAggregateInput
  }

  export type tokensScalarWhereWithAggregatesInput = {
    AND?: tokensScalarWhereWithAggregatesInput | tokensScalarWhereWithAggregatesInput[]
    OR?: tokensScalarWhereWithAggregatesInput[]
    NOT?: tokensScalarWhereWithAggregatesInput | tokensScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"tokens"> | bigint | number
    symbol?: StringWithAggregatesFilter<"tokens"> | string
    address?: StringWithAggregatesFilter<"tokens"> | string
    name?: StringNullableWithAggregatesFilter<"tokens"> | string | null
    uri?: StringNullableWithAggregatesFilter<"tokens"> | string | null
    decimals?: IntWithAggregatesFilter<"tokens"> | number
    metadata?: JsonNullableWithAggregatesFilter<"tokens">
    async?: BoolNullableWithAggregatesFilter<"tokens"> | boolean | null
    followers?: IntNullableWithAggregatesFilter<"tokens"> | number | null
    twitter_handle?: StringNullableWithAggregatesFilter<"tokens"> | string | null
    twitter_name?: StringNullableWithAggregatesFilter<"tokens"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"tokens"> | Date | string
    supply?: BigIntWithAggregatesFilter<"tokens"> | bigint | number
    network?: StringWithAggregatesFilter<"tokens"> | string
    token_created_time?: IntWithAggregatesFilter<"tokens"> | number
    updated_at?: DateTimeWithAggregatesFilter<"tokens"> | Date | string
  }

  export type transactionsWhereInput = {
    AND?: transactionsWhereInput | transactionsWhereInput[]
    OR?: transactionsWhereInput[]
    NOT?: transactionsWhereInput | transactionsWhereInput[]
    id?: BigIntFilter<"transactions"> | bigint | number
    signature?: StringFilter<"transactions"> | string
    address?: StringFilter<"transactions"> | string
    blocktime?: IntFilter<"transactions"> | number
    created_at?: DateTimeFilter<"transactions"> | Date | string
    actions?: JsonNullableFilter<"transactions">
    block?: BigIntFilter<"transactions"> | bigint | number
    sol_price?: StringFilter<"transactions"> | string
    swap_actions?: JsonNullableFilter<"transactions">
    swap_type?: StringFilter<"transactions"> | string
    token?: StringNullableFilter<"transactions"> | string | null
    from_address?: StringNullableFilter<"transactions"> | string | null
    network?: StringFilter<"transactions"> | string
    state?: StringFilter<"transactions"> | string
    swap?: JsonNullableFilter<"transactions">
    to_address?: StringNullableFilter<"transactions"> | string | null
    fdv?: DecimalFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFilter<"transactions"> | Date | string
  }

  export type transactionsOrderByWithRelationInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    blocktime?: SortOrder
    created_at?: SortOrder
    actions?: SortOrderInput | SortOrder
    block?: SortOrder
    sol_price?: SortOrder
    swap_actions?: SortOrderInput | SortOrder
    swap_type?: SortOrder
    token?: SortOrderInput | SortOrder
    from_address?: SortOrderInput | SortOrder
    network?: SortOrder
    state?: SortOrder
    swap?: SortOrderInput | SortOrder
    to_address?: SortOrderInput | SortOrder
    fdv?: SortOrder
    updated_at?: SortOrder
  }

  export type transactionsWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    signature?: string
    AND?: transactionsWhereInput | transactionsWhereInput[]
    OR?: transactionsWhereInput[]
    NOT?: transactionsWhereInput | transactionsWhereInput[]
    address?: StringFilter<"transactions"> | string
    blocktime?: IntFilter<"transactions"> | number
    created_at?: DateTimeFilter<"transactions"> | Date | string
    actions?: JsonNullableFilter<"transactions">
    block?: BigIntFilter<"transactions"> | bigint | number
    sol_price?: StringFilter<"transactions"> | string
    swap_actions?: JsonNullableFilter<"transactions">
    swap_type?: StringFilter<"transactions"> | string
    token?: StringNullableFilter<"transactions"> | string | null
    from_address?: StringNullableFilter<"transactions"> | string | null
    network?: StringFilter<"transactions"> | string
    state?: StringFilter<"transactions"> | string
    swap?: JsonNullableFilter<"transactions">
    to_address?: StringNullableFilter<"transactions"> | string | null
    fdv?: DecimalFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFilter<"transactions"> | Date | string
  }, "id" | "signature">

  export type transactionsOrderByWithAggregationInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    blocktime?: SortOrder
    created_at?: SortOrder
    actions?: SortOrderInput | SortOrder
    block?: SortOrder
    sol_price?: SortOrder
    swap_actions?: SortOrderInput | SortOrder
    swap_type?: SortOrder
    token?: SortOrderInput | SortOrder
    from_address?: SortOrderInput | SortOrder
    network?: SortOrder
    state?: SortOrder
    swap?: SortOrderInput | SortOrder
    to_address?: SortOrderInput | SortOrder
    fdv?: SortOrder
    updated_at?: SortOrder
    _count?: transactionsCountOrderByAggregateInput
    _avg?: transactionsAvgOrderByAggregateInput
    _max?: transactionsMaxOrderByAggregateInput
    _min?: transactionsMinOrderByAggregateInput
    _sum?: transactionsSumOrderByAggregateInput
  }

  export type transactionsScalarWhereWithAggregatesInput = {
    AND?: transactionsScalarWhereWithAggregatesInput | transactionsScalarWhereWithAggregatesInput[]
    OR?: transactionsScalarWhereWithAggregatesInput[]
    NOT?: transactionsScalarWhereWithAggregatesInput | transactionsScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"transactions"> | bigint | number
    signature?: StringWithAggregatesFilter<"transactions"> | string
    address?: StringWithAggregatesFilter<"transactions"> | string
    blocktime?: IntWithAggregatesFilter<"transactions"> | number
    created_at?: DateTimeWithAggregatesFilter<"transactions"> | Date | string
    actions?: JsonNullableWithAggregatesFilter<"transactions">
    block?: BigIntWithAggregatesFilter<"transactions"> | bigint | number
    sol_price?: StringWithAggregatesFilter<"transactions"> | string
    swap_actions?: JsonNullableWithAggregatesFilter<"transactions">
    swap_type?: StringWithAggregatesFilter<"transactions"> | string
    token?: StringNullableWithAggregatesFilter<"transactions"> | string | null
    from_address?: StringNullableWithAggregatesFilter<"transactions"> | string | null
    network?: StringWithAggregatesFilter<"transactions"> | string
    state?: StringWithAggregatesFilter<"transactions"> | string
    swap?: JsonNullableWithAggregatesFilter<"transactions">
    to_address?: StringNullableWithAggregatesFilter<"transactions"> | string | null
    fdv?: DecimalWithAggregatesFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeWithAggregatesFilter<"transactions"> | Date | string
  }

  export type ttsWhereInput = {
    AND?: ttsWhereInput | ttsWhereInput[]
    OR?: ttsWhereInput[]
    NOT?: ttsWhereInput | ttsWhereInput[]
    id?: IntFilter<"tts"> | number
    tts_address?: StringFilter<"tts"> | string
    state?: IntFilter<"tts"> | number
    privy_address?: StringFilter<"tts"> | string
    user_did?: StringFilter<"tts"> | string
    updated_at?: DateTimeFilter<"tts"> | Date | string
    privy_user?: XOR<Privy_userScalarRelationFilter, privy_userWhereInput>
  }

  export type ttsOrderByWithRelationInput = {
    id?: SortOrder
    tts_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
    privy_user?: privy_userOrderByWithRelationInput
  }

  export type ttsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_did_tts_address?: ttsUser_didTts_addressCompoundUniqueInput
    AND?: ttsWhereInput | ttsWhereInput[]
    OR?: ttsWhereInput[]
    NOT?: ttsWhereInput | ttsWhereInput[]
    tts_address?: StringFilter<"tts"> | string
    state?: IntFilter<"tts"> | number
    privy_address?: StringFilter<"tts"> | string
    user_did?: StringFilter<"tts"> | string
    updated_at?: DateTimeFilter<"tts"> | Date | string
    privy_user?: XOR<Privy_userScalarRelationFilter, privy_userWhereInput>
  }, "id" | "id" | "user_did_tts_address">

  export type ttsOrderByWithAggregationInput = {
    id?: SortOrder
    tts_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
    _count?: ttsCountOrderByAggregateInput
    _avg?: ttsAvgOrderByAggregateInput
    _max?: ttsMaxOrderByAggregateInput
    _min?: ttsMinOrderByAggregateInput
    _sum?: ttsSumOrderByAggregateInput
  }

  export type ttsScalarWhereWithAggregatesInput = {
    AND?: ttsScalarWhereWithAggregatesInput | ttsScalarWhereWithAggregatesInput[]
    OR?: ttsScalarWhereWithAggregatesInput[]
    NOT?: ttsScalarWhereWithAggregatesInput | ttsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"tts"> | number
    tts_address?: StringWithAggregatesFilter<"tts"> | string
    state?: IntWithAggregatesFilter<"tts"> | number
    privy_address?: StringWithAggregatesFilter<"tts"> | string
    user_did?: StringWithAggregatesFilter<"tts"> | string
    updated_at?: DateTimeWithAggregatesFilter<"tts"> | Date | string
  }

  export type user_watching_tokensWhereInput = {
    AND?: user_watching_tokensWhereInput | user_watching_tokensWhereInput[]
    OR?: user_watching_tokensWhereInput[]
    NOT?: user_watching_tokensWhereInput | user_watching_tokensWhereInput[]
    id?: IntFilter<"user_watching_tokens"> | number
    created_at?: DateTimeFilter<"user_watching_tokens"> | Date | string
    token_address?: StringFilter<"user_watching_tokens"> | string
    state?: IntFilter<"user_watching_tokens"> | number
    privy_address?: StringFilter<"user_watching_tokens"> | string
    user_did?: StringFilter<"user_watching_tokens"> | string
    updated_at?: DateTimeFilter<"user_watching_tokens"> | Date | string
    privy_user?: XOR<Privy_userScalarRelationFilter, privy_userWhereInput>
  }

  export type user_watching_tokensOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    token_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
    privy_user?: privy_userOrderByWithRelationInput
  }

  export type user_watching_tokensWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_did_token_address?: user_watching_tokensUser_didToken_addressCompoundUniqueInput
    AND?: user_watching_tokensWhereInput | user_watching_tokensWhereInput[]
    OR?: user_watching_tokensWhereInput[]
    NOT?: user_watching_tokensWhereInput | user_watching_tokensWhereInput[]
    created_at?: DateTimeFilter<"user_watching_tokens"> | Date | string
    token_address?: StringFilter<"user_watching_tokens"> | string
    state?: IntFilter<"user_watching_tokens"> | number
    privy_address?: StringFilter<"user_watching_tokens"> | string
    user_did?: StringFilter<"user_watching_tokens"> | string
    updated_at?: DateTimeFilter<"user_watching_tokens"> | Date | string
    privy_user?: XOR<Privy_userScalarRelationFilter, privy_userWhereInput>
  }, "id" | "id" | "user_did_token_address">

  export type user_watching_tokensOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    token_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
    _count?: user_watching_tokensCountOrderByAggregateInput
    _avg?: user_watching_tokensAvgOrderByAggregateInput
    _max?: user_watching_tokensMaxOrderByAggregateInput
    _min?: user_watching_tokensMinOrderByAggregateInput
    _sum?: user_watching_tokensSumOrderByAggregateInput
  }

  export type user_watching_tokensScalarWhereWithAggregatesInput = {
    AND?: user_watching_tokensScalarWhereWithAggregatesInput | user_watching_tokensScalarWhereWithAggregatesInput[]
    OR?: user_watching_tokensScalarWhereWithAggregatesInput[]
    NOT?: user_watching_tokensScalarWhereWithAggregatesInput | user_watching_tokensScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user_watching_tokens"> | number
    created_at?: DateTimeWithAggregatesFilter<"user_watching_tokens"> | Date | string
    token_address?: StringWithAggregatesFilter<"user_watching_tokens"> | string
    state?: IntWithAggregatesFilter<"user_watching_tokens"> | number
    privy_address?: StringWithAggregatesFilter<"user_watching_tokens"> | string
    user_did?: StringWithAggregatesFilter<"user_watching_tokens"> | string
    updated_at?: DateTimeWithAggregatesFilter<"user_watching_tokens"> | Date | string
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: BigIntFilter<"users"> | bigint | number
    address?: StringFilter<"users"> | string
    state?: IntFilter<"users"> | number
    created_at?: DateTimeFilter<"users"> | Date | string
    updated_at?: DateTimeFilter<"users"> | Date | string
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    state?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    address?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    state?: IntFilter<"users"> | number
    created_at?: DateTimeFilter<"users"> | Date | string
    updated_at?: DateTimeFilter<"users"> | Date | string
  }, "id" | "id" | "address">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    state?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"users"> | bigint | number
    address?: StringWithAggregatesFilter<"users"> | string
    state?: IntWithAggregatesFilter<"users"> | number
    created_at?: DateTimeWithAggregatesFilter<"users"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"users"> | Date | string
  }

  export type users_tokensWhereInput = {
    AND?: users_tokensWhereInput | users_tokensWhereInput[]
    OR?: users_tokensWhereInput[]
    NOT?: users_tokensWhereInput | users_tokensWhereInput[]
    id?: BigIntFilter<"users_tokens"> | bigint | number
    walletAddress?: StringFilter<"users_tokens"> | string
    tokenAddress?: StringFilter<"users_tokens"> | string
    balance?: BigIntFilter<"users_tokens"> | bigint | number
    total_amount?: BigIntFilter<"users_tokens"> | bigint | number
    token_address?: StringFilter<"users_tokens"> | string
    wallet_address?: StringFilter<"users_tokens"> | string
    updated_at?: DateTimeFilter<"users_tokens"> | Date | string
  }

  export type users_tokensOrderByWithRelationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    tokenAddress?: SortOrder
    balance?: SortOrder
    total_amount?: SortOrder
    token_address?: SortOrder
    wallet_address?: SortOrder
    updated_at?: SortOrder
  }

  export type users_tokensWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    walletAddress_tokenAddress?: users_tokensWalletAddressTokenAddressCompoundUniqueInput
    AND?: users_tokensWhereInput | users_tokensWhereInput[]
    OR?: users_tokensWhereInput[]
    NOT?: users_tokensWhereInput | users_tokensWhereInput[]
    walletAddress?: StringFilter<"users_tokens"> | string
    tokenAddress?: StringFilter<"users_tokens"> | string
    balance?: BigIntFilter<"users_tokens"> | bigint | number
    total_amount?: BigIntFilter<"users_tokens"> | bigint | number
    token_address?: StringFilter<"users_tokens"> | string
    wallet_address?: StringFilter<"users_tokens"> | string
    updated_at?: DateTimeFilter<"users_tokens"> | Date | string
  }, "id" | "walletAddress_tokenAddress">

  export type users_tokensOrderByWithAggregationInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    tokenAddress?: SortOrder
    balance?: SortOrder
    total_amount?: SortOrder
    token_address?: SortOrder
    wallet_address?: SortOrder
    updated_at?: SortOrder
    _count?: users_tokensCountOrderByAggregateInput
    _avg?: users_tokensAvgOrderByAggregateInput
    _max?: users_tokensMaxOrderByAggregateInput
    _min?: users_tokensMinOrderByAggregateInput
    _sum?: users_tokensSumOrderByAggregateInput
  }

  export type users_tokensScalarWhereWithAggregatesInput = {
    AND?: users_tokensScalarWhereWithAggregatesInput | users_tokensScalarWhereWithAggregatesInput[]
    OR?: users_tokensScalarWhereWithAggregatesInput[]
    NOT?: users_tokensScalarWhereWithAggregatesInput | users_tokensScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"users_tokens"> | bigint | number
    walletAddress?: StringWithAggregatesFilter<"users_tokens"> | string
    tokenAddress?: StringWithAggregatesFilter<"users_tokens"> | string
    balance?: BigIntWithAggregatesFilter<"users_tokens"> | bigint | number
    total_amount?: BigIntWithAggregatesFilter<"users_tokens"> | bigint | number
    token_address?: StringWithAggregatesFilter<"users_tokens"> | string
    wallet_address?: StringWithAggregatesFilter<"users_tokens"> | string
    updated_at?: DateTimeWithAggregatesFilter<"users_tokens"> | Date | string
  }

  export type walletsWhereInput = {
    AND?: walletsWhereInput | walletsWhereInput[]
    OR?: walletsWhereInput[]
    NOT?: walletsWhereInput | walletsWhereInput[]
    id?: BigIntFilter<"wallets"> | bigint | number
    address?: StringFilter<"wallets"> | string
    state?: IntFilter<"wallets"> | number
    created_at?: DateTimeFilter<"wallets"> | Date | string
    type?: StringFilter<"wallets"> | string
    black_time?: IntFilter<"wallets"> | number
    updated_at?: DateTimeFilter<"wallets"> | Date | string
    wallets_users?: Wallets_usersListRelationFilter
  }

  export type walletsOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    state?: SortOrder
    created_at?: SortOrder
    type?: SortOrder
    black_time?: SortOrder
    updated_at?: SortOrder
    wallets_users?: wallets_usersOrderByRelationAggregateInput
  }

  export type walletsWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    address?: string
    AND?: walletsWhereInput | walletsWhereInput[]
    OR?: walletsWhereInput[]
    NOT?: walletsWhereInput | walletsWhereInput[]
    state?: IntFilter<"wallets"> | number
    created_at?: DateTimeFilter<"wallets"> | Date | string
    type?: StringFilter<"wallets"> | string
    black_time?: IntFilter<"wallets"> | number
    updated_at?: DateTimeFilter<"wallets"> | Date | string
    wallets_users?: Wallets_usersListRelationFilter
  }, "id" | "id" | "address">

  export type walletsOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    state?: SortOrder
    created_at?: SortOrder
    type?: SortOrder
    black_time?: SortOrder
    updated_at?: SortOrder
    _count?: walletsCountOrderByAggregateInput
    _avg?: walletsAvgOrderByAggregateInput
    _max?: walletsMaxOrderByAggregateInput
    _min?: walletsMinOrderByAggregateInput
    _sum?: walletsSumOrderByAggregateInput
  }

  export type walletsScalarWhereWithAggregatesInput = {
    AND?: walletsScalarWhereWithAggregatesInput | walletsScalarWhereWithAggregatesInput[]
    OR?: walletsScalarWhereWithAggregatesInput[]
    NOT?: walletsScalarWhereWithAggregatesInput | walletsScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"wallets"> | bigint | number
    address?: StringWithAggregatesFilter<"wallets"> | string
    state?: IntWithAggregatesFilter<"wallets"> | number
    created_at?: DateTimeWithAggregatesFilter<"wallets"> | Date | string
    type?: StringWithAggregatesFilter<"wallets"> | string
    black_time?: IntWithAggregatesFilter<"wallets"> | number
    updated_at?: DateTimeWithAggregatesFilter<"wallets"> | Date | string
  }

  export type wallets_transactionsWhereInput = {
    AND?: wallets_transactionsWhereInput | wallets_transactionsWhereInput[]
    OR?: wallets_transactionsWhereInput[]
    NOT?: wallets_transactionsWhereInput | wallets_transactionsWhereInput[]
    id?: BigIntFilter<"wallets_transactions"> | bigint | number
    signature?: StringFilter<"wallets_transactions"> | string
    address?: StringFilter<"wallets_transactions"> | string
    created_at?: DateTimeFilter<"wallets_transactions"> | Date | string
    accounts?: StringNullableListFilter<"wallets_transactions">
    updated_at?: DateTimeFilter<"wallets_transactions"> | Date | string
  }

  export type wallets_transactionsOrderByWithRelationInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    accounts?: SortOrder
    updated_at?: SortOrder
  }

  export type wallets_transactionsWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    signature?: string
    AND?: wallets_transactionsWhereInput | wallets_transactionsWhereInput[]
    OR?: wallets_transactionsWhereInput[]
    NOT?: wallets_transactionsWhereInput | wallets_transactionsWhereInput[]
    address?: StringFilter<"wallets_transactions"> | string
    created_at?: DateTimeFilter<"wallets_transactions"> | Date | string
    accounts?: StringNullableListFilter<"wallets_transactions">
    updated_at?: DateTimeFilter<"wallets_transactions"> | Date | string
  }, "id" | "signature">

  export type wallets_transactionsOrderByWithAggregationInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    accounts?: SortOrder
    updated_at?: SortOrder
    _count?: wallets_transactionsCountOrderByAggregateInput
    _avg?: wallets_transactionsAvgOrderByAggregateInput
    _max?: wallets_transactionsMaxOrderByAggregateInput
    _min?: wallets_transactionsMinOrderByAggregateInput
    _sum?: wallets_transactionsSumOrderByAggregateInput
  }

  export type wallets_transactionsScalarWhereWithAggregatesInput = {
    AND?: wallets_transactionsScalarWhereWithAggregatesInput | wallets_transactionsScalarWhereWithAggregatesInput[]
    OR?: wallets_transactionsScalarWhereWithAggregatesInput[]
    NOT?: wallets_transactionsScalarWhereWithAggregatesInput | wallets_transactionsScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"wallets_transactions"> | bigint | number
    signature?: StringWithAggregatesFilter<"wallets_transactions"> | string
    address?: StringWithAggregatesFilter<"wallets_transactions"> | string
    created_at?: DateTimeWithAggregatesFilter<"wallets_transactions"> | Date | string
    accounts?: StringNullableListFilter<"wallets_transactions">
    updated_at?: DateTimeWithAggregatesFilter<"wallets_transactions"> | Date | string
  }

  export type wallets_usersWhereInput = {
    AND?: wallets_usersWhereInput | wallets_usersWhereInput[]
    OR?: wallets_usersWhereInput[]
    NOT?: wallets_usersWhereInput | wallets_usersWhereInput[]
    id?: BigIntFilter<"wallets_users"> | bigint | number
    wallet_address?: StringFilter<"wallets_users"> | string
    user_address?: StringFilter<"wallets_users"> | string
    created_at?: DateTimeFilter<"wallets_users"> | Date | string
    name?: StringFilter<"wallets_users"> | string
    tag?: JsonFilter<"wallets_users">
    gangs_id?: IntNullableFilter<"wallets_users"> | number | null
    user_did?: StringFilter<"wallets_users"> | string
    updated_at?: DateTimeFilter<"wallets_users"> | Date | string
    gangs?: XOR<GangsNullableScalarRelationFilter, gangsWhereInput> | null
    privy_user?: XOR<Privy_userScalarRelationFilter, privy_userWhereInput>
    wallets?: XOR<WalletsScalarRelationFilter, walletsWhereInput>
  }

  export type wallets_usersOrderByWithRelationInput = {
    id?: SortOrder
    wallet_address?: SortOrder
    user_address?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    tag?: SortOrder
    gangs_id?: SortOrderInput | SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
    gangs?: gangsOrderByWithRelationInput
    privy_user?: privy_userOrderByWithRelationInput
    wallets?: walletsOrderByWithRelationInput
  }

  export type wallets_usersWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    wallet_address_user_did_gangs_id?: wallets_usersWallet_addressUser_didGangs_idCompoundUniqueInput
    AND?: wallets_usersWhereInput | wallets_usersWhereInput[]
    OR?: wallets_usersWhereInput[]
    NOT?: wallets_usersWhereInput | wallets_usersWhereInput[]
    wallet_address?: StringFilter<"wallets_users"> | string
    user_address?: StringFilter<"wallets_users"> | string
    created_at?: DateTimeFilter<"wallets_users"> | Date | string
    name?: StringFilter<"wallets_users"> | string
    tag?: JsonFilter<"wallets_users">
    gangs_id?: IntNullableFilter<"wallets_users"> | number | null
    user_did?: StringFilter<"wallets_users"> | string
    updated_at?: DateTimeFilter<"wallets_users"> | Date | string
    gangs?: XOR<GangsNullableScalarRelationFilter, gangsWhereInput> | null
    privy_user?: XOR<Privy_userScalarRelationFilter, privy_userWhereInput>
    wallets?: XOR<WalletsScalarRelationFilter, walletsWhereInput>
  }, "id" | "id" | "wallet_address_user_did_gangs_id">

  export type wallets_usersOrderByWithAggregationInput = {
    id?: SortOrder
    wallet_address?: SortOrder
    user_address?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    tag?: SortOrder
    gangs_id?: SortOrderInput | SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
    _count?: wallets_usersCountOrderByAggregateInput
    _avg?: wallets_usersAvgOrderByAggregateInput
    _max?: wallets_usersMaxOrderByAggregateInput
    _min?: wallets_usersMinOrderByAggregateInput
    _sum?: wallets_usersSumOrderByAggregateInput
  }

  export type wallets_usersScalarWhereWithAggregatesInput = {
    AND?: wallets_usersScalarWhereWithAggregatesInput | wallets_usersScalarWhereWithAggregatesInput[]
    OR?: wallets_usersScalarWhereWithAggregatesInput[]
    NOT?: wallets_usersScalarWhereWithAggregatesInput | wallets_usersScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"wallets_users"> | bigint | number
    wallet_address?: StringWithAggregatesFilter<"wallets_users"> | string
    user_address?: StringWithAggregatesFilter<"wallets_users"> | string
    created_at?: DateTimeWithAggregatesFilter<"wallets_users"> | Date | string
    name?: StringWithAggregatesFilter<"wallets_users"> | string
    tag?: JsonWithAggregatesFilter<"wallets_users">
    gangs_id?: IntNullableWithAggregatesFilter<"wallets_users"> | number | null
    user_did?: StringWithAggregatesFilter<"wallets_users"> | string
    updated_at?: DateTimeWithAggregatesFilter<"wallets_users"> | Date | string
  }

  export type alert_messagesWhereInput = {
    AND?: alert_messagesWhereInput | alert_messagesWhereInput[]
    OR?: alert_messagesWhereInput[]
    NOT?: alert_messagesWhereInput | alert_messagesWhereInput[]
    id?: IntFilter<"alert_messages"> | number
    user_did?: StringFilter<"alert_messages"> | string
    message?: JsonFilter<"alert_messages">
    wallets?: JsonFilter<"alert_messages">
    created_at?: DateTimeFilter<"alert_messages"> | Date | string
    network?: StringFilter<"alert_messages"> | string
  }

  export type alert_messagesOrderByWithRelationInput = {
    id?: SortOrder
    user_did?: SortOrder
    message?: SortOrder
    wallets?: SortOrder
    created_at?: SortOrder
    network?: SortOrder
  }

  export type alert_messagesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: alert_messagesWhereInput | alert_messagesWhereInput[]
    OR?: alert_messagesWhereInput[]
    NOT?: alert_messagesWhereInput | alert_messagesWhereInput[]
    user_did?: StringFilter<"alert_messages"> | string
    message?: JsonFilter<"alert_messages">
    wallets?: JsonFilter<"alert_messages">
    created_at?: DateTimeFilter<"alert_messages"> | Date | string
    network?: StringFilter<"alert_messages"> | string
  }, "id" | "id">

  export type alert_messagesOrderByWithAggregationInput = {
    id?: SortOrder
    user_did?: SortOrder
    message?: SortOrder
    wallets?: SortOrder
    created_at?: SortOrder
    network?: SortOrder
    _count?: alert_messagesCountOrderByAggregateInput
    _avg?: alert_messagesAvgOrderByAggregateInput
    _max?: alert_messagesMaxOrderByAggregateInput
    _min?: alert_messagesMinOrderByAggregateInput
    _sum?: alert_messagesSumOrderByAggregateInput
  }

  export type alert_messagesScalarWhereWithAggregatesInput = {
    AND?: alert_messagesScalarWhereWithAggregatesInput | alert_messagesScalarWhereWithAggregatesInput[]
    OR?: alert_messagesScalarWhereWithAggregatesInput[]
    NOT?: alert_messagesScalarWhereWithAggregatesInput | alert_messagesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"alert_messages"> | number
    user_did?: StringWithAggregatesFilter<"alert_messages"> | string
    message?: JsonWithAggregatesFilter<"alert_messages">
    wallets?: JsonWithAggregatesFilter<"alert_messages">
    created_at?: DateTimeWithAggregatesFilter<"alert_messages"> | Date | string
    network?: StringWithAggregatesFilter<"alert_messages"> | string
  }

  export type fomo_alertWhereInput = {
    AND?: fomo_alertWhereInput | fomo_alertWhereInput[]
    OR?: fomo_alertWhereInput[]
    NOT?: fomo_alertWhereInput | fomo_alertWhereInput[]
    id?: IntFilter<"fomo_alert"> | number
    user_did?: StringFilter<"fomo_alert"> | string
    token_address?: StringFilter<"fomo_alert"> | string
    wallets?: JsonFilter<"fomo_alert">
    created_at?: DateTimeFilter<"fomo_alert"> | Date | string
    updated_at?: DateTimeFilter<"fomo_alert"> | Date | string
    network?: StringFilter<"fomo_alert"> | string
  }

  export type fomo_alertOrderByWithRelationInput = {
    id?: SortOrder
    user_did?: SortOrder
    token_address?: SortOrder
    wallets?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    network?: SortOrder
  }

  export type fomo_alertWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_did_token_address?: fomo_alertUser_didToken_addressCompoundUniqueInput
    AND?: fomo_alertWhereInput | fomo_alertWhereInput[]
    OR?: fomo_alertWhereInput[]
    NOT?: fomo_alertWhereInput | fomo_alertWhereInput[]
    user_did?: StringFilter<"fomo_alert"> | string
    token_address?: StringFilter<"fomo_alert"> | string
    wallets?: JsonFilter<"fomo_alert">
    created_at?: DateTimeFilter<"fomo_alert"> | Date | string
    updated_at?: DateTimeFilter<"fomo_alert"> | Date | string
    network?: StringFilter<"fomo_alert"> | string
  }, "id" | "id" | "user_did_token_address">

  export type fomo_alertOrderByWithAggregationInput = {
    id?: SortOrder
    user_did?: SortOrder
    token_address?: SortOrder
    wallets?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    network?: SortOrder
    _count?: fomo_alertCountOrderByAggregateInput
    _avg?: fomo_alertAvgOrderByAggregateInput
    _max?: fomo_alertMaxOrderByAggregateInput
    _min?: fomo_alertMinOrderByAggregateInput
    _sum?: fomo_alertSumOrderByAggregateInput
  }

  export type fomo_alertScalarWhereWithAggregatesInput = {
    AND?: fomo_alertScalarWhereWithAggregatesInput | fomo_alertScalarWhereWithAggregatesInput[]
    OR?: fomo_alertScalarWhereWithAggregatesInput[]
    NOT?: fomo_alertScalarWhereWithAggregatesInput | fomo_alertScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"fomo_alert"> | number
    user_did?: StringWithAggregatesFilter<"fomo_alert"> | string
    token_address?: StringWithAggregatesFilter<"fomo_alert"> | string
    wallets?: JsonWithAggregatesFilter<"fomo_alert">
    created_at?: DateTimeWithAggregatesFilter<"fomo_alert"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"fomo_alert"> | Date | string
    network?: StringWithAggregatesFilter<"fomo_alert"> | string
  }

  export type wallet_aliasWhereInput = {
    AND?: wallet_aliasWhereInput | wallet_aliasWhereInput[]
    OR?: wallet_aliasWhereInput[]
    NOT?: wallet_aliasWhereInput | wallet_aliasWhereInput[]
    id?: IntFilter<"wallet_alias"> | number
    did?: StringFilter<"wallet_alias"> | string
    wallet_address?: StringFilter<"wallet_alias"> | string
    name?: StringFilter<"wallet_alias"> | string
  }

  export type wallet_aliasOrderByWithRelationInput = {
    id?: SortOrder
    did?: SortOrder
    wallet_address?: SortOrder
    name?: SortOrder
  }

  export type wallet_aliasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    did_wallet_address?: wallet_aliasDidWallet_addressCompoundUniqueInput
    AND?: wallet_aliasWhereInput | wallet_aliasWhereInput[]
    OR?: wallet_aliasWhereInput[]
    NOT?: wallet_aliasWhereInput | wallet_aliasWhereInput[]
    did?: StringFilter<"wallet_alias"> | string
    wallet_address?: StringFilter<"wallet_alias"> | string
    name?: StringFilter<"wallet_alias"> | string
  }, "id" | "id" | "did_wallet_address">

  export type wallet_aliasOrderByWithAggregationInput = {
    id?: SortOrder
    did?: SortOrder
    wallet_address?: SortOrder
    name?: SortOrder
    _count?: wallet_aliasCountOrderByAggregateInput
    _avg?: wallet_aliasAvgOrderByAggregateInput
    _max?: wallet_aliasMaxOrderByAggregateInput
    _min?: wallet_aliasMinOrderByAggregateInput
    _sum?: wallet_aliasSumOrderByAggregateInput
  }

  export type wallet_aliasScalarWhereWithAggregatesInput = {
    AND?: wallet_aliasScalarWhereWithAggregatesInput | wallet_aliasScalarWhereWithAggregatesInput[]
    OR?: wallet_aliasScalarWhereWithAggregatesInput[]
    NOT?: wallet_aliasScalarWhereWithAggregatesInput | wallet_aliasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"wallet_alias"> | number
    did?: StringWithAggregatesFilter<"wallet_alias"> | string
    wallet_address?: StringWithAggregatesFilter<"wallet_alias"> | string
    name?: StringWithAggregatesFilter<"wallet_alias"> | string
  }

  export type cabal_tokensWhereInput = {
    AND?: cabal_tokensWhereInput | cabal_tokensWhereInput[]
    OR?: cabal_tokensWhereInput[]
    NOT?: cabal_tokensWhereInput | cabal_tokensWhereInput[]
    id?: IntFilter<"cabal_tokens"> | number
    did?: StringFilter<"cabal_tokens"> | string
    symbol?: StringNullableFilter<"cabal_tokens"> | string | null
    name?: StringNullableFilter<"cabal_tokens"> | string | null
    url?: StringNullableFilter<"cabal_tokens"> | string | null
    decimals?: IntFilter<"cabal_tokens"> | number
    network?: StringFilter<"cabal_tokens"> | string
    token_address?: StringFilter<"cabal_tokens"> | string
    created_at?: DateTimeFilter<"cabal_tokens"> | Date | string
    updated_at?: DateTimeFilter<"cabal_tokens"> | Date | string
  }

  export type cabal_tokensOrderByWithRelationInput = {
    id?: SortOrder
    did?: SortOrder
    symbol?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    decimals?: SortOrder
    network?: SortOrder
    token_address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type cabal_tokensWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    did_token_address_network?: cabal_tokensDidToken_addressNetworkCompoundUniqueInput
    AND?: cabal_tokensWhereInput | cabal_tokensWhereInput[]
    OR?: cabal_tokensWhereInput[]
    NOT?: cabal_tokensWhereInput | cabal_tokensWhereInput[]
    did?: StringFilter<"cabal_tokens"> | string
    symbol?: StringNullableFilter<"cabal_tokens"> | string | null
    name?: StringNullableFilter<"cabal_tokens"> | string | null
    url?: StringNullableFilter<"cabal_tokens"> | string | null
    decimals?: IntFilter<"cabal_tokens"> | number
    network?: StringFilter<"cabal_tokens"> | string
    token_address?: StringFilter<"cabal_tokens"> | string
    created_at?: DateTimeFilter<"cabal_tokens"> | Date | string
    updated_at?: DateTimeFilter<"cabal_tokens"> | Date | string
  }, "id" | "id" | "did_token_address_network">

  export type cabal_tokensOrderByWithAggregationInput = {
    id?: SortOrder
    did?: SortOrder
    symbol?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    decimals?: SortOrder
    network?: SortOrder
    token_address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: cabal_tokensCountOrderByAggregateInput
    _avg?: cabal_tokensAvgOrderByAggregateInput
    _max?: cabal_tokensMaxOrderByAggregateInput
    _min?: cabal_tokensMinOrderByAggregateInput
    _sum?: cabal_tokensSumOrderByAggregateInput
  }

  export type cabal_tokensScalarWhereWithAggregatesInput = {
    AND?: cabal_tokensScalarWhereWithAggregatesInput | cabal_tokensScalarWhereWithAggregatesInput[]
    OR?: cabal_tokensScalarWhereWithAggregatesInput[]
    NOT?: cabal_tokensScalarWhereWithAggregatesInput | cabal_tokensScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"cabal_tokens"> | number
    did?: StringWithAggregatesFilter<"cabal_tokens"> | string
    symbol?: StringNullableWithAggregatesFilter<"cabal_tokens"> | string | null
    name?: StringNullableWithAggregatesFilter<"cabal_tokens"> | string | null
    url?: StringNullableWithAggregatesFilter<"cabal_tokens"> | string | null
    decimals?: IntWithAggregatesFilter<"cabal_tokens"> | number
    network?: StringWithAggregatesFilter<"cabal_tokens"> | string
    token_address?: StringWithAggregatesFilter<"cabal_tokens"> | string
    created_at?: DateTimeWithAggregatesFilter<"cabal_tokens"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"cabal_tokens"> | Date | string
  }

  export type favoriteCreateInput = {
    favorite_address: string
    state?: number
    privy_address?: string
    updated_at?: Date | string
    privy_user: privy_userCreateNestedOneWithoutFavoriteInput
  }

  export type favoriteUncheckedCreateInput = {
    id?: number
    favorite_address: string
    state?: number
    privy_address?: string
    user_did: string
    updated_at?: Date | string
  }

  export type favoriteUpdateInput = {
    favorite_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    privy_user?: privy_userUpdateOneRequiredWithoutFavoriteNestedInput
  }

  export type favoriteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    favorite_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    user_did?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favoriteCreateManyInput = {
    id?: number
    favorite_address: string
    state?: number
    privy_address?: string
    user_did: string
    updated_at?: Date | string
  }

  export type favoriteUpdateManyMutationInput = {
    favorite_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favoriteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    favorite_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    user_did?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type gangsCreateInput = {
    user_address?: string
    name: string
    created_at?: Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: number
    is_published?: boolean
    published_time?: number
    description?: string
    updated_at?: Date | string
    privy_user: privy_userCreateNestedOneWithoutGangsInput
    wallets_users?: wallets_usersCreateNestedManyWithoutGangsInput
  }

  export type gangsUncheckedCreateInput = {
    id?: number
    user_address?: string
    name: string
    created_at?: Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: number
    user_did: string
    is_published?: boolean
    published_time?: number
    description?: string
    updated_at?: Date | string
    wallets_users?: wallets_usersUncheckedCreateNestedManyWithoutGangsInput
  }

  export type gangsUpdateInput = {
    user_address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: IntFieldUpdateOperationsInput | number
    is_published?: BoolFieldUpdateOperationsInput | boolean
    published_time?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    privy_user?: privy_userUpdateOneRequiredWithoutGangsNestedInput
    wallets_users?: wallets_usersUpdateManyWithoutGangsNestedInput
  }

  export type gangsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: IntFieldUpdateOperationsInput | number
    user_did?: StringFieldUpdateOperationsInput | string
    is_published?: BoolFieldUpdateOperationsInput | boolean
    published_time?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    wallets_users?: wallets_usersUncheckedUpdateManyWithoutGangsNestedInput
  }

  export type gangsCreateManyInput = {
    id?: number
    user_address?: string
    name: string
    created_at?: Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: number
    user_did: string
    is_published?: boolean
    published_time?: number
    description?: string
    updated_at?: Date | string
  }

  export type gangsUpdateManyMutationInput = {
    user_address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: IntFieldUpdateOperationsInput | number
    is_published?: BoolFieldUpdateOperationsInput | boolean
    published_time?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type gangsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: IntFieldUpdateOperationsInput | number
    user_did?: StringFieldUpdateOperationsInput | string
    is_published?: BoolFieldUpdateOperationsInput | boolean
    published_time?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type latest_sync_transCreateInput = {
    id?: bigint | number
    signature: string
    address: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type latest_sync_transUncheckedCreateInput = {
    id?: bigint | number
    signature: string
    address: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type latest_sync_transUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type latest_sync_transUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type latest_sync_transCreateManyInput = {
    id?: bigint | number
    signature: string
    address: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type latest_sync_transUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type latest_sync_transUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type passCreateInput = {
    id: string
    username: string
    password: string
    updated_at?: Date | string
  }

  export type passUncheckedCreateInput = {
    id: string
    username: string
    password: string
    updated_at?: Date | string
  }

  export type passUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type passUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type passCreateManyInput = {
    id: string
    username: string
    password: string
    updated_at?: Date | string
  }

  export type passUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type passUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type privy_userCreateInput = {
    address?: string
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: string
    created_at?: Date | string
    gangs_collect?: privy_userCreategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did: string
    black_time?: number
    updated_at?: Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteCreateNestedManyWithoutPrivy_userInput
    gangs?: gangsCreateNestedManyWithoutPrivy_userInput
    tts?: ttsCreateNestedManyWithoutPrivy_userInput
    user_watching_tokens?: user_watching_tokensCreateNestedManyWithoutPrivy_userInput
    wallets_users?: wallets_usersCreateNestedManyWithoutPrivy_userInput
  }

  export type privy_userUncheckedCreateInput = {
    id?: number
    address?: string
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: string
    created_at?: Date | string
    gangs_collect?: privy_userCreategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did: string
    black_time?: number
    updated_at?: Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUncheckedCreateNestedManyWithoutPrivy_userInput
    gangs?: gangsUncheckedCreateNestedManyWithoutPrivy_userInput
    tts?: ttsUncheckedCreateNestedManyWithoutPrivy_userInput
    user_watching_tokens?: user_watching_tokensUncheckedCreateNestedManyWithoutPrivy_userInput
    wallets_users?: wallets_usersUncheckedCreateNestedManyWithoutPrivy_userInput
  }

  export type privy_userUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    txs_switch?: BoolFieldUpdateOperationsInput | boolean
    dis_switch?: BoolFieldUpdateOperationsInput | boolean
    multiple_switch?: BoolFieldUpdateOperationsInput | boolean
    tts_switch?: BoolFieldUpdateOperationsInput | boolean
    range_times?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs_collect?: privy_userUpdategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUpdateManyWithoutPrivy_userNestedInput
    gangs?: gangsUpdateManyWithoutPrivy_userNestedInput
    tts?: ttsUpdateManyWithoutPrivy_userNestedInput
    user_watching_tokens?: user_watching_tokensUpdateManyWithoutPrivy_userNestedInput
    wallets_users?: wallets_usersUpdateManyWithoutPrivy_userNestedInput
  }

  export type privy_userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    txs_switch?: BoolFieldUpdateOperationsInput | boolean
    dis_switch?: BoolFieldUpdateOperationsInput | boolean
    multiple_switch?: BoolFieldUpdateOperationsInput | boolean
    tts_switch?: BoolFieldUpdateOperationsInput | boolean
    range_times?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs_collect?: privy_userUpdategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUncheckedUpdateManyWithoutPrivy_userNestedInput
    gangs?: gangsUncheckedUpdateManyWithoutPrivy_userNestedInput
    tts?: ttsUncheckedUpdateManyWithoutPrivy_userNestedInput
    user_watching_tokens?: user_watching_tokensUncheckedUpdateManyWithoutPrivy_userNestedInput
    wallets_users?: wallets_usersUncheckedUpdateManyWithoutPrivy_userNestedInput
  }

  export type privy_userCreateManyInput = {
    id?: number
    address?: string
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: string
    created_at?: Date | string
    gangs_collect?: privy_userCreategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did: string
    black_time?: number
    updated_at?: Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
  }

  export type privy_userUpdateManyMutationInput = {
    address?: StringFieldUpdateOperationsInput | string
    txs_switch?: BoolFieldUpdateOperationsInput | boolean
    dis_switch?: BoolFieldUpdateOperationsInput | boolean
    multiple_switch?: BoolFieldUpdateOperationsInput | boolean
    tts_switch?: BoolFieldUpdateOperationsInput | boolean
    range_times?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs_collect?: privy_userUpdategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
  }

  export type privy_userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    txs_switch?: BoolFieldUpdateOperationsInput | boolean
    dis_switch?: BoolFieldUpdateOperationsInput | boolean
    multiple_switch?: BoolFieldUpdateOperationsInput | boolean
    tts_switch?: BoolFieldUpdateOperationsInput | boolean
    range_times?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs_collect?: privy_userUpdategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
  }

  export type privy_users_tokensCreateInput = {
    id?: bigint | number
    walletAddress: string
    tokenAddress: string
    balance?: bigint | number
    total_amount?: bigint | number
    token_address?: string
    wallet_address?: string
    updated_at?: Date | string
  }

  export type privy_users_tokensUncheckedCreateInput = {
    id?: bigint | number
    walletAddress: string
    tokenAddress: string
    balance?: bigint | number
    total_amount?: bigint | number
    token_address?: string
    wallet_address?: string
    updated_at?: Date | string
  }

  export type privy_users_tokensUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    walletAddress?: StringFieldUpdateOperationsInput | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    total_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    token_address?: StringFieldUpdateOperationsInput | string
    wallet_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type privy_users_tokensUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    walletAddress?: StringFieldUpdateOperationsInput | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    total_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    token_address?: StringFieldUpdateOperationsInput | string
    wallet_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type privy_users_tokensCreateManyInput = {
    id?: bigint | number
    walletAddress: string
    tokenAddress: string
    balance?: bigint | number
    total_amount?: bigint | number
    token_address?: string
    wallet_address?: string
    updated_at?: Date | string
  }

  export type privy_users_tokensUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    walletAddress?: StringFieldUpdateOperationsInput | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    total_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    token_address?: StringFieldUpdateOperationsInput | string
    wallet_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type privy_users_tokensUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    walletAddress?: StringFieldUpdateOperationsInput | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    total_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    token_address?: StringFieldUpdateOperationsInput | string
    wallet_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type problem_transCreateInput = {
    id?: bigint | number
    signature: string
    state?: number
    source?: string
    result?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type problem_transUncheckedCreateInput = {
    id?: bigint | number
    signature: string
    state?: number
    source?: string
    result?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type problem_transUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type problem_transUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type problem_transCreateManyInput = {
    id?: bigint | number
    signature: string
    state?: number
    source?: string
    result?: string | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type problem_transUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type problem_transUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    result?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sol_priceCreateInput = {
    price?: string
    time?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type sol_priceUncheckedCreateInput = {
    id?: number
    price?: string
    time?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type sol_priceUpdateInput = {
    price?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sol_priceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sol_priceCreateManyInput = {
    id?: number
    price?: string
    time?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type sol_priceUpdateManyMutationInput = {
    price?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sol_priceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: StringFieldUpdateOperationsInput | string
    time?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sorted_tagsCreateInput = {
    tag: string
    amount?: number
    created_at?: Date | string
    wallet: string
    updated_at?: Date | string
  }

  export type sorted_tagsUncheckedCreateInput = {
    id?: number
    tag: string
    amount?: number
    created_at?: Date | string
    wallet: string
    updated_at?: Date | string
  }

  export type sorted_tagsUpdateInput = {
    tag?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    wallet?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sorted_tagsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    wallet?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sorted_tagsCreateManyInput = {
    id?: number
    tag: string
    amount?: number
    created_at?: Date | string
    wallet: string
    updated_at?: Date | string
  }

  export type sorted_tagsUpdateManyMutationInput = {
    tag?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    wallet?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sorted_tagsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tag?: StringFieldUpdateOperationsInput | string
    amount?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    wallet?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type swapCreateInput = {
    wallet: string
    token: string
    actions?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    signature: string
    sol_price?: string
    state?: string
    swap_type?: string
    slippage?: number
    fee?: bigint | number
    blocktime?: number
    from_address?: string | null
    network?: string
    swap?: NullableJsonNullValueInput | InputJsonValue
    to_address?: string | null
    fdv?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
  }

  export type swapUncheckedCreateInput = {
    id?: number
    wallet: string
    token: string
    actions?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    signature: string
    sol_price?: string
    state?: string
    swap_type?: string
    slippage?: number
    fee?: bigint | number
    blocktime?: number
    from_address?: string | null
    network?: string
    swap?: NullableJsonNullValueInput | InputJsonValue
    to_address?: string | null
    fdv?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
  }

  export type swapUpdateInput = {
    wallet?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    actions?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    signature?: StringFieldUpdateOperationsInput | string
    sol_price?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    swap_type?: StringFieldUpdateOperationsInput | string
    slippage?: FloatFieldUpdateOperationsInput | number
    fee?: BigIntFieldUpdateOperationsInput | bigint | number
    blocktime?: IntFieldUpdateOperationsInput | number
    from_address?: NullableStringFieldUpdateOperationsInput | string | null
    network?: StringFieldUpdateOperationsInput | string
    swap?: NullableJsonNullValueInput | InputJsonValue
    to_address?: NullableStringFieldUpdateOperationsInput | string | null
    fdv?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type swapUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    wallet?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    actions?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    signature?: StringFieldUpdateOperationsInput | string
    sol_price?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    swap_type?: StringFieldUpdateOperationsInput | string
    slippage?: FloatFieldUpdateOperationsInput | number
    fee?: BigIntFieldUpdateOperationsInput | bigint | number
    blocktime?: IntFieldUpdateOperationsInput | number
    from_address?: NullableStringFieldUpdateOperationsInput | string | null
    network?: StringFieldUpdateOperationsInput | string
    swap?: NullableJsonNullValueInput | InputJsonValue
    to_address?: NullableStringFieldUpdateOperationsInput | string | null
    fdv?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type swapCreateManyInput = {
    id?: number
    wallet: string
    token: string
    actions?: NullableJsonNullValueInput | InputJsonValue
    created_at?: Date | string
    signature: string
    sol_price?: string
    state?: string
    swap_type?: string
    slippage?: number
    fee?: bigint | number
    blocktime?: number
    from_address?: string | null
    network?: string
    swap?: NullableJsonNullValueInput | InputJsonValue
    to_address?: string | null
    fdv?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
  }

  export type swapUpdateManyMutationInput = {
    wallet?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    actions?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    signature?: StringFieldUpdateOperationsInput | string
    sol_price?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    swap_type?: StringFieldUpdateOperationsInput | string
    slippage?: FloatFieldUpdateOperationsInput | number
    fee?: BigIntFieldUpdateOperationsInput | bigint | number
    blocktime?: IntFieldUpdateOperationsInput | number
    from_address?: NullableStringFieldUpdateOperationsInput | string | null
    network?: StringFieldUpdateOperationsInput | string
    swap?: NullableJsonNullValueInput | InputJsonValue
    to_address?: NullableStringFieldUpdateOperationsInput | string | null
    fdv?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type swapUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    wallet?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    actions?: NullableJsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    signature?: StringFieldUpdateOperationsInput | string
    sol_price?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    swap_type?: StringFieldUpdateOperationsInput | string
    slippage?: FloatFieldUpdateOperationsInput | number
    fee?: BigIntFieldUpdateOperationsInput | bigint | number
    blocktime?: IntFieldUpdateOperationsInput | number
    from_address?: NullableStringFieldUpdateOperationsInput | string | null
    network?: StringFieldUpdateOperationsInput | string
    swap?: NullableJsonNullValueInput | InputJsonValue
    to_address?: NullableStringFieldUpdateOperationsInput | string | null
    fdv?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tokensCreateInput = {
    id?: bigint | number
    symbol: string
    address: string
    name?: string | null
    uri?: string | null
    decimals?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    async?: boolean | null
    followers?: number | null
    twitter_handle?: string | null
    twitter_name?: string | null
    created_at?: Date | string
    supply?: bigint | number
    network?: string
    token_created_time?: number
    updated_at?: Date | string
  }

  export type tokensUncheckedCreateInput = {
    id?: bigint | number
    symbol: string
    address: string
    name?: string | null
    uri?: string | null
    decimals?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    async?: boolean | null
    followers?: number | null
    twitter_handle?: string | null
    twitter_name?: string | null
    created_at?: Date | string
    supply?: bigint | number
    network?: string
    token_created_time?: number
    updated_at?: Date | string
  }

  export type tokensUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    symbol?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    async?: NullableBoolFieldUpdateOperationsInput | boolean | null
    followers?: NullableIntFieldUpdateOperationsInput | number | null
    twitter_handle?: NullableStringFieldUpdateOperationsInput | string | null
    twitter_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supply?: BigIntFieldUpdateOperationsInput | bigint | number
    network?: StringFieldUpdateOperationsInput | string
    token_created_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tokensUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    symbol?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    async?: NullableBoolFieldUpdateOperationsInput | boolean | null
    followers?: NullableIntFieldUpdateOperationsInput | number | null
    twitter_handle?: NullableStringFieldUpdateOperationsInput | string | null
    twitter_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supply?: BigIntFieldUpdateOperationsInput | bigint | number
    network?: StringFieldUpdateOperationsInput | string
    token_created_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tokensCreateManyInput = {
    id?: bigint | number
    symbol: string
    address: string
    name?: string | null
    uri?: string | null
    decimals?: number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    async?: boolean | null
    followers?: number | null
    twitter_handle?: string | null
    twitter_name?: string | null
    created_at?: Date | string
    supply?: bigint | number
    network?: string
    token_created_time?: number
    updated_at?: Date | string
  }

  export type tokensUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    symbol?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    async?: NullableBoolFieldUpdateOperationsInput | boolean | null
    followers?: NullableIntFieldUpdateOperationsInput | number | null
    twitter_handle?: NullableStringFieldUpdateOperationsInput | string | null
    twitter_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supply?: BigIntFieldUpdateOperationsInput | bigint | number
    network?: StringFieldUpdateOperationsInput | string
    token_created_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tokensUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    symbol?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: IntFieldUpdateOperationsInput | number
    metadata?: NullableJsonNullValueInput | InputJsonValue
    async?: NullableBoolFieldUpdateOperationsInput | boolean | null
    followers?: NullableIntFieldUpdateOperationsInput | number | null
    twitter_handle?: NullableStringFieldUpdateOperationsInput | string | null
    twitter_name?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    supply?: BigIntFieldUpdateOperationsInput | bigint | number
    network?: StringFieldUpdateOperationsInput | string
    token_created_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transactionsCreateInput = {
    id?: bigint | number
    signature: string
    address: string
    blocktime?: number
    created_at?: Date | string
    actions?: NullableJsonNullValueInput | InputJsonValue
    block?: bigint | number
    sol_price?: string
    swap_actions?: NullableJsonNullValueInput | InputJsonValue
    swap_type?: string
    token?: string | null
    from_address?: string | null
    network?: string
    state?: string
    swap?: NullableJsonNullValueInput | InputJsonValue
    to_address?: string | null
    fdv?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
  }

  export type transactionsUncheckedCreateInput = {
    id?: bigint | number
    signature: string
    address: string
    blocktime?: number
    created_at?: Date | string
    actions?: NullableJsonNullValueInput | InputJsonValue
    block?: bigint | number
    sol_price?: string
    swap_actions?: NullableJsonNullValueInput | InputJsonValue
    swap_type?: string
    token?: string | null
    from_address?: string | null
    network?: string
    state?: string
    swap?: NullableJsonNullValueInput | InputJsonValue
    to_address?: string | null
    fdv?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
  }

  export type transactionsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    blocktime?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: NullableJsonNullValueInput | InputJsonValue
    block?: BigIntFieldUpdateOperationsInput | bigint | number
    sol_price?: StringFieldUpdateOperationsInput | string
    swap_actions?: NullableJsonNullValueInput | InputJsonValue
    swap_type?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    from_address?: NullableStringFieldUpdateOperationsInput | string | null
    network?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    swap?: NullableJsonNullValueInput | InputJsonValue
    to_address?: NullableStringFieldUpdateOperationsInput | string | null
    fdv?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transactionsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    blocktime?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: NullableJsonNullValueInput | InputJsonValue
    block?: BigIntFieldUpdateOperationsInput | bigint | number
    sol_price?: StringFieldUpdateOperationsInput | string
    swap_actions?: NullableJsonNullValueInput | InputJsonValue
    swap_type?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    from_address?: NullableStringFieldUpdateOperationsInput | string | null
    network?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    swap?: NullableJsonNullValueInput | InputJsonValue
    to_address?: NullableStringFieldUpdateOperationsInput | string | null
    fdv?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transactionsCreateManyInput = {
    id?: bigint | number
    signature: string
    address: string
    blocktime?: number
    created_at?: Date | string
    actions?: NullableJsonNullValueInput | InputJsonValue
    block?: bigint | number
    sol_price?: string
    swap_actions?: NullableJsonNullValueInput | InputJsonValue
    swap_type?: string
    token?: string | null
    from_address?: string | null
    network?: string
    state?: string
    swap?: NullableJsonNullValueInput | InputJsonValue
    to_address?: string | null
    fdv?: Decimal | DecimalJsLike | number | string
    updated_at?: Date | string
  }

  export type transactionsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    blocktime?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: NullableJsonNullValueInput | InputJsonValue
    block?: BigIntFieldUpdateOperationsInput | bigint | number
    sol_price?: StringFieldUpdateOperationsInput | string
    swap_actions?: NullableJsonNullValueInput | InputJsonValue
    swap_type?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    from_address?: NullableStringFieldUpdateOperationsInput | string | null
    network?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    swap?: NullableJsonNullValueInput | InputJsonValue
    to_address?: NullableStringFieldUpdateOperationsInput | string | null
    fdv?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type transactionsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    blocktime?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    actions?: NullableJsonNullValueInput | InputJsonValue
    block?: BigIntFieldUpdateOperationsInput | bigint | number
    sol_price?: StringFieldUpdateOperationsInput | string
    swap_actions?: NullableJsonNullValueInput | InputJsonValue
    swap_type?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    from_address?: NullableStringFieldUpdateOperationsInput | string | null
    network?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    swap?: NullableJsonNullValueInput | InputJsonValue
    to_address?: NullableStringFieldUpdateOperationsInput | string | null
    fdv?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ttsCreateInput = {
    tts_address: string
    state?: number
    privy_address?: string
    updated_at?: Date | string
    privy_user: privy_userCreateNestedOneWithoutTtsInput
  }

  export type ttsUncheckedCreateInput = {
    id?: number
    tts_address: string
    state?: number
    privy_address?: string
    user_did: string
    updated_at?: Date | string
  }

  export type ttsUpdateInput = {
    tts_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    privy_user?: privy_userUpdateOneRequiredWithoutTtsNestedInput
  }

  export type ttsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tts_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    user_did?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ttsCreateManyInput = {
    id?: number
    tts_address: string
    state?: number
    privy_address?: string
    user_did: string
    updated_at?: Date | string
  }

  export type ttsUpdateManyMutationInput = {
    tts_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ttsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tts_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    user_did?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_watching_tokensCreateInput = {
    created_at?: Date | string
    token_address: string
    state?: number
    privy_address?: string
    updated_at?: Date | string
    privy_user: privy_userCreateNestedOneWithoutUser_watching_tokensInput
  }

  export type user_watching_tokensUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    token_address: string
    state?: number
    privy_address?: string
    user_did: string
    updated_at?: Date | string
  }

  export type user_watching_tokensUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    token_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    privy_user?: privy_userUpdateOneRequiredWithoutUser_watching_tokensNestedInput
  }

  export type user_watching_tokensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    token_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    user_did?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_watching_tokensCreateManyInput = {
    id?: number
    created_at?: Date | string
    token_address: string
    state?: number
    privy_address?: string
    user_did: string
    updated_at?: Date | string
  }

  export type user_watching_tokensUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    token_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_watching_tokensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    token_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    user_did?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateInput = {
    id?: bigint | number
    address: string
    state?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type usersUncheckedCreateInput = {
    id?: bigint | number
    address: string
    state?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type usersUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateManyInput = {
    id?: bigint | number
    address: string
    state?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type usersUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type users_tokensCreateInput = {
    id?: bigint | number
    walletAddress: string
    tokenAddress: string
    balance?: bigint | number
    total_amount?: bigint | number
    token_address?: string
    wallet_address?: string
    updated_at?: Date | string
  }

  export type users_tokensUncheckedCreateInput = {
    id?: bigint | number
    walletAddress: string
    tokenAddress: string
    balance?: bigint | number
    total_amount?: bigint | number
    token_address?: string
    wallet_address?: string
    updated_at?: Date | string
  }

  export type users_tokensUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    walletAddress?: StringFieldUpdateOperationsInput | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    total_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    token_address?: StringFieldUpdateOperationsInput | string
    wallet_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type users_tokensUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    walletAddress?: StringFieldUpdateOperationsInput | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    total_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    token_address?: StringFieldUpdateOperationsInput | string
    wallet_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type users_tokensCreateManyInput = {
    id?: bigint | number
    walletAddress: string
    tokenAddress: string
    balance?: bigint | number
    total_amount?: bigint | number
    token_address?: string
    wallet_address?: string
    updated_at?: Date | string
  }

  export type users_tokensUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    walletAddress?: StringFieldUpdateOperationsInput | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    total_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    token_address?: StringFieldUpdateOperationsInput | string
    wallet_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type users_tokensUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    walletAddress?: StringFieldUpdateOperationsInput | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    balance?: BigIntFieldUpdateOperationsInput | bigint | number
    total_amount?: BigIntFieldUpdateOperationsInput | bigint | number
    token_address?: StringFieldUpdateOperationsInput | string
    wallet_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type walletsCreateInput = {
    id?: bigint | number
    address: string
    state?: number
    created_at?: Date | string
    type?: string
    black_time?: number
    updated_at?: Date | string
    wallets_users?: wallets_usersCreateNestedManyWithoutWalletsInput
  }

  export type walletsUncheckedCreateInput = {
    id?: bigint | number
    address: string
    state?: number
    created_at?: Date | string
    type?: string
    black_time?: number
    updated_at?: Date | string
    wallets_users?: wallets_usersUncheckedCreateNestedManyWithoutWalletsInput
  }

  export type walletsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    wallets_users?: wallets_usersUpdateManyWithoutWalletsNestedInput
  }

  export type walletsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    wallets_users?: wallets_usersUncheckedUpdateManyWithoutWalletsNestedInput
  }

  export type walletsCreateManyInput = {
    id?: bigint | number
    address: string
    state?: number
    created_at?: Date | string
    type?: string
    black_time?: number
    updated_at?: Date | string
  }

  export type walletsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type walletsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wallets_transactionsCreateInput = {
    id?: bigint | number
    signature: string
    address: string
    created_at?: Date | string
    accounts?: wallets_transactionsCreateaccountsInput | string[]
    updated_at?: Date | string
  }

  export type wallets_transactionsUncheckedCreateInput = {
    id?: bigint | number
    signature: string
    address: string
    created_at?: Date | string
    accounts?: wallets_transactionsCreateaccountsInput | string[]
    updated_at?: Date | string
  }

  export type wallets_transactionsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: wallets_transactionsUpdateaccountsInput | string[]
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wallets_transactionsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: wallets_transactionsUpdateaccountsInput | string[]
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wallets_transactionsCreateManyInput = {
    id?: bigint | number
    signature: string
    address: string
    created_at?: Date | string
    accounts?: wallets_transactionsCreateaccountsInput | string[]
    updated_at?: Date | string
  }

  export type wallets_transactionsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: wallets_transactionsUpdateaccountsInput | string[]
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wallets_transactionsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: wallets_transactionsUpdateaccountsInput | string[]
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wallets_usersCreateInput = {
    id?: bigint | number
    user_address?: string
    created_at?: Date | string
    name?: string
    tag?: JsonNullValueInput | InputJsonValue
    updated_at?: Date | string
    gangs?: gangsCreateNestedOneWithoutWallets_usersInput
    privy_user: privy_userCreateNestedOneWithoutWallets_usersInput
    wallets: walletsCreateNestedOneWithoutWallets_usersInput
  }

  export type wallets_usersUncheckedCreateInput = {
    id?: bigint | number
    wallet_address: string
    user_address?: string
    created_at?: Date | string
    name?: string
    tag?: JsonNullValueInput | InputJsonValue
    gangs_id?: number | null
    user_did: string
    updated_at?: Date | string
  }

  export type wallets_usersUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: JsonNullValueInput | InputJsonValue
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs?: gangsUpdateOneWithoutWallets_usersNestedInput
    privy_user?: privy_userUpdateOneRequiredWithoutWallets_usersNestedInput
    wallets?: walletsUpdateOneRequiredWithoutWallets_usersNestedInput
  }

  export type wallets_usersUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    wallet_address?: StringFieldUpdateOperationsInput | string
    user_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: JsonNullValueInput | InputJsonValue
    gangs_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_did?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wallets_usersCreateManyInput = {
    id?: bigint | number
    wallet_address: string
    user_address?: string
    created_at?: Date | string
    name?: string
    tag?: JsonNullValueInput | InputJsonValue
    gangs_id?: number | null
    user_did: string
    updated_at?: Date | string
  }

  export type wallets_usersUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: JsonNullValueInput | InputJsonValue
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wallets_usersUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    wallet_address?: StringFieldUpdateOperationsInput | string
    user_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: JsonNullValueInput | InputJsonValue
    gangs_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_did?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type alert_messagesCreateInput = {
    user_did: string
    message: JsonNullValueInput | InputJsonValue
    wallets?: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    network?: string
  }

  export type alert_messagesUncheckedCreateInput = {
    id?: number
    user_did: string
    message: JsonNullValueInput | InputJsonValue
    wallets?: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    network?: string
  }

  export type alert_messagesUpdateInput = {
    user_did?: StringFieldUpdateOperationsInput | string
    message?: JsonNullValueInput | InputJsonValue
    wallets?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: StringFieldUpdateOperationsInput | string
  }

  export type alert_messagesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_did?: StringFieldUpdateOperationsInput | string
    message?: JsonNullValueInput | InputJsonValue
    wallets?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: StringFieldUpdateOperationsInput | string
  }

  export type alert_messagesCreateManyInput = {
    id?: number
    user_did: string
    message: JsonNullValueInput | InputJsonValue
    wallets?: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    network?: string
  }

  export type alert_messagesUpdateManyMutationInput = {
    user_did?: StringFieldUpdateOperationsInput | string
    message?: JsonNullValueInput | InputJsonValue
    wallets?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: StringFieldUpdateOperationsInput | string
  }

  export type alert_messagesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_did?: StringFieldUpdateOperationsInput | string
    message?: JsonNullValueInput | InputJsonValue
    wallets?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: StringFieldUpdateOperationsInput | string
  }

  export type fomo_alertCreateInput = {
    user_did: string
    token_address: string
    wallets?: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    network?: string
  }

  export type fomo_alertUncheckedCreateInput = {
    id?: number
    user_did: string
    token_address: string
    wallets?: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    network?: string
  }

  export type fomo_alertUpdateInput = {
    user_did?: StringFieldUpdateOperationsInput | string
    token_address?: StringFieldUpdateOperationsInput | string
    wallets?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: StringFieldUpdateOperationsInput | string
  }

  export type fomo_alertUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_did?: StringFieldUpdateOperationsInput | string
    token_address?: StringFieldUpdateOperationsInput | string
    wallets?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: StringFieldUpdateOperationsInput | string
  }

  export type fomo_alertCreateManyInput = {
    id?: number
    user_did: string
    token_address: string
    wallets?: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    updated_at?: Date | string
    network?: string
  }

  export type fomo_alertUpdateManyMutationInput = {
    user_did?: StringFieldUpdateOperationsInput | string
    token_address?: StringFieldUpdateOperationsInput | string
    wallets?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: StringFieldUpdateOperationsInput | string
  }

  export type fomo_alertUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_did?: StringFieldUpdateOperationsInput | string
    token_address?: StringFieldUpdateOperationsInput | string
    wallets?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    network?: StringFieldUpdateOperationsInput | string
  }

  export type wallet_aliasCreateInput = {
    did: string
    wallet_address: string
    name: string
  }

  export type wallet_aliasUncheckedCreateInput = {
    id?: number
    did: string
    wallet_address: string
    name: string
  }

  export type wallet_aliasUpdateInput = {
    did?: StringFieldUpdateOperationsInput | string
    wallet_address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type wallet_aliasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    did?: StringFieldUpdateOperationsInput | string
    wallet_address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type wallet_aliasCreateManyInput = {
    id?: number
    did: string
    wallet_address: string
    name: string
  }

  export type wallet_aliasUpdateManyMutationInput = {
    did?: StringFieldUpdateOperationsInput | string
    wallet_address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type wallet_aliasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    did?: StringFieldUpdateOperationsInput | string
    wallet_address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type cabal_tokensCreateInput = {
    did: string
    symbol?: string | null
    name?: string | null
    url?: string | null
    decimals?: number
    network?: string
    token_address: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type cabal_tokensUncheckedCreateInput = {
    id?: number
    did: string
    symbol?: string | null
    name?: string | null
    url?: string | null
    decimals?: number
    network?: string
    token_address: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type cabal_tokensUpdateInput = {
    did?: StringFieldUpdateOperationsInput | string
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: IntFieldUpdateOperationsInput | number
    network?: StringFieldUpdateOperationsInput | string
    token_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type cabal_tokensUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    did?: StringFieldUpdateOperationsInput | string
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: IntFieldUpdateOperationsInput | number
    network?: StringFieldUpdateOperationsInput | string
    token_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type cabal_tokensCreateManyInput = {
    id?: number
    did: string
    symbol?: string | null
    name?: string | null
    url?: string | null
    decimals?: number
    network?: string
    token_address: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type cabal_tokensUpdateManyMutationInput = {
    did?: StringFieldUpdateOperationsInput | string
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: IntFieldUpdateOperationsInput | number
    network?: StringFieldUpdateOperationsInput | string
    token_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type cabal_tokensUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    did?: StringFieldUpdateOperationsInput | string
    symbol?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    decimals?: IntFieldUpdateOperationsInput | number
    network?: StringFieldUpdateOperationsInput | string
    token_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type Privy_userScalarRelationFilter = {
    is?: privy_userWhereInput
    isNot?: privy_userWhereInput
  }

  export type favoriteUser_didFavorite_addressCompoundUniqueInput = {
    user_did: string
    favorite_address: string
  }

  export type favoriteCountOrderByAggregateInput = {
    id?: SortOrder
    favorite_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
  }

  export type favoriteAvgOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
  }

  export type favoriteMaxOrderByAggregateInput = {
    id?: SortOrder
    favorite_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
  }

  export type favoriteMinOrderByAggregateInput = {
    id?: SortOrder
    favorite_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
  }

  export type favoriteSumOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type Wallets_usersListRelationFilter = {
    every?: wallets_usersWhereInput
    some?: wallets_usersWhereInput
    none?: wallets_usersWhereInput
  }

  export type wallets_usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type gangsNameUser_didCompoundUniqueInput = {
    name: string
    user_did: string
  }

  export type gangsCountOrderByAggregateInput = {
    id?: SortOrder
    user_address?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    admins?: SortOrder
    members?: SortOrder
    type?: SortOrder
    user_did?: SortOrder
    is_published?: SortOrder
    published_time?: SortOrder
    description?: SortOrder
    updated_at?: SortOrder
  }

  export type gangsAvgOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    published_time?: SortOrder
  }

  export type gangsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_address?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    type?: SortOrder
    user_did?: SortOrder
    is_published?: SortOrder
    published_time?: SortOrder
    description?: SortOrder
    updated_at?: SortOrder
  }

  export type gangsMinOrderByAggregateInput = {
    id?: SortOrder
    user_address?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    type?: SortOrder
    user_did?: SortOrder
    is_published?: SortOrder
    published_time?: SortOrder
    description?: SortOrder
    updated_at?: SortOrder
  }

  export type gangsSumOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    published_time?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type latest_sync_transCountOrderByAggregateInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type latest_sync_transAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type latest_sync_transMaxOrderByAggregateInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type latest_sync_transMinOrderByAggregateInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type latest_sync_transSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type passCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    updated_at?: SortOrder
  }

  export type passMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    updated_at?: SortOrder
  }

  export type passMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    updated_at?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FavoriteListRelationFilter = {
    every?: favoriteWhereInput
    some?: favoriteWhereInput
    none?: favoriteWhereInput
  }

  export type GangsListRelationFilter = {
    every?: gangsWhereInput
    some?: gangsWhereInput
    none?: gangsWhereInput
  }

  export type TtsListRelationFilter = {
    every?: ttsWhereInput
    some?: ttsWhereInput
    none?: ttsWhereInput
  }

  export type User_watching_tokensListRelationFilter = {
    every?: user_watching_tokensWhereInput
    some?: user_watching_tokensWhereInput
    none?: user_watching_tokensWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type favoriteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type gangsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ttsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type user_watching_tokensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type privy_userCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    txs_switch?: SortOrder
    dis_switch?: SortOrder
    multiple_switch?: SortOrder
    tts_switch?: SortOrder
    range_times?: SortOrder
    created_at?: SortOrder
    gangs_collect?: SortOrder
    auto_buy_setting?: SortOrder
    swap_setting?: SortOrder
    tg_bot?: SortOrder
    did?: SortOrder
    black_time?: SortOrder
    updated_at?: SortOrder
    fomo_setting?: SortOrder
  }

  export type privy_userAvgOrderByAggregateInput = {
    id?: SortOrder
    gangs_collect?: SortOrder
    black_time?: SortOrder
  }

  export type privy_userMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    txs_switch?: SortOrder
    dis_switch?: SortOrder
    multiple_switch?: SortOrder
    tts_switch?: SortOrder
    range_times?: SortOrder
    created_at?: SortOrder
    did?: SortOrder
    black_time?: SortOrder
    updated_at?: SortOrder
  }

  export type privy_userMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    txs_switch?: SortOrder
    dis_switch?: SortOrder
    multiple_switch?: SortOrder
    tts_switch?: SortOrder
    range_times?: SortOrder
    created_at?: SortOrder
    did?: SortOrder
    black_time?: SortOrder
    updated_at?: SortOrder
  }

  export type privy_userSumOrderByAggregateInput = {
    id?: SortOrder
    gangs_collect?: SortOrder
    black_time?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type privy_users_tokensWalletAddressTokenAddressCompoundUniqueInput = {
    walletAddress: string
    tokenAddress: string
  }

  export type privy_users_tokensCountOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    tokenAddress?: SortOrder
    balance?: SortOrder
    total_amount?: SortOrder
    token_address?: SortOrder
    wallet_address?: SortOrder
    updated_at?: SortOrder
  }

  export type privy_users_tokensAvgOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    total_amount?: SortOrder
  }

  export type privy_users_tokensMaxOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    tokenAddress?: SortOrder
    balance?: SortOrder
    total_amount?: SortOrder
    token_address?: SortOrder
    wallet_address?: SortOrder
    updated_at?: SortOrder
  }

  export type privy_users_tokensMinOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    tokenAddress?: SortOrder
    balance?: SortOrder
    total_amount?: SortOrder
    token_address?: SortOrder
    wallet_address?: SortOrder
    updated_at?: SortOrder
  }

  export type privy_users_tokensSumOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    total_amount?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type problem_transCountOrderByAggregateInput = {
    id?: SortOrder
    signature?: SortOrder
    state?: SortOrder
    source?: SortOrder
    result?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type problem_transAvgOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
  }

  export type problem_transMaxOrderByAggregateInput = {
    id?: SortOrder
    signature?: SortOrder
    state?: SortOrder
    source?: SortOrder
    result?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type problem_transMinOrderByAggregateInput = {
    id?: SortOrder
    signature?: SortOrder
    state?: SortOrder
    source?: SortOrder
    result?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type problem_transSumOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type sol_priceCountOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type sol_priceAvgOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
  }

  export type sol_priceMaxOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type sol_priceMinOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type sol_priceSumOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
  }

  export type sorted_tagsTagWalletCompoundUniqueInput = {
    tag: string
    wallet: string
  }

  export type sorted_tagsCountOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    wallet?: SortOrder
    updated_at?: SortOrder
  }

  export type sorted_tagsAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
  }

  export type sorted_tagsMaxOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    wallet?: SortOrder
    updated_at?: SortOrder
  }

  export type sorted_tagsMinOrderByAggregateInput = {
    id?: SortOrder
    tag?: SortOrder
    amount?: SortOrder
    created_at?: SortOrder
    wallet?: SortOrder
    updated_at?: SortOrder
  }

  export type sorted_tagsSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type swapCountOrderByAggregateInput = {
    id?: SortOrder
    wallet?: SortOrder
    token?: SortOrder
    actions?: SortOrder
    created_at?: SortOrder
    signature?: SortOrder
    sol_price?: SortOrder
    state?: SortOrder
    swap_type?: SortOrder
    slippage?: SortOrder
    fee?: SortOrder
    blocktime?: SortOrder
    from_address?: SortOrder
    network?: SortOrder
    swap?: SortOrder
    to_address?: SortOrder
    fdv?: SortOrder
    updated_at?: SortOrder
  }

  export type swapAvgOrderByAggregateInput = {
    id?: SortOrder
    slippage?: SortOrder
    fee?: SortOrder
    blocktime?: SortOrder
    fdv?: SortOrder
  }

  export type swapMaxOrderByAggregateInput = {
    id?: SortOrder
    wallet?: SortOrder
    token?: SortOrder
    created_at?: SortOrder
    signature?: SortOrder
    sol_price?: SortOrder
    state?: SortOrder
    swap_type?: SortOrder
    slippage?: SortOrder
    fee?: SortOrder
    blocktime?: SortOrder
    from_address?: SortOrder
    network?: SortOrder
    to_address?: SortOrder
    fdv?: SortOrder
    updated_at?: SortOrder
  }

  export type swapMinOrderByAggregateInput = {
    id?: SortOrder
    wallet?: SortOrder
    token?: SortOrder
    created_at?: SortOrder
    signature?: SortOrder
    sol_price?: SortOrder
    state?: SortOrder
    swap_type?: SortOrder
    slippage?: SortOrder
    fee?: SortOrder
    blocktime?: SortOrder
    from_address?: SortOrder
    network?: SortOrder
    to_address?: SortOrder
    fdv?: SortOrder
    updated_at?: SortOrder
  }

  export type swapSumOrderByAggregateInput = {
    id?: SortOrder
    slippage?: SortOrder
    fee?: SortOrder
    blocktime?: SortOrder
    fdv?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type tokensCountOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    address?: SortOrder
    name?: SortOrder
    uri?: SortOrder
    decimals?: SortOrder
    metadata?: SortOrder
    async?: SortOrder
    followers?: SortOrder
    twitter_handle?: SortOrder
    twitter_name?: SortOrder
    created_at?: SortOrder
    supply?: SortOrder
    network?: SortOrder
    token_created_time?: SortOrder
    updated_at?: SortOrder
  }

  export type tokensAvgOrderByAggregateInput = {
    id?: SortOrder
    decimals?: SortOrder
    followers?: SortOrder
    supply?: SortOrder
    token_created_time?: SortOrder
  }

  export type tokensMaxOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    address?: SortOrder
    name?: SortOrder
    uri?: SortOrder
    decimals?: SortOrder
    async?: SortOrder
    followers?: SortOrder
    twitter_handle?: SortOrder
    twitter_name?: SortOrder
    created_at?: SortOrder
    supply?: SortOrder
    network?: SortOrder
    token_created_time?: SortOrder
    updated_at?: SortOrder
  }

  export type tokensMinOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    address?: SortOrder
    name?: SortOrder
    uri?: SortOrder
    decimals?: SortOrder
    async?: SortOrder
    followers?: SortOrder
    twitter_handle?: SortOrder
    twitter_name?: SortOrder
    created_at?: SortOrder
    supply?: SortOrder
    network?: SortOrder
    token_created_time?: SortOrder
    updated_at?: SortOrder
  }

  export type tokensSumOrderByAggregateInput = {
    id?: SortOrder
    decimals?: SortOrder
    followers?: SortOrder
    supply?: SortOrder
    token_created_time?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type transactionsCountOrderByAggregateInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    blocktime?: SortOrder
    created_at?: SortOrder
    actions?: SortOrder
    block?: SortOrder
    sol_price?: SortOrder
    swap_actions?: SortOrder
    swap_type?: SortOrder
    token?: SortOrder
    from_address?: SortOrder
    network?: SortOrder
    state?: SortOrder
    swap?: SortOrder
    to_address?: SortOrder
    fdv?: SortOrder
    updated_at?: SortOrder
  }

  export type transactionsAvgOrderByAggregateInput = {
    id?: SortOrder
    blocktime?: SortOrder
    block?: SortOrder
    fdv?: SortOrder
  }

  export type transactionsMaxOrderByAggregateInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    blocktime?: SortOrder
    created_at?: SortOrder
    block?: SortOrder
    sol_price?: SortOrder
    swap_type?: SortOrder
    token?: SortOrder
    from_address?: SortOrder
    network?: SortOrder
    state?: SortOrder
    to_address?: SortOrder
    fdv?: SortOrder
    updated_at?: SortOrder
  }

  export type transactionsMinOrderByAggregateInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    blocktime?: SortOrder
    created_at?: SortOrder
    block?: SortOrder
    sol_price?: SortOrder
    swap_type?: SortOrder
    token?: SortOrder
    from_address?: SortOrder
    network?: SortOrder
    state?: SortOrder
    to_address?: SortOrder
    fdv?: SortOrder
    updated_at?: SortOrder
  }

  export type transactionsSumOrderByAggregateInput = {
    id?: SortOrder
    blocktime?: SortOrder
    block?: SortOrder
    fdv?: SortOrder
  }

  export type ttsUser_didTts_addressCompoundUniqueInput = {
    user_did: string
    tts_address: string
  }

  export type ttsCountOrderByAggregateInput = {
    id?: SortOrder
    tts_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
  }

  export type ttsAvgOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
  }

  export type ttsMaxOrderByAggregateInput = {
    id?: SortOrder
    tts_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
  }

  export type ttsMinOrderByAggregateInput = {
    id?: SortOrder
    tts_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
  }

  export type ttsSumOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
  }

  export type user_watching_tokensUser_didToken_addressCompoundUniqueInput = {
    user_did: string
    token_address: string
  }

  export type user_watching_tokensCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    token_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
  }

  export type user_watching_tokensAvgOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
  }

  export type user_watching_tokensMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    token_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
  }

  export type user_watching_tokensMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    token_address?: SortOrder
    state?: SortOrder
    privy_address?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
  }

  export type user_watching_tokensSumOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    state?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    state?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    state?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
  }

  export type users_tokensWalletAddressTokenAddressCompoundUniqueInput = {
    walletAddress: string
    tokenAddress: string
  }

  export type users_tokensCountOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    tokenAddress?: SortOrder
    balance?: SortOrder
    total_amount?: SortOrder
    token_address?: SortOrder
    wallet_address?: SortOrder
    updated_at?: SortOrder
  }

  export type users_tokensAvgOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    total_amount?: SortOrder
  }

  export type users_tokensMaxOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    tokenAddress?: SortOrder
    balance?: SortOrder
    total_amount?: SortOrder
    token_address?: SortOrder
    wallet_address?: SortOrder
    updated_at?: SortOrder
  }

  export type users_tokensMinOrderByAggregateInput = {
    id?: SortOrder
    walletAddress?: SortOrder
    tokenAddress?: SortOrder
    balance?: SortOrder
    total_amount?: SortOrder
    token_address?: SortOrder
    wallet_address?: SortOrder
    updated_at?: SortOrder
  }

  export type users_tokensSumOrderByAggregateInput = {
    id?: SortOrder
    balance?: SortOrder
    total_amount?: SortOrder
  }

  export type walletsCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    state?: SortOrder
    created_at?: SortOrder
    type?: SortOrder
    black_time?: SortOrder
    updated_at?: SortOrder
  }

  export type walletsAvgOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
    black_time?: SortOrder
  }

  export type walletsMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    state?: SortOrder
    created_at?: SortOrder
    type?: SortOrder
    black_time?: SortOrder
    updated_at?: SortOrder
  }

  export type walletsMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    state?: SortOrder
    created_at?: SortOrder
    type?: SortOrder
    black_time?: SortOrder
    updated_at?: SortOrder
  }

  export type walletsSumOrderByAggregateInput = {
    id?: SortOrder
    state?: SortOrder
    black_time?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type wallets_transactionsCountOrderByAggregateInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    accounts?: SortOrder
    updated_at?: SortOrder
  }

  export type wallets_transactionsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type wallets_transactionsMaxOrderByAggregateInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type wallets_transactionsMinOrderByAggregateInput = {
    id?: SortOrder
    signature?: SortOrder
    address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type wallets_transactionsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GangsNullableScalarRelationFilter = {
    is?: gangsWhereInput | null
    isNot?: gangsWhereInput | null
  }

  export type WalletsScalarRelationFilter = {
    is?: walletsWhereInput
    isNot?: walletsWhereInput
  }

  export type wallets_usersWallet_addressUser_didGangs_idCompoundUniqueInput = {
    wallet_address: string
    user_did: string
    gangs_id: number
  }

  export type wallets_usersCountOrderByAggregateInput = {
    id?: SortOrder
    wallet_address?: SortOrder
    user_address?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    tag?: SortOrder
    gangs_id?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
  }

  export type wallets_usersAvgOrderByAggregateInput = {
    id?: SortOrder
    gangs_id?: SortOrder
  }

  export type wallets_usersMaxOrderByAggregateInput = {
    id?: SortOrder
    wallet_address?: SortOrder
    user_address?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    gangs_id?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
  }

  export type wallets_usersMinOrderByAggregateInput = {
    id?: SortOrder
    wallet_address?: SortOrder
    user_address?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    gangs_id?: SortOrder
    user_did?: SortOrder
    updated_at?: SortOrder
  }

  export type wallets_usersSumOrderByAggregateInput = {
    id?: SortOrder
    gangs_id?: SortOrder
  }

  export type alert_messagesCountOrderByAggregateInput = {
    id?: SortOrder
    user_did?: SortOrder
    message?: SortOrder
    wallets?: SortOrder
    created_at?: SortOrder
    network?: SortOrder
  }

  export type alert_messagesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type alert_messagesMaxOrderByAggregateInput = {
    id?: SortOrder
    user_did?: SortOrder
    created_at?: SortOrder
    network?: SortOrder
  }

  export type alert_messagesMinOrderByAggregateInput = {
    id?: SortOrder
    user_did?: SortOrder
    created_at?: SortOrder
    network?: SortOrder
  }

  export type alert_messagesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type fomo_alertUser_didToken_addressCompoundUniqueInput = {
    user_did: string
    token_address: string
  }

  export type fomo_alertCountOrderByAggregateInput = {
    id?: SortOrder
    user_did?: SortOrder
    token_address?: SortOrder
    wallets?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    network?: SortOrder
  }

  export type fomo_alertAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type fomo_alertMaxOrderByAggregateInput = {
    id?: SortOrder
    user_did?: SortOrder
    token_address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    network?: SortOrder
  }

  export type fomo_alertMinOrderByAggregateInput = {
    id?: SortOrder
    user_did?: SortOrder
    token_address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    network?: SortOrder
  }

  export type fomo_alertSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type wallet_aliasDidWallet_addressCompoundUniqueInput = {
    did: string
    wallet_address: string
  }

  export type wallet_aliasCountOrderByAggregateInput = {
    id?: SortOrder
    did?: SortOrder
    wallet_address?: SortOrder
    name?: SortOrder
  }

  export type wallet_aliasAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type wallet_aliasMaxOrderByAggregateInput = {
    id?: SortOrder
    did?: SortOrder
    wallet_address?: SortOrder
    name?: SortOrder
  }

  export type wallet_aliasMinOrderByAggregateInput = {
    id?: SortOrder
    did?: SortOrder
    wallet_address?: SortOrder
    name?: SortOrder
  }

  export type wallet_aliasSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type cabal_tokensDidToken_addressNetworkCompoundUniqueInput = {
    did: string
    token_address: string
    network: string
  }

  export type cabal_tokensCountOrderByAggregateInput = {
    id?: SortOrder
    did?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    url?: SortOrder
    decimals?: SortOrder
    network?: SortOrder
    token_address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type cabal_tokensAvgOrderByAggregateInput = {
    id?: SortOrder
    decimals?: SortOrder
  }

  export type cabal_tokensMaxOrderByAggregateInput = {
    id?: SortOrder
    did?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    url?: SortOrder
    decimals?: SortOrder
    network?: SortOrder
    token_address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type cabal_tokensMinOrderByAggregateInput = {
    id?: SortOrder
    did?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    url?: SortOrder
    decimals?: SortOrder
    network?: SortOrder
    token_address?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type cabal_tokensSumOrderByAggregateInput = {
    id?: SortOrder
    decimals?: SortOrder
  }

  export type privy_userCreateNestedOneWithoutFavoriteInput = {
    create?: XOR<privy_userCreateWithoutFavoriteInput, privy_userUncheckedCreateWithoutFavoriteInput>
    connectOrCreate?: privy_userCreateOrConnectWithoutFavoriteInput
    connect?: privy_userWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type privy_userUpdateOneRequiredWithoutFavoriteNestedInput = {
    create?: XOR<privy_userCreateWithoutFavoriteInput, privy_userUncheckedCreateWithoutFavoriteInput>
    connectOrCreate?: privy_userCreateOrConnectWithoutFavoriteInput
    upsert?: privy_userUpsertWithoutFavoriteInput
    connect?: privy_userWhereUniqueInput
    update?: XOR<XOR<privy_userUpdateToOneWithWhereWithoutFavoriteInput, privy_userUpdateWithoutFavoriteInput>, privy_userUncheckedUpdateWithoutFavoriteInput>
  }

  export type privy_userCreateNestedOneWithoutGangsInput = {
    create?: XOR<privy_userCreateWithoutGangsInput, privy_userUncheckedCreateWithoutGangsInput>
    connectOrCreate?: privy_userCreateOrConnectWithoutGangsInput
    connect?: privy_userWhereUniqueInput
  }

  export type wallets_usersCreateNestedManyWithoutGangsInput = {
    create?: XOR<wallets_usersCreateWithoutGangsInput, wallets_usersUncheckedCreateWithoutGangsInput> | wallets_usersCreateWithoutGangsInput[] | wallets_usersUncheckedCreateWithoutGangsInput[]
    connectOrCreate?: wallets_usersCreateOrConnectWithoutGangsInput | wallets_usersCreateOrConnectWithoutGangsInput[]
    createMany?: wallets_usersCreateManyGangsInputEnvelope
    connect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
  }

  export type wallets_usersUncheckedCreateNestedManyWithoutGangsInput = {
    create?: XOR<wallets_usersCreateWithoutGangsInput, wallets_usersUncheckedCreateWithoutGangsInput> | wallets_usersCreateWithoutGangsInput[] | wallets_usersUncheckedCreateWithoutGangsInput[]
    connectOrCreate?: wallets_usersCreateOrConnectWithoutGangsInput | wallets_usersCreateOrConnectWithoutGangsInput[]
    createMany?: wallets_usersCreateManyGangsInputEnvelope
    connect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type privy_userUpdateOneRequiredWithoutGangsNestedInput = {
    create?: XOR<privy_userCreateWithoutGangsInput, privy_userUncheckedCreateWithoutGangsInput>
    connectOrCreate?: privy_userCreateOrConnectWithoutGangsInput
    upsert?: privy_userUpsertWithoutGangsInput
    connect?: privy_userWhereUniqueInput
    update?: XOR<XOR<privy_userUpdateToOneWithWhereWithoutGangsInput, privy_userUpdateWithoutGangsInput>, privy_userUncheckedUpdateWithoutGangsInput>
  }

  export type wallets_usersUpdateManyWithoutGangsNestedInput = {
    create?: XOR<wallets_usersCreateWithoutGangsInput, wallets_usersUncheckedCreateWithoutGangsInput> | wallets_usersCreateWithoutGangsInput[] | wallets_usersUncheckedCreateWithoutGangsInput[]
    connectOrCreate?: wallets_usersCreateOrConnectWithoutGangsInput | wallets_usersCreateOrConnectWithoutGangsInput[]
    upsert?: wallets_usersUpsertWithWhereUniqueWithoutGangsInput | wallets_usersUpsertWithWhereUniqueWithoutGangsInput[]
    createMany?: wallets_usersCreateManyGangsInputEnvelope
    set?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    disconnect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    delete?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    connect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    update?: wallets_usersUpdateWithWhereUniqueWithoutGangsInput | wallets_usersUpdateWithWhereUniqueWithoutGangsInput[]
    updateMany?: wallets_usersUpdateManyWithWhereWithoutGangsInput | wallets_usersUpdateManyWithWhereWithoutGangsInput[]
    deleteMany?: wallets_usersScalarWhereInput | wallets_usersScalarWhereInput[]
  }

  export type wallets_usersUncheckedUpdateManyWithoutGangsNestedInput = {
    create?: XOR<wallets_usersCreateWithoutGangsInput, wallets_usersUncheckedCreateWithoutGangsInput> | wallets_usersCreateWithoutGangsInput[] | wallets_usersUncheckedCreateWithoutGangsInput[]
    connectOrCreate?: wallets_usersCreateOrConnectWithoutGangsInput | wallets_usersCreateOrConnectWithoutGangsInput[]
    upsert?: wallets_usersUpsertWithWhereUniqueWithoutGangsInput | wallets_usersUpsertWithWhereUniqueWithoutGangsInput[]
    createMany?: wallets_usersCreateManyGangsInputEnvelope
    set?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    disconnect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    delete?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    connect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    update?: wallets_usersUpdateWithWhereUniqueWithoutGangsInput | wallets_usersUpdateWithWhereUniqueWithoutGangsInput[]
    updateMany?: wallets_usersUpdateManyWithWhereWithoutGangsInput | wallets_usersUpdateManyWithWhereWithoutGangsInput[]
    deleteMany?: wallets_usersScalarWhereInput | wallets_usersScalarWhereInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type privy_userCreategangs_collectInput = {
    set: number[]
  }

  export type favoriteCreateNestedManyWithoutPrivy_userInput = {
    create?: XOR<favoriteCreateWithoutPrivy_userInput, favoriteUncheckedCreateWithoutPrivy_userInput> | favoriteCreateWithoutPrivy_userInput[] | favoriteUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: favoriteCreateOrConnectWithoutPrivy_userInput | favoriteCreateOrConnectWithoutPrivy_userInput[]
    createMany?: favoriteCreateManyPrivy_userInputEnvelope
    connect?: favoriteWhereUniqueInput | favoriteWhereUniqueInput[]
  }

  export type gangsCreateNestedManyWithoutPrivy_userInput = {
    create?: XOR<gangsCreateWithoutPrivy_userInput, gangsUncheckedCreateWithoutPrivy_userInput> | gangsCreateWithoutPrivy_userInput[] | gangsUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: gangsCreateOrConnectWithoutPrivy_userInput | gangsCreateOrConnectWithoutPrivy_userInput[]
    createMany?: gangsCreateManyPrivy_userInputEnvelope
    connect?: gangsWhereUniqueInput | gangsWhereUniqueInput[]
  }

  export type ttsCreateNestedManyWithoutPrivy_userInput = {
    create?: XOR<ttsCreateWithoutPrivy_userInput, ttsUncheckedCreateWithoutPrivy_userInput> | ttsCreateWithoutPrivy_userInput[] | ttsUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: ttsCreateOrConnectWithoutPrivy_userInput | ttsCreateOrConnectWithoutPrivy_userInput[]
    createMany?: ttsCreateManyPrivy_userInputEnvelope
    connect?: ttsWhereUniqueInput | ttsWhereUniqueInput[]
  }

  export type user_watching_tokensCreateNestedManyWithoutPrivy_userInput = {
    create?: XOR<user_watching_tokensCreateWithoutPrivy_userInput, user_watching_tokensUncheckedCreateWithoutPrivy_userInput> | user_watching_tokensCreateWithoutPrivy_userInput[] | user_watching_tokensUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: user_watching_tokensCreateOrConnectWithoutPrivy_userInput | user_watching_tokensCreateOrConnectWithoutPrivy_userInput[]
    createMany?: user_watching_tokensCreateManyPrivy_userInputEnvelope
    connect?: user_watching_tokensWhereUniqueInput | user_watching_tokensWhereUniqueInput[]
  }

  export type wallets_usersCreateNestedManyWithoutPrivy_userInput = {
    create?: XOR<wallets_usersCreateWithoutPrivy_userInput, wallets_usersUncheckedCreateWithoutPrivy_userInput> | wallets_usersCreateWithoutPrivy_userInput[] | wallets_usersUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: wallets_usersCreateOrConnectWithoutPrivy_userInput | wallets_usersCreateOrConnectWithoutPrivy_userInput[]
    createMany?: wallets_usersCreateManyPrivy_userInputEnvelope
    connect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
  }

  export type favoriteUncheckedCreateNestedManyWithoutPrivy_userInput = {
    create?: XOR<favoriteCreateWithoutPrivy_userInput, favoriteUncheckedCreateWithoutPrivy_userInput> | favoriteCreateWithoutPrivy_userInput[] | favoriteUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: favoriteCreateOrConnectWithoutPrivy_userInput | favoriteCreateOrConnectWithoutPrivy_userInput[]
    createMany?: favoriteCreateManyPrivy_userInputEnvelope
    connect?: favoriteWhereUniqueInput | favoriteWhereUniqueInput[]
  }

  export type gangsUncheckedCreateNestedManyWithoutPrivy_userInput = {
    create?: XOR<gangsCreateWithoutPrivy_userInput, gangsUncheckedCreateWithoutPrivy_userInput> | gangsCreateWithoutPrivy_userInput[] | gangsUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: gangsCreateOrConnectWithoutPrivy_userInput | gangsCreateOrConnectWithoutPrivy_userInput[]
    createMany?: gangsCreateManyPrivy_userInputEnvelope
    connect?: gangsWhereUniqueInput | gangsWhereUniqueInput[]
  }

  export type ttsUncheckedCreateNestedManyWithoutPrivy_userInput = {
    create?: XOR<ttsCreateWithoutPrivy_userInput, ttsUncheckedCreateWithoutPrivy_userInput> | ttsCreateWithoutPrivy_userInput[] | ttsUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: ttsCreateOrConnectWithoutPrivy_userInput | ttsCreateOrConnectWithoutPrivy_userInput[]
    createMany?: ttsCreateManyPrivy_userInputEnvelope
    connect?: ttsWhereUniqueInput | ttsWhereUniqueInput[]
  }

  export type user_watching_tokensUncheckedCreateNestedManyWithoutPrivy_userInput = {
    create?: XOR<user_watching_tokensCreateWithoutPrivy_userInput, user_watching_tokensUncheckedCreateWithoutPrivy_userInput> | user_watching_tokensCreateWithoutPrivy_userInput[] | user_watching_tokensUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: user_watching_tokensCreateOrConnectWithoutPrivy_userInput | user_watching_tokensCreateOrConnectWithoutPrivy_userInput[]
    createMany?: user_watching_tokensCreateManyPrivy_userInputEnvelope
    connect?: user_watching_tokensWhereUniqueInput | user_watching_tokensWhereUniqueInput[]
  }

  export type wallets_usersUncheckedCreateNestedManyWithoutPrivy_userInput = {
    create?: XOR<wallets_usersCreateWithoutPrivy_userInput, wallets_usersUncheckedCreateWithoutPrivy_userInput> | wallets_usersCreateWithoutPrivy_userInput[] | wallets_usersUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: wallets_usersCreateOrConnectWithoutPrivy_userInput | wallets_usersCreateOrConnectWithoutPrivy_userInput[]
    createMany?: wallets_usersCreateManyPrivy_userInputEnvelope
    connect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
  }

  export type privy_userUpdategangs_collectInput = {
    set?: number[]
    push?: number | number[]
  }

  export type favoriteUpdateManyWithoutPrivy_userNestedInput = {
    create?: XOR<favoriteCreateWithoutPrivy_userInput, favoriteUncheckedCreateWithoutPrivy_userInput> | favoriteCreateWithoutPrivy_userInput[] | favoriteUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: favoriteCreateOrConnectWithoutPrivy_userInput | favoriteCreateOrConnectWithoutPrivy_userInput[]
    upsert?: favoriteUpsertWithWhereUniqueWithoutPrivy_userInput | favoriteUpsertWithWhereUniqueWithoutPrivy_userInput[]
    createMany?: favoriteCreateManyPrivy_userInputEnvelope
    set?: favoriteWhereUniqueInput | favoriteWhereUniqueInput[]
    disconnect?: favoriteWhereUniqueInput | favoriteWhereUniqueInput[]
    delete?: favoriteWhereUniqueInput | favoriteWhereUniqueInput[]
    connect?: favoriteWhereUniqueInput | favoriteWhereUniqueInput[]
    update?: favoriteUpdateWithWhereUniqueWithoutPrivy_userInput | favoriteUpdateWithWhereUniqueWithoutPrivy_userInput[]
    updateMany?: favoriteUpdateManyWithWhereWithoutPrivy_userInput | favoriteUpdateManyWithWhereWithoutPrivy_userInput[]
    deleteMany?: favoriteScalarWhereInput | favoriteScalarWhereInput[]
  }

  export type gangsUpdateManyWithoutPrivy_userNestedInput = {
    create?: XOR<gangsCreateWithoutPrivy_userInput, gangsUncheckedCreateWithoutPrivy_userInput> | gangsCreateWithoutPrivy_userInput[] | gangsUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: gangsCreateOrConnectWithoutPrivy_userInput | gangsCreateOrConnectWithoutPrivy_userInput[]
    upsert?: gangsUpsertWithWhereUniqueWithoutPrivy_userInput | gangsUpsertWithWhereUniqueWithoutPrivy_userInput[]
    createMany?: gangsCreateManyPrivy_userInputEnvelope
    set?: gangsWhereUniqueInput | gangsWhereUniqueInput[]
    disconnect?: gangsWhereUniqueInput | gangsWhereUniqueInput[]
    delete?: gangsWhereUniqueInput | gangsWhereUniqueInput[]
    connect?: gangsWhereUniqueInput | gangsWhereUniqueInput[]
    update?: gangsUpdateWithWhereUniqueWithoutPrivy_userInput | gangsUpdateWithWhereUniqueWithoutPrivy_userInput[]
    updateMany?: gangsUpdateManyWithWhereWithoutPrivy_userInput | gangsUpdateManyWithWhereWithoutPrivy_userInput[]
    deleteMany?: gangsScalarWhereInput | gangsScalarWhereInput[]
  }

  export type ttsUpdateManyWithoutPrivy_userNestedInput = {
    create?: XOR<ttsCreateWithoutPrivy_userInput, ttsUncheckedCreateWithoutPrivy_userInput> | ttsCreateWithoutPrivy_userInput[] | ttsUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: ttsCreateOrConnectWithoutPrivy_userInput | ttsCreateOrConnectWithoutPrivy_userInput[]
    upsert?: ttsUpsertWithWhereUniqueWithoutPrivy_userInput | ttsUpsertWithWhereUniqueWithoutPrivy_userInput[]
    createMany?: ttsCreateManyPrivy_userInputEnvelope
    set?: ttsWhereUniqueInput | ttsWhereUniqueInput[]
    disconnect?: ttsWhereUniqueInput | ttsWhereUniqueInput[]
    delete?: ttsWhereUniqueInput | ttsWhereUniqueInput[]
    connect?: ttsWhereUniqueInput | ttsWhereUniqueInput[]
    update?: ttsUpdateWithWhereUniqueWithoutPrivy_userInput | ttsUpdateWithWhereUniqueWithoutPrivy_userInput[]
    updateMany?: ttsUpdateManyWithWhereWithoutPrivy_userInput | ttsUpdateManyWithWhereWithoutPrivy_userInput[]
    deleteMany?: ttsScalarWhereInput | ttsScalarWhereInput[]
  }

  export type user_watching_tokensUpdateManyWithoutPrivy_userNestedInput = {
    create?: XOR<user_watching_tokensCreateWithoutPrivy_userInput, user_watching_tokensUncheckedCreateWithoutPrivy_userInput> | user_watching_tokensCreateWithoutPrivy_userInput[] | user_watching_tokensUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: user_watching_tokensCreateOrConnectWithoutPrivy_userInput | user_watching_tokensCreateOrConnectWithoutPrivy_userInput[]
    upsert?: user_watching_tokensUpsertWithWhereUniqueWithoutPrivy_userInput | user_watching_tokensUpsertWithWhereUniqueWithoutPrivy_userInput[]
    createMany?: user_watching_tokensCreateManyPrivy_userInputEnvelope
    set?: user_watching_tokensWhereUniqueInput | user_watching_tokensWhereUniqueInput[]
    disconnect?: user_watching_tokensWhereUniqueInput | user_watching_tokensWhereUniqueInput[]
    delete?: user_watching_tokensWhereUniqueInput | user_watching_tokensWhereUniqueInput[]
    connect?: user_watching_tokensWhereUniqueInput | user_watching_tokensWhereUniqueInput[]
    update?: user_watching_tokensUpdateWithWhereUniqueWithoutPrivy_userInput | user_watching_tokensUpdateWithWhereUniqueWithoutPrivy_userInput[]
    updateMany?: user_watching_tokensUpdateManyWithWhereWithoutPrivy_userInput | user_watching_tokensUpdateManyWithWhereWithoutPrivy_userInput[]
    deleteMany?: user_watching_tokensScalarWhereInput | user_watching_tokensScalarWhereInput[]
  }

  export type wallets_usersUpdateManyWithoutPrivy_userNestedInput = {
    create?: XOR<wallets_usersCreateWithoutPrivy_userInput, wallets_usersUncheckedCreateWithoutPrivy_userInput> | wallets_usersCreateWithoutPrivy_userInput[] | wallets_usersUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: wallets_usersCreateOrConnectWithoutPrivy_userInput | wallets_usersCreateOrConnectWithoutPrivy_userInput[]
    upsert?: wallets_usersUpsertWithWhereUniqueWithoutPrivy_userInput | wallets_usersUpsertWithWhereUniqueWithoutPrivy_userInput[]
    createMany?: wallets_usersCreateManyPrivy_userInputEnvelope
    set?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    disconnect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    delete?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    connect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    update?: wallets_usersUpdateWithWhereUniqueWithoutPrivy_userInput | wallets_usersUpdateWithWhereUniqueWithoutPrivy_userInput[]
    updateMany?: wallets_usersUpdateManyWithWhereWithoutPrivy_userInput | wallets_usersUpdateManyWithWhereWithoutPrivy_userInput[]
    deleteMany?: wallets_usersScalarWhereInput | wallets_usersScalarWhereInput[]
  }

  export type favoriteUncheckedUpdateManyWithoutPrivy_userNestedInput = {
    create?: XOR<favoriteCreateWithoutPrivy_userInput, favoriteUncheckedCreateWithoutPrivy_userInput> | favoriteCreateWithoutPrivy_userInput[] | favoriteUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: favoriteCreateOrConnectWithoutPrivy_userInput | favoriteCreateOrConnectWithoutPrivy_userInput[]
    upsert?: favoriteUpsertWithWhereUniqueWithoutPrivy_userInput | favoriteUpsertWithWhereUniqueWithoutPrivy_userInput[]
    createMany?: favoriteCreateManyPrivy_userInputEnvelope
    set?: favoriteWhereUniqueInput | favoriteWhereUniqueInput[]
    disconnect?: favoriteWhereUniqueInput | favoriteWhereUniqueInput[]
    delete?: favoriteWhereUniqueInput | favoriteWhereUniqueInput[]
    connect?: favoriteWhereUniqueInput | favoriteWhereUniqueInput[]
    update?: favoriteUpdateWithWhereUniqueWithoutPrivy_userInput | favoriteUpdateWithWhereUniqueWithoutPrivy_userInput[]
    updateMany?: favoriteUpdateManyWithWhereWithoutPrivy_userInput | favoriteUpdateManyWithWhereWithoutPrivy_userInput[]
    deleteMany?: favoriteScalarWhereInput | favoriteScalarWhereInput[]
  }

  export type gangsUncheckedUpdateManyWithoutPrivy_userNestedInput = {
    create?: XOR<gangsCreateWithoutPrivy_userInput, gangsUncheckedCreateWithoutPrivy_userInput> | gangsCreateWithoutPrivy_userInput[] | gangsUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: gangsCreateOrConnectWithoutPrivy_userInput | gangsCreateOrConnectWithoutPrivy_userInput[]
    upsert?: gangsUpsertWithWhereUniqueWithoutPrivy_userInput | gangsUpsertWithWhereUniqueWithoutPrivy_userInput[]
    createMany?: gangsCreateManyPrivy_userInputEnvelope
    set?: gangsWhereUniqueInput | gangsWhereUniqueInput[]
    disconnect?: gangsWhereUniqueInput | gangsWhereUniqueInput[]
    delete?: gangsWhereUniqueInput | gangsWhereUniqueInput[]
    connect?: gangsWhereUniqueInput | gangsWhereUniqueInput[]
    update?: gangsUpdateWithWhereUniqueWithoutPrivy_userInput | gangsUpdateWithWhereUniqueWithoutPrivy_userInput[]
    updateMany?: gangsUpdateManyWithWhereWithoutPrivy_userInput | gangsUpdateManyWithWhereWithoutPrivy_userInput[]
    deleteMany?: gangsScalarWhereInput | gangsScalarWhereInput[]
  }

  export type ttsUncheckedUpdateManyWithoutPrivy_userNestedInput = {
    create?: XOR<ttsCreateWithoutPrivy_userInput, ttsUncheckedCreateWithoutPrivy_userInput> | ttsCreateWithoutPrivy_userInput[] | ttsUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: ttsCreateOrConnectWithoutPrivy_userInput | ttsCreateOrConnectWithoutPrivy_userInput[]
    upsert?: ttsUpsertWithWhereUniqueWithoutPrivy_userInput | ttsUpsertWithWhereUniqueWithoutPrivy_userInput[]
    createMany?: ttsCreateManyPrivy_userInputEnvelope
    set?: ttsWhereUniqueInput | ttsWhereUniqueInput[]
    disconnect?: ttsWhereUniqueInput | ttsWhereUniqueInput[]
    delete?: ttsWhereUniqueInput | ttsWhereUniqueInput[]
    connect?: ttsWhereUniqueInput | ttsWhereUniqueInput[]
    update?: ttsUpdateWithWhereUniqueWithoutPrivy_userInput | ttsUpdateWithWhereUniqueWithoutPrivy_userInput[]
    updateMany?: ttsUpdateManyWithWhereWithoutPrivy_userInput | ttsUpdateManyWithWhereWithoutPrivy_userInput[]
    deleteMany?: ttsScalarWhereInput | ttsScalarWhereInput[]
  }

  export type user_watching_tokensUncheckedUpdateManyWithoutPrivy_userNestedInput = {
    create?: XOR<user_watching_tokensCreateWithoutPrivy_userInput, user_watching_tokensUncheckedCreateWithoutPrivy_userInput> | user_watching_tokensCreateWithoutPrivy_userInput[] | user_watching_tokensUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: user_watching_tokensCreateOrConnectWithoutPrivy_userInput | user_watching_tokensCreateOrConnectWithoutPrivy_userInput[]
    upsert?: user_watching_tokensUpsertWithWhereUniqueWithoutPrivy_userInput | user_watching_tokensUpsertWithWhereUniqueWithoutPrivy_userInput[]
    createMany?: user_watching_tokensCreateManyPrivy_userInputEnvelope
    set?: user_watching_tokensWhereUniqueInput | user_watching_tokensWhereUniqueInput[]
    disconnect?: user_watching_tokensWhereUniqueInput | user_watching_tokensWhereUniqueInput[]
    delete?: user_watching_tokensWhereUniqueInput | user_watching_tokensWhereUniqueInput[]
    connect?: user_watching_tokensWhereUniqueInput | user_watching_tokensWhereUniqueInput[]
    update?: user_watching_tokensUpdateWithWhereUniqueWithoutPrivy_userInput | user_watching_tokensUpdateWithWhereUniqueWithoutPrivy_userInput[]
    updateMany?: user_watching_tokensUpdateManyWithWhereWithoutPrivy_userInput | user_watching_tokensUpdateManyWithWhereWithoutPrivy_userInput[]
    deleteMany?: user_watching_tokensScalarWhereInput | user_watching_tokensScalarWhereInput[]
  }

  export type wallets_usersUncheckedUpdateManyWithoutPrivy_userNestedInput = {
    create?: XOR<wallets_usersCreateWithoutPrivy_userInput, wallets_usersUncheckedCreateWithoutPrivy_userInput> | wallets_usersCreateWithoutPrivy_userInput[] | wallets_usersUncheckedCreateWithoutPrivy_userInput[]
    connectOrCreate?: wallets_usersCreateOrConnectWithoutPrivy_userInput | wallets_usersCreateOrConnectWithoutPrivy_userInput[]
    upsert?: wallets_usersUpsertWithWhereUniqueWithoutPrivy_userInput | wallets_usersUpsertWithWhereUniqueWithoutPrivy_userInput[]
    createMany?: wallets_usersCreateManyPrivy_userInputEnvelope
    set?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    disconnect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    delete?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    connect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    update?: wallets_usersUpdateWithWhereUniqueWithoutPrivy_userInput | wallets_usersUpdateWithWhereUniqueWithoutPrivy_userInput[]
    updateMany?: wallets_usersUpdateManyWithWhereWithoutPrivy_userInput | wallets_usersUpdateManyWithWhereWithoutPrivy_userInput[]
    deleteMany?: wallets_usersScalarWhereInput | wallets_usersScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type privy_userCreateNestedOneWithoutTtsInput = {
    create?: XOR<privy_userCreateWithoutTtsInput, privy_userUncheckedCreateWithoutTtsInput>
    connectOrCreate?: privy_userCreateOrConnectWithoutTtsInput
    connect?: privy_userWhereUniqueInput
  }

  export type privy_userUpdateOneRequiredWithoutTtsNestedInput = {
    create?: XOR<privy_userCreateWithoutTtsInput, privy_userUncheckedCreateWithoutTtsInput>
    connectOrCreate?: privy_userCreateOrConnectWithoutTtsInput
    upsert?: privy_userUpsertWithoutTtsInput
    connect?: privy_userWhereUniqueInput
    update?: XOR<XOR<privy_userUpdateToOneWithWhereWithoutTtsInput, privy_userUpdateWithoutTtsInput>, privy_userUncheckedUpdateWithoutTtsInput>
  }

  export type privy_userCreateNestedOneWithoutUser_watching_tokensInput = {
    create?: XOR<privy_userCreateWithoutUser_watching_tokensInput, privy_userUncheckedCreateWithoutUser_watching_tokensInput>
    connectOrCreate?: privy_userCreateOrConnectWithoutUser_watching_tokensInput
    connect?: privy_userWhereUniqueInput
  }

  export type privy_userUpdateOneRequiredWithoutUser_watching_tokensNestedInput = {
    create?: XOR<privy_userCreateWithoutUser_watching_tokensInput, privy_userUncheckedCreateWithoutUser_watching_tokensInput>
    connectOrCreate?: privy_userCreateOrConnectWithoutUser_watching_tokensInput
    upsert?: privy_userUpsertWithoutUser_watching_tokensInput
    connect?: privy_userWhereUniqueInput
    update?: XOR<XOR<privy_userUpdateToOneWithWhereWithoutUser_watching_tokensInput, privy_userUpdateWithoutUser_watching_tokensInput>, privy_userUncheckedUpdateWithoutUser_watching_tokensInput>
  }

  export type wallets_usersCreateNestedManyWithoutWalletsInput = {
    create?: XOR<wallets_usersCreateWithoutWalletsInput, wallets_usersUncheckedCreateWithoutWalletsInput> | wallets_usersCreateWithoutWalletsInput[] | wallets_usersUncheckedCreateWithoutWalletsInput[]
    connectOrCreate?: wallets_usersCreateOrConnectWithoutWalletsInput | wallets_usersCreateOrConnectWithoutWalletsInput[]
    createMany?: wallets_usersCreateManyWalletsInputEnvelope
    connect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
  }

  export type wallets_usersUncheckedCreateNestedManyWithoutWalletsInput = {
    create?: XOR<wallets_usersCreateWithoutWalletsInput, wallets_usersUncheckedCreateWithoutWalletsInput> | wallets_usersCreateWithoutWalletsInput[] | wallets_usersUncheckedCreateWithoutWalletsInput[]
    connectOrCreate?: wallets_usersCreateOrConnectWithoutWalletsInput | wallets_usersCreateOrConnectWithoutWalletsInput[]
    createMany?: wallets_usersCreateManyWalletsInputEnvelope
    connect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
  }

  export type wallets_usersUpdateManyWithoutWalletsNestedInput = {
    create?: XOR<wallets_usersCreateWithoutWalletsInput, wallets_usersUncheckedCreateWithoutWalletsInput> | wallets_usersCreateWithoutWalletsInput[] | wallets_usersUncheckedCreateWithoutWalletsInput[]
    connectOrCreate?: wallets_usersCreateOrConnectWithoutWalletsInput | wallets_usersCreateOrConnectWithoutWalletsInput[]
    upsert?: wallets_usersUpsertWithWhereUniqueWithoutWalletsInput | wallets_usersUpsertWithWhereUniqueWithoutWalletsInput[]
    createMany?: wallets_usersCreateManyWalletsInputEnvelope
    set?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    disconnect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    delete?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    connect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    update?: wallets_usersUpdateWithWhereUniqueWithoutWalletsInput | wallets_usersUpdateWithWhereUniqueWithoutWalletsInput[]
    updateMany?: wallets_usersUpdateManyWithWhereWithoutWalletsInput | wallets_usersUpdateManyWithWhereWithoutWalletsInput[]
    deleteMany?: wallets_usersScalarWhereInput | wallets_usersScalarWhereInput[]
  }

  export type wallets_usersUncheckedUpdateManyWithoutWalletsNestedInput = {
    create?: XOR<wallets_usersCreateWithoutWalletsInput, wallets_usersUncheckedCreateWithoutWalletsInput> | wallets_usersCreateWithoutWalletsInput[] | wallets_usersUncheckedCreateWithoutWalletsInput[]
    connectOrCreate?: wallets_usersCreateOrConnectWithoutWalletsInput | wallets_usersCreateOrConnectWithoutWalletsInput[]
    upsert?: wallets_usersUpsertWithWhereUniqueWithoutWalletsInput | wallets_usersUpsertWithWhereUniqueWithoutWalletsInput[]
    createMany?: wallets_usersCreateManyWalletsInputEnvelope
    set?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    disconnect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    delete?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    connect?: wallets_usersWhereUniqueInput | wallets_usersWhereUniqueInput[]
    update?: wallets_usersUpdateWithWhereUniqueWithoutWalletsInput | wallets_usersUpdateWithWhereUniqueWithoutWalletsInput[]
    updateMany?: wallets_usersUpdateManyWithWhereWithoutWalletsInput | wallets_usersUpdateManyWithWhereWithoutWalletsInput[]
    deleteMany?: wallets_usersScalarWhereInput | wallets_usersScalarWhereInput[]
  }

  export type wallets_transactionsCreateaccountsInput = {
    set: string[]
  }

  export type wallets_transactionsUpdateaccountsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type gangsCreateNestedOneWithoutWallets_usersInput = {
    create?: XOR<gangsCreateWithoutWallets_usersInput, gangsUncheckedCreateWithoutWallets_usersInput>
    connectOrCreate?: gangsCreateOrConnectWithoutWallets_usersInput
    connect?: gangsWhereUniqueInput
  }

  export type privy_userCreateNestedOneWithoutWallets_usersInput = {
    create?: XOR<privy_userCreateWithoutWallets_usersInput, privy_userUncheckedCreateWithoutWallets_usersInput>
    connectOrCreate?: privy_userCreateOrConnectWithoutWallets_usersInput
    connect?: privy_userWhereUniqueInput
  }

  export type walletsCreateNestedOneWithoutWallets_usersInput = {
    create?: XOR<walletsCreateWithoutWallets_usersInput, walletsUncheckedCreateWithoutWallets_usersInput>
    connectOrCreate?: walletsCreateOrConnectWithoutWallets_usersInput
    connect?: walletsWhereUniqueInput
  }

  export type gangsUpdateOneWithoutWallets_usersNestedInput = {
    create?: XOR<gangsCreateWithoutWallets_usersInput, gangsUncheckedCreateWithoutWallets_usersInput>
    connectOrCreate?: gangsCreateOrConnectWithoutWallets_usersInput
    upsert?: gangsUpsertWithoutWallets_usersInput
    disconnect?: gangsWhereInput | boolean
    delete?: gangsWhereInput | boolean
    connect?: gangsWhereUniqueInput
    update?: XOR<XOR<gangsUpdateToOneWithWhereWithoutWallets_usersInput, gangsUpdateWithoutWallets_usersInput>, gangsUncheckedUpdateWithoutWallets_usersInput>
  }

  export type privy_userUpdateOneRequiredWithoutWallets_usersNestedInput = {
    create?: XOR<privy_userCreateWithoutWallets_usersInput, privy_userUncheckedCreateWithoutWallets_usersInput>
    connectOrCreate?: privy_userCreateOrConnectWithoutWallets_usersInput
    upsert?: privy_userUpsertWithoutWallets_usersInput
    connect?: privy_userWhereUniqueInput
    update?: XOR<XOR<privy_userUpdateToOneWithWhereWithoutWallets_usersInput, privy_userUpdateWithoutWallets_usersInput>, privy_userUncheckedUpdateWithoutWallets_usersInput>
  }

  export type walletsUpdateOneRequiredWithoutWallets_usersNestedInput = {
    create?: XOR<walletsCreateWithoutWallets_usersInput, walletsUncheckedCreateWithoutWallets_usersInput>
    connectOrCreate?: walletsCreateOrConnectWithoutWallets_usersInput
    upsert?: walletsUpsertWithoutWallets_usersInput
    connect?: walletsWhereUniqueInput
    update?: XOR<XOR<walletsUpdateToOneWithWhereWithoutWallets_usersInput, walletsUpdateWithoutWallets_usersInput>, walletsUncheckedUpdateWithoutWallets_usersInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type privy_userCreateWithoutFavoriteInput = {
    address?: string
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: string
    created_at?: Date | string
    gangs_collect?: privy_userCreategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did: string
    black_time?: number
    updated_at?: Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    gangs?: gangsCreateNestedManyWithoutPrivy_userInput
    tts?: ttsCreateNestedManyWithoutPrivy_userInput
    user_watching_tokens?: user_watching_tokensCreateNestedManyWithoutPrivy_userInput
    wallets_users?: wallets_usersCreateNestedManyWithoutPrivy_userInput
  }

  export type privy_userUncheckedCreateWithoutFavoriteInput = {
    id?: number
    address?: string
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: string
    created_at?: Date | string
    gangs_collect?: privy_userCreategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did: string
    black_time?: number
    updated_at?: Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    gangs?: gangsUncheckedCreateNestedManyWithoutPrivy_userInput
    tts?: ttsUncheckedCreateNestedManyWithoutPrivy_userInput
    user_watching_tokens?: user_watching_tokensUncheckedCreateNestedManyWithoutPrivy_userInput
    wallets_users?: wallets_usersUncheckedCreateNestedManyWithoutPrivy_userInput
  }

  export type privy_userCreateOrConnectWithoutFavoriteInput = {
    where: privy_userWhereUniqueInput
    create: XOR<privy_userCreateWithoutFavoriteInput, privy_userUncheckedCreateWithoutFavoriteInput>
  }

  export type privy_userUpsertWithoutFavoriteInput = {
    update: XOR<privy_userUpdateWithoutFavoriteInput, privy_userUncheckedUpdateWithoutFavoriteInput>
    create: XOR<privy_userCreateWithoutFavoriteInput, privy_userUncheckedCreateWithoutFavoriteInput>
    where?: privy_userWhereInput
  }

  export type privy_userUpdateToOneWithWhereWithoutFavoriteInput = {
    where?: privy_userWhereInput
    data: XOR<privy_userUpdateWithoutFavoriteInput, privy_userUncheckedUpdateWithoutFavoriteInput>
  }

  export type privy_userUpdateWithoutFavoriteInput = {
    address?: StringFieldUpdateOperationsInput | string
    txs_switch?: BoolFieldUpdateOperationsInput | boolean
    dis_switch?: BoolFieldUpdateOperationsInput | boolean
    multiple_switch?: BoolFieldUpdateOperationsInput | boolean
    tts_switch?: BoolFieldUpdateOperationsInput | boolean
    range_times?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs_collect?: privy_userUpdategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    gangs?: gangsUpdateManyWithoutPrivy_userNestedInput
    tts?: ttsUpdateManyWithoutPrivy_userNestedInput
    user_watching_tokens?: user_watching_tokensUpdateManyWithoutPrivy_userNestedInput
    wallets_users?: wallets_usersUpdateManyWithoutPrivy_userNestedInput
  }

  export type privy_userUncheckedUpdateWithoutFavoriteInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    txs_switch?: BoolFieldUpdateOperationsInput | boolean
    dis_switch?: BoolFieldUpdateOperationsInput | boolean
    multiple_switch?: BoolFieldUpdateOperationsInput | boolean
    tts_switch?: BoolFieldUpdateOperationsInput | boolean
    range_times?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs_collect?: privy_userUpdategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    gangs?: gangsUncheckedUpdateManyWithoutPrivy_userNestedInput
    tts?: ttsUncheckedUpdateManyWithoutPrivy_userNestedInput
    user_watching_tokens?: user_watching_tokensUncheckedUpdateManyWithoutPrivy_userNestedInput
    wallets_users?: wallets_usersUncheckedUpdateManyWithoutPrivy_userNestedInput
  }

  export type privy_userCreateWithoutGangsInput = {
    address?: string
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: string
    created_at?: Date | string
    gangs_collect?: privy_userCreategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did: string
    black_time?: number
    updated_at?: Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteCreateNestedManyWithoutPrivy_userInput
    tts?: ttsCreateNestedManyWithoutPrivy_userInput
    user_watching_tokens?: user_watching_tokensCreateNestedManyWithoutPrivy_userInput
    wallets_users?: wallets_usersCreateNestedManyWithoutPrivy_userInput
  }

  export type privy_userUncheckedCreateWithoutGangsInput = {
    id?: number
    address?: string
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: string
    created_at?: Date | string
    gangs_collect?: privy_userCreategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did: string
    black_time?: number
    updated_at?: Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUncheckedCreateNestedManyWithoutPrivy_userInput
    tts?: ttsUncheckedCreateNestedManyWithoutPrivy_userInput
    user_watching_tokens?: user_watching_tokensUncheckedCreateNestedManyWithoutPrivy_userInput
    wallets_users?: wallets_usersUncheckedCreateNestedManyWithoutPrivy_userInput
  }

  export type privy_userCreateOrConnectWithoutGangsInput = {
    where: privy_userWhereUniqueInput
    create: XOR<privy_userCreateWithoutGangsInput, privy_userUncheckedCreateWithoutGangsInput>
  }

  export type wallets_usersCreateWithoutGangsInput = {
    id?: bigint | number
    user_address?: string
    created_at?: Date | string
    name?: string
    tag?: JsonNullValueInput | InputJsonValue
    updated_at?: Date | string
    privy_user: privy_userCreateNestedOneWithoutWallets_usersInput
    wallets: walletsCreateNestedOneWithoutWallets_usersInput
  }

  export type wallets_usersUncheckedCreateWithoutGangsInput = {
    id?: bigint | number
    wallet_address: string
    user_address?: string
    created_at?: Date | string
    name?: string
    tag?: JsonNullValueInput | InputJsonValue
    user_did: string
    updated_at?: Date | string
  }

  export type wallets_usersCreateOrConnectWithoutGangsInput = {
    where: wallets_usersWhereUniqueInput
    create: XOR<wallets_usersCreateWithoutGangsInput, wallets_usersUncheckedCreateWithoutGangsInput>
  }

  export type wallets_usersCreateManyGangsInputEnvelope = {
    data: wallets_usersCreateManyGangsInput | wallets_usersCreateManyGangsInput[]
    skipDuplicates?: boolean
  }

  export type privy_userUpsertWithoutGangsInput = {
    update: XOR<privy_userUpdateWithoutGangsInput, privy_userUncheckedUpdateWithoutGangsInput>
    create: XOR<privy_userCreateWithoutGangsInput, privy_userUncheckedCreateWithoutGangsInput>
    where?: privy_userWhereInput
  }

  export type privy_userUpdateToOneWithWhereWithoutGangsInput = {
    where?: privy_userWhereInput
    data: XOR<privy_userUpdateWithoutGangsInput, privy_userUncheckedUpdateWithoutGangsInput>
  }

  export type privy_userUpdateWithoutGangsInput = {
    address?: StringFieldUpdateOperationsInput | string
    txs_switch?: BoolFieldUpdateOperationsInput | boolean
    dis_switch?: BoolFieldUpdateOperationsInput | boolean
    multiple_switch?: BoolFieldUpdateOperationsInput | boolean
    tts_switch?: BoolFieldUpdateOperationsInput | boolean
    range_times?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs_collect?: privy_userUpdategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUpdateManyWithoutPrivy_userNestedInput
    tts?: ttsUpdateManyWithoutPrivy_userNestedInput
    user_watching_tokens?: user_watching_tokensUpdateManyWithoutPrivy_userNestedInput
    wallets_users?: wallets_usersUpdateManyWithoutPrivy_userNestedInput
  }

  export type privy_userUncheckedUpdateWithoutGangsInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    txs_switch?: BoolFieldUpdateOperationsInput | boolean
    dis_switch?: BoolFieldUpdateOperationsInput | boolean
    multiple_switch?: BoolFieldUpdateOperationsInput | boolean
    tts_switch?: BoolFieldUpdateOperationsInput | boolean
    range_times?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs_collect?: privy_userUpdategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUncheckedUpdateManyWithoutPrivy_userNestedInput
    tts?: ttsUncheckedUpdateManyWithoutPrivy_userNestedInput
    user_watching_tokens?: user_watching_tokensUncheckedUpdateManyWithoutPrivy_userNestedInput
    wallets_users?: wallets_usersUncheckedUpdateManyWithoutPrivy_userNestedInput
  }

  export type wallets_usersUpsertWithWhereUniqueWithoutGangsInput = {
    where: wallets_usersWhereUniqueInput
    update: XOR<wallets_usersUpdateWithoutGangsInput, wallets_usersUncheckedUpdateWithoutGangsInput>
    create: XOR<wallets_usersCreateWithoutGangsInput, wallets_usersUncheckedCreateWithoutGangsInput>
  }

  export type wallets_usersUpdateWithWhereUniqueWithoutGangsInput = {
    where: wallets_usersWhereUniqueInput
    data: XOR<wallets_usersUpdateWithoutGangsInput, wallets_usersUncheckedUpdateWithoutGangsInput>
  }

  export type wallets_usersUpdateManyWithWhereWithoutGangsInput = {
    where: wallets_usersScalarWhereInput
    data: XOR<wallets_usersUpdateManyMutationInput, wallets_usersUncheckedUpdateManyWithoutGangsInput>
  }

  export type wallets_usersScalarWhereInput = {
    AND?: wallets_usersScalarWhereInput | wallets_usersScalarWhereInput[]
    OR?: wallets_usersScalarWhereInput[]
    NOT?: wallets_usersScalarWhereInput | wallets_usersScalarWhereInput[]
    id?: BigIntFilter<"wallets_users"> | bigint | number
    wallet_address?: StringFilter<"wallets_users"> | string
    user_address?: StringFilter<"wallets_users"> | string
    created_at?: DateTimeFilter<"wallets_users"> | Date | string
    name?: StringFilter<"wallets_users"> | string
    tag?: JsonFilter<"wallets_users">
    gangs_id?: IntNullableFilter<"wallets_users"> | number | null
    user_did?: StringFilter<"wallets_users"> | string
    updated_at?: DateTimeFilter<"wallets_users"> | Date | string
  }

  export type favoriteCreateWithoutPrivy_userInput = {
    favorite_address: string
    state?: number
    privy_address?: string
    updated_at?: Date | string
  }

  export type favoriteUncheckedCreateWithoutPrivy_userInput = {
    id?: number
    favorite_address: string
    state?: number
    privy_address?: string
    updated_at?: Date | string
  }

  export type favoriteCreateOrConnectWithoutPrivy_userInput = {
    where: favoriteWhereUniqueInput
    create: XOR<favoriteCreateWithoutPrivy_userInput, favoriteUncheckedCreateWithoutPrivy_userInput>
  }

  export type favoriteCreateManyPrivy_userInputEnvelope = {
    data: favoriteCreateManyPrivy_userInput | favoriteCreateManyPrivy_userInput[]
    skipDuplicates?: boolean
  }

  export type gangsCreateWithoutPrivy_userInput = {
    user_address?: string
    name: string
    created_at?: Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: number
    is_published?: boolean
    published_time?: number
    description?: string
    updated_at?: Date | string
    wallets_users?: wallets_usersCreateNestedManyWithoutGangsInput
  }

  export type gangsUncheckedCreateWithoutPrivy_userInput = {
    id?: number
    user_address?: string
    name: string
    created_at?: Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: number
    is_published?: boolean
    published_time?: number
    description?: string
    updated_at?: Date | string
    wallets_users?: wallets_usersUncheckedCreateNestedManyWithoutGangsInput
  }

  export type gangsCreateOrConnectWithoutPrivy_userInput = {
    where: gangsWhereUniqueInput
    create: XOR<gangsCreateWithoutPrivy_userInput, gangsUncheckedCreateWithoutPrivy_userInput>
  }

  export type gangsCreateManyPrivy_userInputEnvelope = {
    data: gangsCreateManyPrivy_userInput | gangsCreateManyPrivy_userInput[]
    skipDuplicates?: boolean
  }

  export type ttsCreateWithoutPrivy_userInput = {
    tts_address: string
    state?: number
    privy_address?: string
    updated_at?: Date | string
  }

  export type ttsUncheckedCreateWithoutPrivy_userInput = {
    id?: number
    tts_address: string
    state?: number
    privy_address?: string
    updated_at?: Date | string
  }

  export type ttsCreateOrConnectWithoutPrivy_userInput = {
    where: ttsWhereUniqueInput
    create: XOR<ttsCreateWithoutPrivy_userInput, ttsUncheckedCreateWithoutPrivy_userInput>
  }

  export type ttsCreateManyPrivy_userInputEnvelope = {
    data: ttsCreateManyPrivy_userInput | ttsCreateManyPrivy_userInput[]
    skipDuplicates?: boolean
  }

  export type user_watching_tokensCreateWithoutPrivy_userInput = {
    created_at?: Date | string
    token_address: string
    state?: number
    privy_address?: string
    updated_at?: Date | string
  }

  export type user_watching_tokensUncheckedCreateWithoutPrivy_userInput = {
    id?: number
    created_at?: Date | string
    token_address: string
    state?: number
    privy_address?: string
    updated_at?: Date | string
  }

  export type user_watching_tokensCreateOrConnectWithoutPrivy_userInput = {
    where: user_watching_tokensWhereUniqueInput
    create: XOR<user_watching_tokensCreateWithoutPrivy_userInput, user_watching_tokensUncheckedCreateWithoutPrivy_userInput>
  }

  export type user_watching_tokensCreateManyPrivy_userInputEnvelope = {
    data: user_watching_tokensCreateManyPrivy_userInput | user_watching_tokensCreateManyPrivy_userInput[]
    skipDuplicates?: boolean
  }

  export type wallets_usersCreateWithoutPrivy_userInput = {
    id?: bigint | number
    user_address?: string
    created_at?: Date | string
    name?: string
    tag?: JsonNullValueInput | InputJsonValue
    updated_at?: Date | string
    gangs?: gangsCreateNestedOneWithoutWallets_usersInput
    wallets: walletsCreateNestedOneWithoutWallets_usersInput
  }

  export type wallets_usersUncheckedCreateWithoutPrivy_userInput = {
    id?: bigint | number
    wallet_address: string
    user_address?: string
    created_at?: Date | string
    name?: string
    tag?: JsonNullValueInput | InputJsonValue
    gangs_id?: number | null
    updated_at?: Date | string
  }

  export type wallets_usersCreateOrConnectWithoutPrivy_userInput = {
    where: wallets_usersWhereUniqueInput
    create: XOR<wallets_usersCreateWithoutPrivy_userInput, wallets_usersUncheckedCreateWithoutPrivy_userInput>
  }

  export type wallets_usersCreateManyPrivy_userInputEnvelope = {
    data: wallets_usersCreateManyPrivy_userInput | wallets_usersCreateManyPrivy_userInput[]
    skipDuplicates?: boolean
  }

  export type favoriteUpsertWithWhereUniqueWithoutPrivy_userInput = {
    where: favoriteWhereUniqueInput
    update: XOR<favoriteUpdateWithoutPrivy_userInput, favoriteUncheckedUpdateWithoutPrivy_userInput>
    create: XOR<favoriteCreateWithoutPrivy_userInput, favoriteUncheckedCreateWithoutPrivy_userInput>
  }

  export type favoriteUpdateWithWhereUniqueWithoutPrivy_userInput = {
    where: favoriteWhereUniqueInput
    data: XOR<favoriteUpdateWithoutPrivy_userInput, favoriteUncheckedUpdateWithoutPrivy_userInput>
  }

  export type favoriteUpdateManyWithWhereWithoutPrivy_userInput = {
    where: favoriteScalarWhereInput
    data: XOR<favoriteUpdateManyMutationInput, favoriteUncheckedUpdateManyWithoutPrivy_userInput>
  }

  export type favoriteScalarWhereInput = {
    AND?: favoriteScalarWhereInput | favoriteScalarWhereInput[]
    OR?: favoriteScalarWhereInput[]
    NOT?: favoriteScalarWhereInput | favoriteScalarWhereInput[]
    id?: IntFilter<"favorite"> | number
    favorite_address?: StringFilter<"favorite"> | string
    state?: IntFilter<"favorite"> | number
    privy_address?: StringFilter<"favorite"> | string
    user_did?: StringFilter<"favorite"> | string
    updated_at?: DateTimeFilter<"favorite"> | Date | string
  }

  export type gangsUpsertWithWhereUniqueWithoutPrivy_userInput = {
    where: gangsWhereUniqueInput
    update: XOR<gangsUpdateWithoutPrivy_userInput, gangsUncheckedUpdateWithoutPrivy_userInput>
    create: XOR<gangsCreateWithoutPrivy_userInput, gangsUncheckedCreateWithoutPrivy_userInput>
  }

  export type gangsUpdateWithWhereUniqueWithoutPrivy_userInput = {
    where: gangsWhereUniqueInput
    data: XOR<gangsUpdateWithoutPrivy_userInput, gangsUncheckedUpdateWithoutPrivy_userInput>
  }

  export type gangsUpdateManyWithWhereWithoutPrivy_userInput = {
    where: gangsScalarWhereInput
    data: XOR<gangsUpdateManyMutationInput, gangsUncheckedUpdateManyWithoutPrivy_userInput>
  }

  export type gangsScalarWhereInput = {
    AND?: gangsScalarWhereInput | gangsScalarWhereInput[]
    OR?: gangsScalarWhereInput[]
    NOT?: gangsScalarWhereInput | gangsScalarWhereInput[]
    id?: IntFilter<"gangs"> | number
    user_address?: StringFilter<"gangs"> | string
    name?: StringFilter<"gangs"> | string
    created_at?: DateTimeFilter<"gangs"> | Date | string
    admins?: JsonFilter<"gangs">
    members?: JsonFilter<"gangs">
    type?: IntFilter<"gangs"> | number
    user_did?: StringFilter<"gangs"> | string
    is_published?: BoolFilter<"gangs"> | boolean
    published_time?: IntFilter<"gangs"> | number
    description?: StringFilter<"gangs"> | string
    updated_at?: DateTimeFilter<"gangs"> | Date | string
  }

  export type ttsUpsertWithWhereUniqueWithoutPrivy_userInput = {
    where: ttsWhereUniqueInput
    update: XOR<ttsUpdateWithoutPrivy_userInput, ttsUncheckedUpdateWithoutPrivy_userInput>
    create: XOR<ttsCreateWithoutPrivy_userInput, ttsUncheckedCreateWithoutPrivy_userInput>
  }

  export type ttsUpdateWithWhereUniqueWithoutPrivy_userInput = {
    where: ttsWhereUniqueInput
    data: XOR<ttsUpdateWithoutPrivy_userInput, ttsUncheckedUpdateWithoutPrivy_userInput>
  }

  export type ttsUpdateManyWithWhereWithoutPrivy_userInput = {
    where: ttsScalarWhereInput
    data: XOR<ttsUpdateManyMutationInput, ttsUncheckedUpdateManyWithoutPrivy_userInput>
  }

  export type ttsScalarWhereInput = {
    AND?: ttsScalarWhereInput | ttsScalarWhereInput[]
    OR?: ttsScalarWhereInput[]
    NOT?: ttsScalarWhereInput | ttsScalarWhereInput[]
    id?: IntFilter<"tts"> | number
    tts_address?: StringFilter<"tts"> | string
    state?: IntFilter<"tts"> | number
    privy_address?: StringFilter<"tts"> | string
    user_did?: StringFilter<"tts"> | string
    updated_at?: DateTimeFilter<"tts"> | Date | string
  }

  export type user_watching_tokensUpsertWithWhereUniqueWithoutPrivy_userInput = {
    where: user_watching_tokensWhereUniqueInput
    update: XOR<user_watching_tokensUpdateWithoutPrivy_userInput, user_watching_tokensUncheckedUpdateWithoutPrivy_userInput>
    create: XOR<user_watching_tokensCreateWithoutPrivy_userInput, user_watching_tokensUncheckedCreateWithoutPrivy_userInput>
  }

  export type user_watching_tokensUpdateWithWhereUniqueWithoutPrivy_userInput = {
    where: user_watching_tokensWhereUniqueInput
    data: XOR<user_watching_tokensUpdateWithoutPrivy_userInput, user_watching_tokensUncheckedUpdateWithoutPrivy_userInput>
  }

  export type user_watching_tokensUpdateManyWithWhereWithoutPrivy_userInput = {
    where: user_watching_tokensScalarWhereInput
    data: XOR<user_watching_tokensUpdateManyMutationInput, user_watching_tokensUncheckedUpdateManyWithoutPrivy_userInput>
  }

  export type user_watching_tokensScalarWhereInput = {
    AND?: user_watching_tokensScalarWhereInput | user_watching_tokensScalarWhereInput[]
    OR?: user_watching_tokensScalarWhereInput[]
    NOT?: user_watching_tokensScalarWhereInput | user_watching_tokensScalarWhereInput[]
    id?: IntFilter<"user_watching_tokens"> | number
    created_at?: DateTimeFilter<"user_watching_tokens"> | Date | string
    token_address?: StringFilter<"user_watching_tokens"> | string
    state?: IntFilter<"user_watching_tokens"> | number
    privy_address?: StringFilter<"user_watching_tokens"> | string
    user_did?: StringFilter<"user_watching_tokens"> | string
    updated_at?: DateTimeFilter<"user_watching_tokens"> | Date | string
  }

  export type wallets_usersUpsertWithWhereUniqueWithoutPrivy_userInput = {
    where: wallets_usersWhereUniqueInput
    update: XOR<wallets_usersUpdateWithoutPrivy_userInput, wallets_usersUncheckedUpdateWithoutPrivy_userInput>
    create: XOR<wallets_usersCreateWithoutPrivy_userInput, wallets_usersUncheckedCreateWithoutPrivy_userInput>
  }

  export type wallets_usersUpdateWithWhereUniqueWithoutPrivy_userInput = {
    where: wallets_usersWhereUniqueInput
    data: XOR<wallets_usersUpdateWithoutPrivy_userInput, wallets_usersUncheckedUpdateWithoutPrivy_userInput>
  }

  export type wallets_usersUpdateManyWithWhereWithoutPrivy_userInput = {
    where: wallets_usersScalarWhereInput
    data: XOR<wallets_usersUpdateManyMutationInput, wallets_usersUncheckedUpdateManyWithoutPrivy_userInput>
  }

  export type privy_userCreateWithoutTtsInput = {
    address?: string
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: string
    created_at?: Date | string
    gangs_collect?: privy_userCreategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did: string
    black_time?: number
    updated_at?: Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteCreateNestedManyWithoutPrivy_userInput
    gangs?: gangsCreateNestedManyWithoutPrivy_userInput
    user_watching_tokens?: user_watching_tokensCreateNestedManyWithoutPrivy_userInput
    wallets_users?: wallets_usersCreateNestedManyWithoutPrivy_userInput
  }

  export type privy_userUncheckedCreateWithoutTtsInput = {
    id?: number
    address?: string
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: string
    created_at?: Date | string
    gangs_collect?: privy_userCreategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did: string
    black_time?: number
    updated_at?: Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUncheckedCreateNestedManyWithoutPrivy_userInput
    gangs?: gangsUncheckedCreateNestedManyWithoutPrivy_userInput
    user_watching_tokens?: user_watching_tokensUncheckedCreateNestedManyWithoutPrivy_userInput
    wallets_users?: wallets_usersUncheckedCreateNestedManyWithoutPrivy_userInput
  }

  export type privy_userCreateOrConnectWithoutTtsInput = {
    where: privy_userWhereUniqueInput
    create: XOR<privy_userCreateWithoutTtsInput, privy_userUncheckedCreateWithoutTtsInput>
  }

  export type privy_userUpsertWithoutTtsInput = {
    update: XOR<privy_userUpdateWithoutTtsInput, privy_userUncheckedUpdateWithoutTtsInput>
    create: XOR<privy_userCreateWithoutTtsInput, privy_userUncheckedCreateWithoutTtsInput>
    where?: privy_userWhereInput
  }

  export type privy_userUpdateToOneWithWhereWithoutTtsInput = {
    where?: privy_userWhereInput
    data: XOR<privy_userUpdateWithoutTtsInput, privy_userUncheckedUpdateWithoutTtsInput>
  }

  export type privy_userUpdateWithoutTtsInput = {
    address?: StringFieldUpdateOperationsInput | string
    txs_switch?: BoolFieldUpdateOperationsInput | boolean
    dis_switch?: BoolFieldUpdateOperationsInput | boolean
    multiple_switch?: BoolFieldUpdateOperationsInput | boolean
    tts_switch?: BoolFieldUpdateOperationsInput | boolean
    range_times?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs_collect?: privy_userUpdategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUpdateManyWithoutPrivy_userNestedInput
    gangs?: gangsUpdateManyWithoutPrivy_userNestedInput
    user_watching_tokens?: user_watching_tokensUpdateManyWithoutPrivy_userNestedInput
    wallets_users?: wallets_usersUpdateManyWithoutPrivy_userNestedInput
  }

  export type privy_userUncheckedUpdateWithoutTtsInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    txs_switch?: BoolFieldUpdateOperationsInput | boolean
    dis_switch?: BoolFieldUpdateOperationsInput | boolean
    multiple_switch?: BoolFieldUpdateOperationsInput | boolean
    tts_switch?: BoolFieldUpdateOperationsInput | boolean
    range_times?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs_collect?: privy_userUpdategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUncheckedUpdateManyWithoutPrivy_userNestedInput
    gangs?: gangsUncheckedUpdateManyWithoutPrivy_userNestedInput
    user_watching_tokens?: user_watching_tokensUncheckedUpdateManyWithoutPrivy_userNestedInput
    wallets_users?: wallets_usersUncheckedUpdateManyWithoutPrivy_userNestedInput
  }

  export type privy_userCreateWithoutUser_watching_tokensInput = {
    address?: string
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: string
    created_at?: Date | string
    gangs_collect?: privy_userCreategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did: string
    black_time?: number
    updated_at?: Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteCreateNestedManyWithoutPrivy_userInput
    gangs?: gangsCreateNestedManyWithoutPrivy_userInput
    tts?: ttsCreateNestedManyWithoutPrivy_userInput
    wallets_users?: wallets_usersCreateNestedManyWithoutPrivy_userInput
  }

  export type privy_userUncheckedCreateWithoutUser_watching_tokensInput = {
    id?: number
    address?: string
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: string
    created_at?: Date | string
    gangs_collect?: privy_userCreategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did: string
    black_time?: number
    updated_at?: Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUncheckedCreateNestedManyWithoutPrivy_userInput
    gangs?: gangsUncheckedCreateNestedManyWithoutPrivy_userInput
    tts?: ttsUncheckedCreateNestedManyWithoutPrivy_userInput
    wallets_users?: wallets_usersUncheckedCreateNestedManyWithoutPrivy_userInput
  }

  export type privy_userCreateOrConnectWithoutUser_watching_tokensInput = {
    where: privy_userWhereUniqueInput
    create: XOR<privy_userCreateWithoutUser_watching_tokensInput, privy_userUncheckedCreateWithoutUser_watching_tokensInput>
  }

  export type privy_userUpsertWithoutUser_watching_tokensInput = {
    update: XOR<privy_userUpdateWithoutUser_watching_tokensInput, privy_userUncheckedUpdateWithoutUser_watching_tokensInput>
    create: XOR<privy_userCreateWithoutUser_watching_tokensInput, privy_userUncheckedCreateWithoutUser_watching_tokensInput>
    where?: privy_userWhereInput
  }

  export type privy_userUpdateToOneWithWhereWithoutUser_watching_tokensInput = {
    where?: privy_userWhereInput
    data: XOR<privy_userUpdateWithoutUser_watching_tokensInput, privy_userUncheckedUpdateWithoutUser_watching_tokensInput>
  }

  export type privy_userUpdateWithoutUser_watching_tokensInput = {
    address?: StringFieldUpdateOperationsInput | string
    txs_switch?: BoolFieldUpdateOperationsInput | boolean
    dis_switch?: BoolFieldUpdateOperationsInput | boolean
    multiple_switch?: BoolFieldUpdateOperationsInput | boolean
    tts_switch?: BoolFieldUpdateOperationsInput | boolean
    range_times?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs_collect?: privy_userUpdategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUpdateManyWithoutPrivy_userNestedInput
    gangs?: gangsUpdateManyWithoutPrivy_userNestedInput
    tts?: ttsUpdateManyWithoutPrivy_userNestedInput
    wallets_users?: wallets_usersUpdateManyWithoutPrivy_userNestedInput
  }

  export type privy_userUncheckedUpdateWithoutUser_watching_tokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    txs_switch?: BoolFieldUpdateOperationsInput | boolean
    dis_switch?: BoolFieldUpdateOperationsInput | boolean
    multiple_switch?: BoolFieldUpdateOperationsInput | boolean
    tts_switch?: BoolFieldUpdateOperationsInput | boolean
    range_times?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs_collect?: privy_userUpdategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUncheckedUpdateManyWithoutPrivy_userNestedInput
    gangs?: gangsUncheckedUpdateManyWithoutPrivy_userNestedInput
    tts?: ttsUncheckedUpdateManyWithoutPrivy_userNestedInput
    wallets_users?: wallets_usersUncheckedUpdateManyWithoutPrivy_userNestedInput
  }

  export type wallets_usersCreateWithoutWalletsInput = {
    id?: bigint | number
    user_address?: string
    created_at?: Date | string
    name?: string
    tag?: JsonNullValueInput | InputJsonValue
    updated_at?: Date | string
    gangs?: gangsCreateNestedOneWithoutWallets_usersInput
    privy_user: privy_userCreateNestedOneWithoutWallets_usersInput
  }

  export type wallets_usersUncheckedCreateWithoutWalletsInput = {
    id?: bigint | number
    user_address?: string
    created_at?: Date | string
    name?: string
    tag?: JsonNullValueInput | InputJsonValue
    gangs_id?: number | null
    user_did: string
    updated_at?: Date | string
  }

  export type wallets_usersCreateOrConnectWithoutWalletsInput = {
    where: wallets_usersWhereUniqueInput
    create: XOR<wallets_usersCreateWithoutWalletsInput, wallets_usersUncheckedCreateWithoutWalletsInput>
  }

  export type wallets_usersCreateManyWalletsInputEnvelope = {
    data: wallets_usersCreateManyWalletsInput | wallets_usersCreateManyWalletsInput[]
    skipDuplicates?: boolean
  }

  export type wallets_usersUpsertWithWhereUniqueWithoutWalletsInput = {
    where: wallets_usersWhereUniqueInput
    update: XOR<wallets_usersUpdateWithoutWalletsInput, wallets_usersUncheckedUpdateWithoutWalletsInput>
    create: XOR<wallets_usersCreateWithoutWalletsInput, wallets_usersUncheckedCreateWithoutWalletsInput>
  }

  export type wallets_usersUpdateWithWhereUniqueWithoutWalletsInput = {
    where: wallets_usersWhereUniqueInput
    data: XOR<wallets_usersUpdateWithoutWalletsInput, wallets_usersUncheckedUpdateWithoutWalletsInput>
  }

  export type wallets_usersUpdateManyWithWhereWithoutWalletsInput = {
    where: wallets_usersScalarWhereInput
    data: XOR<wallets_usersUpdateManyMutationInput, wallets_usersUncheckedUpdateManyWithoutWalletsInput>
  }

  export type gangsCreateWithoutWallets_usersInput = {
    user_address?: string
    name: string
    created_at?: Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: number
    is_published?: boolean
    published_time?: number
    description?: string
    updated_at?: Date | string
    privy_user: privy_userCreateNestedOneWithoutGangsInput
  }

  export type gangsUncheckedCreateWithoutWallets_usersInput = {
    id?: number
    user_address?: string
    name: string
    created_at?: Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: number
    user_did: string
    is_published?: boolean
    published_time?: number
    description?: string
    updated_at?: Date | string
  }

  export type gangsCreateOrConnectWithoutWallets_usersInput = {
    where: gangsWhereUniqueInput
    create: XOR<gangsCreateWithoutWallets_usersInput, gangsUncheckedCreateWithoutWallets_usersInput>
  }

  export type privy_userCreateWithoutWallets_usersInput = {
    address?: string
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: string
    created_at?: Date | string
    gangs_collect?: privy_userCreategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did: string
    black_time?: number
    updated_at?: Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteCreateNestedManyWithoutPrivy_userInput
    gangs?: gangsCreateNestedManyWithoutPrivy_userInput
    tts?: ttsCreateNestedManyWithoutPrivy_userInput
    user_watching_tokens?: user_watching_tokensCreateNestedManyWithoutPrivy_userInput
  }

  export type privy_userUncheckedCreateWithoutWallets_usersInput = {
    id?: number
    address?: string
    txs_switch?: boolean
    dis_switch?: boolean
    multiple_switch?: boolean
    tts_switch?: boolean
    range_times?: string
    created_at?: Date | string
    gangs_collect?: privy_userCreategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did: string
    black_time?: number
    updated_at?: Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUncheckedCreateNestedManyWithoutPrivy_userInput
    gangs?: gangsUncheckedCreateNestedManyWithoutPrivy_userInput
    tts?: ttsUncheckedCreateNestedManyWithoutPrivy_userInput
    user_watching_tokens?: user_watching_tokensUncheckedCreateNestedManyWithoutPrivy_userInput
  }

  export type privy_userCreateOrConnectWithoutWallets_usersInput = {
    where: privy_userWhereUniqueInput
    create: XOR<privy_userCreateWithoutWallets_usersInput, privy_userUncheckedCreateWithoutWallets_usersInput>
  }

  export type walletsCreateWithoutWallets_usersInput = {
    id?: bigint | number
    address: string
    state?: number
    created_at?: Date | string
    type?: string
    black_time?: number
    updated_at?: Date | string
  }

  export type walletsUncheckedCreateWithoutWallets_usersInput = {
    id?: bigint | number
    address: string
    state?: number
    created_at?: Date | string
    type?: string
    black_time?: number
    updated_at?: Date | string
  }

  export type walletsCreateOrConnectWithoutWallets_usersInput = {
    where: walletsWhereUniqueInput
    create: XOR<walletsCreateWithoutWallets_usersInput, walletsUncheckedCreateWithoutWallets_usersInput>
  }

  export type gangsUpsertWithoutWallets_usersInput = {
    update: XOR<gangsUpdateWithoutWallets_usersInput, gangsUncheckedUpdateWithoutWallets_usersInput>
    create: XOR<gangsCreateWithoutWallets_usersInput, gangsUncheckedCreateWithoutWallets_usersInput>
    where?: gangsWhereInput
  }

  export type gangsUpdateToOneWithWhereWithoutWallets_usersInput = {
    where?: gangsWhereInput
    data: XOR<gangsUpdateWithoutWallets_usersInput, gangsUncheckedUpdateWithoutWallets_usersInput>
  }

  export type gangsUpdateWithoutWallets_usersInput = {
    user_address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: IntFieldUpdateOperationsInput | number
    is_published?: BoolFieldUpdateOperationsInput | boolean
    published_time?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    privy_user?: privy_userUpdateOneRequiredWithoutGangsNestedInput
  }

  export type gangsUncheckedUpdateWithoutWallets_usersInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: IntFieldUpdateOperationsInput | number
    user_did?: StringFieldUpdateOperationsInput | string
    is_published?: BoolFieldUpdateOperationsInput | boolean
    published_time?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type privy_userUpsertWithoutWallets_usersInput = {
    update: XOR<privy_userUpdateWithoutWallets_usersInput, privy_userUncheckedUpdateWithoutWallets_usersInput>
    create: XOR<privy_userCreateWithoutWallets_usersInput, privy_userUncheckedCreateWithoutWallets_usersInput>
    where?: privy_userWhereInput
  }

  export type privy_userUpdateToOneWithWhereWithoutWallets_usersInput = {
    where?: privy_userWhereInput
    data: XOR<privy_userUpdateWithoutWallets_usersInput, privy_userUncheckedUpdateWithoutWallets_usersInput>
  }

  export type privy_userUpdateWithoutWallets_usersInput = {
    address?: StringFieldUpdateOperationsInput | string
    txs_switch?: BoolFieldUpdateOperationsInput | boolean
    dis_switch?: BoolFieldUpdateOperationsInput | boolean
    multiple_switch?: BoolFieldUpdateOperationsInput | boolean
    tts_switch?: BoolFieldUpdateOperationsInput | boolean
    range_times?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs_collect?: privy_userUpdategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUpdateManyWithoutPrivy_userNestedInput
    gangs?: gangsUpdateManyWithoutPrivy_userNestedInput
    tts?: ttsUpdateManyWithoutPrivy_userNestedInput
    user_watching_tokens?: user_watching_tokensUpdateManyWithoutPrivy_userNestedInput
  }

  export type privy_userUncheckedUpdateWithoutWallets_usersInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    txs_switch?: BoolFieldUpdateOperationsInput | boolean
    dis_switch?: BoolFieldUpdateOperationsInput | boolean
    multiple_switch?: BoolFieldUpdateOperationsInput | boolean
    tts_switch?: BoolFieldUpdateOperationsInput | boolean
    range_times?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs_collect?: privy_userUpdategangs_collectInput | number[]
    auto_buy_setting?: NullableJsonNullValueInput | InputJsonValue
    swap_setting?: NullableJsonNullValueInput | InputJsonValue
    tg_bot?: NullableJsonNullValueInput | InputJsonValue
    did?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    fomo_setting?: NullableJsonNullValueInput | InputJsonValue
    favorite?: favoriteUncheckedUpdateManyWithoutPrivy_userNestedInput
    gangs?: gangsUncheckedUpdateManyWithoutPrivy_userNestedInput
    tts?: ttsUncheckedUpdateManyWithoutPrivy_userNestedInput
    user_watching_tokens?: user_watching_tokensUncheckedUpdateManyWithoutPrivy_userNestedInput
  }

  export type walletsUpsertWithoutWallets_usersInput = {
    update: XOR<walletsUpdateWithoutWallets_usersInput, walletsUncheckedUpdateWithoutWallets_usersInput>
    create: XOR<walletsCreateWithoutWallets_usersInput, walletsUncheckedCreateWithoutWallets_usersInput>
    where?: walletsWhereInput
  }

  export type walletsUpdateToOneWithWhereWithoutWallets_usersInput = {
    where?: walletsWhereInput
    data: XOR<walletsUpdateWithoutWallets_usersInput, walletsUncheckedUpdateWithoutWallets_usersInput>
  }

  export type walletsUpdateWithoutWallets_usersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type walletsUncheckedUpdateWithoutWallets_usersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    black_time?: IntFieldUpdateOperationsInput | number
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wallets_usersCreateManyGangsInput = {
    id?: bigint | number
    wallet_address: string
    user_address?: string
    created_at?: Date | string
    name?: string
    tag?: JsonNullValueInput | InputJsonValue
    user_did: string
    updated_at?: Date | string
  }

  export type wallets_usersUpdateWithoutGangsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: JsonNullValueInput | InputJsonValue
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    privy_user?: privy_userUpdateOneRequiredWithoutWallets_usersNestedInput
    wallets?: walletsUpdateOneRequiredWithoutWallets_usersNestedInput
  }

  export type wallets_usersUncheckedUpdateWithoutGangsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    wallet_address?: StringFieldUpdateOperationsInput | string
    user_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: JsonNullValueInput | InputJsonValue
    user_did?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wallets_usersUncheckedUpdateManyWithoutGangsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    wallet_address?: StringFieldUpdateOperationsInput | string
    user_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: JsonNullValueInput | InputJsonValue
    user_did?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favoriteCreateManyPrivy_userInput = {
    id?: number
    favorite_address: string
    state?: number
    privy_address?: string
    updated_at?: Date | string
  }

  export type gangsCreateManyPrivy_userInput = {
    id?: number
    user_address?: string
    name: string
    created_at?: Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: number
    is_published?: boolean
    published_time?: number
    description?: string
    updated_at?: Date | string
  }

  export type ttsCreateManyPrivy_userInput = {
    id?: number
    tts_address: string
    state?: number
    privy_address?: string
    updated_at?: Date | string
  }

  export type user_watching_tokensCreateManyPrivy_userInput = {
    id?: number
    created_at?: Date | string
    token_address: string
    state?: number
    privy_address?: string
    updated_at?: Date | string
  }

  export type wallets_usersCreateManyPrivy_userInput = {
    id?: bigint | number
    wallet_address: string
    user_address?: string
    created_at?: Date | string
    name?: string
    tag?: JsonNullValueInput | InputJsonValue
    gangs_id?: number | null
    updated_at?: Date | string
  }

  export type favoriteUpdateWithoutPrivy_userInput = {
    favorite_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favoriteUncheckedUpdateWithoutPrivy_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    favorite_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type favoriteUncheckedUpdateManyWithoutPrivy_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    favorite_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type gangsUpdateWithoutPrivy_userInput = {
    user_address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: IntFieldUpdateOperationsInput | number
    is_published?: BoolFieldUpdateOperationsInput | boolean
    published_time?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    wallets_users?: wallets_usersUpdateManyWithoutGangsNestedInput
  }

  export type gangsUncheckedUpdateWithoutPrivy_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: IntFieldUpdateOperationsInput | number
    is_published?: BoolFieldUpdateOperationsInput | boolean
    published_time?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    wallets_users?: wallets_usersUncheckedUpdateManyWithoutGangsNestedInput
  }

  export type gangsUncheckedUpdateManyWithoutPrivy_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_address?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    admins?: JsonNullValueInput | InputJsonValue
    members?: JsonNullValueInput | InputJsonValue
    type?: IntFieldUpdateOperationsInput | number
    is_published?: BoolFieldUpdateOperationsInput | boolean
    published_time?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ttsUpdateWithoutPrivy_userInput = {
    tts_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ttsUncheckedUpdateWithoutPrivy_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    tts_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ttsUncheckedUpdateManyWithoutPrivy_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    tts_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_watching_tokensUpdateWithoutPrivy_userInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    token_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_watching_tokensUncheckedUpdateWithoutPrivy_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    token_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type user_watching_tokensUncheckedUpdateManyWithoutPrivy_userInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    token_address?: StringFieldUpdateOperationsInput | string
    state?: IntFieldUpdateOperationsInput | number
    privy_address?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wallets_usersUpdateWithoutPrivy_userInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: JsonNullValueInput | InputJsonValue
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs?: gangsUpdateOneWithoutWallets_usersNestedInput
    wallets?: walletsUpdateOneRequiredWithoutWallets_usersNestedInput
  }

  export type wallets_usersUncheckedUpdateWithoutPrivy_userInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    wallet_address?: StringFieldUpdateOperationsInput | string
    user_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: JsonNullValueInput | InputJsonValue
    gangs_id?: NullableIntFieldUpdateOperationsInput | number | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wallets_usersUncheckedUpdateManyWithoutPrivy_userInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    wallet_address?: StringFieldUpdateOperationsInput | string
    user_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: JsonNullValueInput | InputJsonValue
    gangs_id?: NullableIntFieldUpdateOperationsInput | number | null
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wallets_usersCreateManyWalletsInput = {
    id?: bigint | number
    user_address?: string
    created_at?: Date | string
    name?: string
    tag?: JsonNullValueInput | InputJsonValue
    gangs_id?: number | null
    user_did: string
    updated_at?: Date | string
  }

  export type wallets_usersUpdateWithoutWalletsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: JsonNullValueInput | InputJsonValue
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    gangs?: gangsUpdateOneWithoutWallets_usersNestedInput
    privy_user?: privy_userUpdateOneRequiredWithoutWallets_usersNestedInput
  }

  export type wallets_usersUncheckedUpdateWithoutWalletsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: JsonNullValueInput | InputJsonValue
    gangs_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_did?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type wallets_usersUncheckedUpdateManyWithoutWalletsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    user_address?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    tag?: JsonNullValueInput | InputJsonValue
    gangs_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_did?: StringFieldUpdateOperationsInput | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}